/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Astra
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Astra {
  public static final String SERIALIZED_NAME_AUTH_TOKEN = "authToken";
  @SerializedName(SERIALIZED_NAME_AUTH_TOKEN)
  private String authToken;

  public static final String SERIALIZED_NAME_DEBIT_FEE_PERCENT = "debitFeePercent";
  @SerializedName(SERIALIZED_NAME_DEBIT_FEE_PERCENT)
  private BigDecimal debitFeePercent;

  public static final String SERIALIZED_NAME_INSTITUTION_ID = "institutionId";
  @SerializedName(SERIALIZED_NAME_INSTITUTION_ID)
  private String institutionId;

  public static final String SERIALIZED_NAME_DESTINATION_CARD_ID = "destinationCardId";
  @SerializedName(SERIALIZED_NAME_DESTINATION_CARD_ID)
  private String destinationCardId;

  public static final String SERIALIZED_NAME_ROUTING_NUMBER = "routingNumber";
  @SerializedName(SERIALIZED_NAME_ROUTING_NUMBER)
  private String routingNumber;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "accountNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "accountName";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  private String accountName;

  public static final String SERIALIZED_NAME_REFERENCE_ID = "referenceId";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private String referenceId;

  public Astra() {
  }

  public Astra authToken(String authToken) {
    
    this.authToken = authToken;
    return this;
  }

   /**
   * Get authToken
   * @return authToken
  **/
  @javax.annotation.Nullable
  public String getAuthToken() {
    return authToken;
  }


  public void setAuthToken(String authToken) {
    this.authToken = authToken;
  }


  public Astra debitFeePercent(BigDecimal debitFeePercent) {
    
    this.debitFeePercent = debitFeePercent;
    return this;
  }

   /**
   * Get debitFeePercent
   * @return debitFeePercent
  **/
  @javax.annotation.Nonnull
  public BigDecimal getDebitFeePercent() {
    return debitFeePercent;
  }


  public void setDebitFeePercent(BigDecimal debitFeePercent) {
    this.debitFeePercent = debitFeePercent;
  }


  public Astra institutionId(String institutionId) {
    
    this.institutionId = institutionId;
    return this;
  }

   /**
   * Get institutionId
   * @return institutionId
  **/
  @javax.annotation.Nonnull
  public String getInstitutionId() {
    return institutionId;
  }


  public void setInstitutionId(String institutionId) {
    this.institutionId = institutionId;
  }


  public Astra destinationCardId(String destinationCardId) {
    
    this.destinationCardId = destinationCardId;
    return this;
  }

   /**
   * Get destinationCardId
   * @return destinationCardId
  **/
  @javax.annotation.Nonnull
  public String getDestinationCardId() {
    return destinationCardId;
  }


  public void setDestinationCardId(String destinationCardId) {
    this.destinationCardId = destinationCardId;
  }


  public Astra routingNumber(String routingNumber) {
    
    this.routingNumber = routingNumber;
    return this;
  }

   /**
   * Get routingNumber
   * @return routingNumber
  **/
  @javax.annotation.Nonnull
  public String getRoutingNumber() {
    return routingNumber;
  }


  public void setRoutingNumber(String routingNumber) {
    this.routingNumber = routingNumber;
  }


  public Astra accountNumber(String accountNumber) {
    
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * Get accountNumber
   * @return accountNumber
  **/
  @javax.annotation.Nonnull
  public String getAccountNumber() {
    return accountNumber;
  }


  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }


  public Astra accountName(String accountName) {
    
    this.accountName = accountName;
    return this;
  }

   /**
   * Get accountName
   * @return accountName
  **/
  @javax.annotation.Nullable
  public String getAccountName() {
    return accountName;
  }


  public void setAccountName(String accountName) {
    this.accountName = accountName;
  }


  public Astra referenceId(String referenceId) {
    
    this.referenceId = referenceId;
    return this;
  }

   /**
   * Get referenceId
   * @return referenceId
  **/
  @javax.annotation.Nonnull
  public String getReferenceId() {
    return referenceId;
  }


  public void setReferenceId(String referenceId) {
    this.referenceId = referenceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Astra astra = (Astra) o;
    return Objects.equals(this.authToken, astra.authToken) &&
        Objects.equals(this.debitFeePercent, astra.debitFeePercent) &&
        Objects.equals(this.institutionId, astra.institutionId) &&
        Objects.equals(this.destinationCardId, astra.destinationCardId) &&
        Objects.equals(this.routingNumber, astra.routingNumber) &&
        Objects.equals(this.accountNumber, astra.accountNumber) &&
        Objects.equals(this.accountName, astra.accountName) &&
        Objects.equals(this.referenceId, astra.referenceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authToken, debitFeePercent, institutionId, destinationCardId, routingNumber, accountNumber, accountName, referenceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Astra {\n");
    sb.append("    authToken: ").append(toIndentedString(authToken)).append("\n");
    sb.append("    debitFeePercent: ").append(toIndentedString(debitFeePercent)).append("\n");
    sb.append("    institutionId: ").append(toIndentedString(institutionId)).append("\n");
    sb.append("    destinationCardId: ").append(toIndentedString(destinationCardId)).append("\n");
    sb.append("    routingNumber: ").append(toIndentedString(routingNumber)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authToken");
    openapiFields.add("debitFeePercent");
    openapiFields.add("institutionId");
    openapiFields.add("destinationCardId");
    openapiFields.add("routingNumber");
    openapiFields.add("accountNumber");
    openapiFields.add("accountName");
    openapiFields.add("referenceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("debitFeePercent");
    openapiRequiredFields.add("institutionId");
    openapiRequiredFields.add("destinationCardId");
    openapiRequiredFields.add("routingNumber");
    openapiRequiredFields.add("accountNumber");
    openapiRequiredFields.add("referenceId");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Astra
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Astra.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Astra is not found in the empty JSON string", Astra.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Astra.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Astra` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Astra.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authToken") != null && !jsonObj.get("authToken").isJsonNull()) && !jsonObj.get("authToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authToken").toString()));
      }
      if (!jsonObj.get("institutionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `institutionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("institutionId").toString()));
      }
      if (!jsonObj.get("destinationCardId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationCardId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationCardId").toString()));
      }
      if (!jsonObj.get("routingNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routingNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routingNumber").toString()));
      }
      if (!jsonObj.get("accountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountNumber").toString()));
      }
      if ((jsonObj.get("accountName") != null && !jsonObj.get("accountName").isJsonNull()) && !jsonObj.get("accountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountName").toString()));
      }
      if (!jsonObj.get("referenceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Astra.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Astra' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Astra> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Astra.class));

       return (TypeAdapter<T>) new TypeAdapter<Astra>() {
           @Override
           public void write(JsonWriter out, Astra value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Astra read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Astra given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Astra
  * @throws IOException if the JSON string is invalid with respect to Astra
  */
  public static Astra fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Astra.class);
  }

 /**
  * Convert an instance of Astra to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

