/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.Coordinates;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AtmLocationAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AtmLocationAttributes {
  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_LOCATION_NAME = "locationName";
  @SerializedName(SERIALIZED_NAME_LOCATION_NAME)
  private String locationName;

  public static final String SERIALIZED_NAME_COORDINATES = "coordinates";
  @SerializedName(SERIALIZED_NAME_COORDINATES)
  private Coordinates coordinates;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_DISTANCE = "distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private Integer distance;

  public static final String SERIALIZED_NAME_SURCHARGE_FREE = "surchargeFree";
  @SerializedName(SERIALIZED_NAME_SURCHARGE_FREE)
  private Boolean surchargeFree;

  public static final String SERIALIZED_NAME_ACCEPT_DEPOSITS = "acceptDeposits";
  @SerializedName(SERIALIZED_NAME_ACCEPT_DEPOSITS)
  private Boolean acceptDeposits;

  public AtmLocationAttributes() {
  }

  public AtmLocationAttributes network(String network) {
    
    this.network = network;
    return this;
  }

   /**
   * Get network
   * @return network
  **/
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }


  public void setNetwork(String network) {
    this.network = network;
  }


  public AtmLocationAttributes locationName(String locationName) {
    
    this.locationName = locationName;
    return this;
  }

   /**
   * Get locationName
   * @return locationName
  **/
  @javax.annotation.Nullable
  public String getLocationName() {
    return locationName;
  }


  public void setLocationName(String locationName) {
    this.locationName = locationName;
  }


  public AtmLocationAttributes coordinates(Coordinates coordinates) {
    
    this.coordinates = coordinates;
    return this;
  }

   /**
   * Get coordinates
   * @return coordinates
  **/
  @javax.annotation.Nullable
  public Coordinates getCoordinates() {
    return coordinates;
  }


  public void setCoordinates(Coordinates coordinates) {
    this.coordinates = coordinates;
  }


  public AtmLocationAttributes address(Address address) {
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  public Address getAddress() {
    return address;
  }


  public void setAddress(Address address) {
    this.address = address;
  }


  public AtmLocationAttributes distance(Integer distance) {
    
    this.distance = distance;
    return this;
  }

   /**
   * Get distance
   * @return distance
  **/
  @javax.annotation.Nullable
  public Integer getDistance() {
    return distance;
  }


  public void setDistance(Integer distance) {
    this.distance = distance;
  }


  public AtmLocationAttributes surchargeFree(Boolean surchargeFree) {
    
    this.surchargeFree = surchargeFree;
    return this;
  }

   /**
   * Get surchargeFree
   * @return surchargeFree
  **/
  @javax.annotation.Nullable
  public Boolean getSurchargeFree() {
    return surchargeFree;
  }


  public void setSurchargeFree(Boolean surchargeFree) {
    this.surchargeFree = surchargeFree;
  }


  public AtmLocationAttributes acceptDeposits(Boolean acceptDeposits) {
    
    this.acceptDeposits = acceptDeposits;
    return this;
  }

   /**
   * Get acceptDeposits
   * @return acceptDeposits
  **/
  @javax.annotation.Nullable
  public Boolean getAcceptDeposits() {
    return acceptDeposits;
  }


  public void setAcceptDeposits(Boolean acceptDeposits) {
    this.acceptDeposits = acceptDeposits;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AtmLocationAttributes atmLocationAttributes = (AtmLocationAttributes) o;
    return Objects.equals(this.network, atmLocationAttributes.network) &&
        Objects.equals(this.locationName, atmLocationAttributes.locationName) &&
        Objects.equals(this.coordinates, atmLocationAttributes.coordinates) &&
        Objects.equals(this.address, atmLocationAttributes.address) &&
        Objects.equals(this.distance, atmLocationAttributes.distance) &&
        Objects.equals(this.surchargeFree, atmLocationAttributes.surchargeFree) &&
        Objects.equals(this.acceptDeposits, atmLocationAttributes.acceptDeposits);
  }

  @Override
  public int hashCode() {
    return Objects.hash(network, locationName, coordinates, address, distance, surchargeFree, acceptDeposits);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AtmLocationAttributes {\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    locationName: ").append(toIndentedString(locationName)).append("\n");
    sb.append("    coordinates: ").append(toIndentedString(coordinates)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    surchargeFree: ").append(toIndentedString(surchargeFree)).append("\n");
    sb.append("    acceptDeposits: ").append(toIndentedString(acceptDeposits)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("network");
    openapiFields.add("locationName");
    openapiFields.add("coordinates");
    openapiFields.add("address");
    openapiFields.add("distance");
    openapiFields.add("surchargeFree");
    openapiFields.add("acceptDeposits");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AtmLocationAttributes
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AtmLocationAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AtmLocationAttributes is not found in the empty JSON string", AtmLocationAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AtmLocationAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AtmLocationAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if ((jsonObj.get("locationName") != null && !jsonObj.get("locationName").isJsonNull()) && !jsonObj.get("locationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationName").toString()));
      }
      // validate the optional field `coordinates`
      if (jsonObj.get("coordinates") != null && !jsonObj.get("coordinates").isJsonNull()) {
        Coordinates.validateJsonElement(jsonObj.get("coordinates"));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("address"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AtmLocationAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AtmLocationAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AtmLocationAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AtmLocationAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<AtmLocationAttributes>() {
           @Override
           public void write(JsonWriter out, AtmLocationAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AtmLocationAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AtmLocationAttributes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AtmLocationAttributes
  * @throws IOException if the JSON string is invalid with respect to AtmLocationAttributes
  */
  public static AtmLocationAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AtmLocationAttributes.class);
  }

 /**
  * Convert an instance of AtmLocationAttributes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

