/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AtmTransactionAllOfAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AtmTransactionAllOfAttributes {
  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  /**
   * Gets or Sets direction
   */
  @JsonAdapter(DirectionEnum.Adapter.class)
  public enum DirectionEnum {
    CREDIT("Credit"),
    
    DEBIT("Debit");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DirectionEnum fromValue(String value) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DirectionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private DirectionEnum direction;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private Integer balance;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public static final String SERIALIZED_NAME_CARD_LAST4_DIGITS = "cardLast4Digits";
  @SerializedName(SERIALIZED_NAME_CARD_LAST4_DIGITS)
  private String cardLast4Digits;

  public static final String SERIALIZED_NAME_ATM_NAME = "atmName";
  @SerializedName(SERIALIZED_NAME_ATM_NAME)
  private String atmName;

  public static final String SERIALIZED_NAME_ATM_LOCATION = "atmLocation";
  @SerializedName(SERIALIZED_NAME_ATM_LOCATION)
  private String atmLocation;

  public static final String SERIALIZED_NAME_SURCHARGE = "surcharge";
  @SerializedName(SERIALIZED_NAME_SURCHARGE)
  private Integer surcharge;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Object tags;

  public static final String SERIALIZED_NAME_NETWORK_TRANSACTION_ID = "networkTransactionId";
  @SerializedName(SERIALIZED_NAME_NETWORK_TRANSACTION_ID)
  private String networkTransactionId;

  public static final String SERIALIZED_NAME_INTERCHANGE = "interchange";
  @SerializedName(SERIALIZED_NAME_INTERCHANGE)
  private String interchange;

  public static final String SERIALIZED_NAME_INTERNATIONAL_SERVICE_FEE = "internationalServiceFee";
  @SerializedName(SERIALIZED_NAME_INTERNATIONAL_SERVICE_FEE)
  private Integer internationalServiceFee;

  public static final String SERIALIZED_NAME_CARD_NETWORK = "cardNetwork";
  @SerializedName(SERIALIZED_NAME_CARD_NETWORK)
  private String cardNetwork;

  public AtmTransactionAllOfAttributes() {
  }

  public AtmTransactionAllOfAttributes createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public AtmTransactionAllOfAttributes direction(DirectionEnum direction) {
    
    this.direction = direction;
    return this;
  }

   /**
   * Get direction
   * @return direction
  **/
  @javax.annotation.Nonnull
  public DirectionEnum getDirection() {
    return direction;
  }


  public void setDirection(DirectionEnum direction) {
    this.direction = direction;
  }


  public AtmTransactionAllOfAttributes amount(Integer amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nonnull
  public Integer getAmount() {
    return amount;
  }


  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public AtmTransactionAllOfAttributes balance(Integer balance) {
    
    this.balance = balance;
    return this;
  }

   /**
   * Get balance
   * @return balance
  **/
  @javax.annotation.Nonnull
  public Integer getBalance() {
    return balance;
  }


  public void setBalance(Integer balance) {
    this.balance = balance;
  }


  public AtmTransactionAllOfAttributes summary(String summary) {
    
    this.summary = summary;
    return this;
  }

   /**
   * Get summary
   * @return summary
  **/
  @javax.annotation.Nonnull
  public String getSummary() {
    return summary;
  }


  public void setSummary(String summary) {
    this.summary = summary;
  }


  public AtmTransactionAllOfAttributes cardLast4Digits(String cardLast4Digits) {
    
    this.cardLast4Digits = cardLast4Digits;
    return this;
  }

   /**
   * Get cardLast4Digits
   * @return cardLast4Digits
  **/
  @javax.annotation.Nonnull
  public String getCardLast4Digits() {
    return cardLast4Digits;
  }


  public void setCardLast4Digits(String cardLast4Digits) {
    this.cardLast4Digits = cardLast4Digits;
  }


  public AtmTransactionAllOfAttributes atmName(String atmName) {
    
    this.atmName = atmName;
    return this;
  }

   /**
   * Get atmName
   * @return atmName
  **/
  @javax.annotation.Nonnull
  public String getAtmName() {
    return atmName;
  }


  public void setAtmName(String atmName) {
    this.atmName = atmName;
  }


  public AtmTransactionAllOfAttributes atmLocation(String atmLocation) {
    
    this.atmLocation = atmLocation;
    return this;
  }

   /**
   * Get atmLocation
   * @return atmLocation
  **/
  @javax.annotation.Nullable
  public String getAtmLocation() {
    return atmLocation;
  }


  public void setAtmLocation(String atmLocation) {
    this.atmLocation = atmLocation;
  }


  public AtmTransactionAllOfAttributes surcharge(Integer surcharge) {
    
    this.surcharge = surcharge;
    return this;
  }

   /**
   * Get surcharge
   * @return surcharge
  **/
  @javax.annotation.Nonnull
  public Integer getSurcharge() {
    return surcharge;
  }


  public void setSurcharge(Integer surcharge) {
    this.surcharge = surcharge;
  }


  public AtmTransactionAllOfAttributes tags(Object tags) {
    
    this.tags = tags;
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  public Object getTags() {
    return tags;
  }


  public void setTags(Object tags) {
    this.tags = tags;
  }


  public AtmTransactionAllOfAttributes networkTransactionId(String networkTransactionId) {
    
    this.networkTransactionId = networkTransactionId;
    return this;
  }

   /**
   * Get networkTransactionId
   * @return networkTransactionId
  **/
  @javax.annotation.Nullable
  public String getNetworkTransactionId() {
    return networkTransactionId;
  }


  public void setNetworkTransactionId(String networkTransactionId) {
    this.networkTransactionId = networkTransactionId;
  }


  public AtmTransactionAllOfAttributes interchange(String interchange) {
    
    this.interchange = interchange;
    return this;
  }

   /**
   * Get interchange
   * @return interchange
  **/
  @javax.annotation.Nullable
  public String getInterchange() {
    return interchange;
  }


  public void setInterchange(String interchange) {
    this.interchange = interchange;
  }


  public AtmTransactionAllOfAttributes internationalServiceFee(Integer internationalServiceFee) {
    
    this.internationalServiceFee = internationalServiceFee;
    return this;
  }

   /**
   * Get internationalServiceFee
   * @return internationalServiceFee
  **/
  @javax.annotation.Nullable
  public Integer getInternationalServiceFee() {
    return internationalServiceFee;
  }


  public void setInternationalServiceFee(Integer internationalServiceFee) {
    this.internationalServiceFee = internationalServiceFee;
  }


  public AtmTransactionAllOfAttributes cardNetwork(String cardNetwork) {
    
    this.cardNetwork = cardNetwork;
    return this;
  }

   /**
   * Get cardNetwork
   * @return cardNetwork
  **/
  @javax.annotation.Nullable
  public String getCardNetwork() {
    return cardNetwork;
  }


  public void setCardNetwork(String cardNetwork) {
    this.cardNetwork = cardNetwork;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AtmTransactionAllOfAttributes atmTransactionAllOfAttributes = (AtmTransactionAllOfAttributes) o;
    return Objects.equals(this.createdAt, atmTransactionAllOfAttributes.createdAt) &&
        Objects.equals(this.direction, atmTransactionAllOfAttributes.direction) &&
        Objects.equals(this.amount, atmTransactionAllOfAttributes.amount) &&
        Objects.equals(this.balance, atmTransactionAllOfAttributes.balance) &&
        Objects.equals(this.summary, atmTransactionAllOfAttributes.summary) &&
        Objects.equals(this.cardLast4Digits, atmTransactionAllOfAttributes.cardLast4Digits) &&
        Objects.equals(this.atmName, atmTransactionAllOfAttributes.atmName) &&
        Objects.equals(this.atmLocation, atmTransactionAllOfAttributes.atmLocation) &&
        Objects.equals(this.surcharge, atmTransactionAllOfAttributes.surcharge) &&
        Objects.equals(this.tags, atmTransactionAllOfAttributes.tags) &&
        Objects.equals(this.networkTransactionId, atmTransactionAllOfAttributes.networkTransactionId) &&
        Objects.equals(this.interchange, atmTransactionAllOfAttributes.interchange) &&
        Objects.equals(this.internationalServiceFee, atmTransactionAllOfAttributes.internationalServiceFee) &&
        Objects.equals(this.cardNetwork, atmTransactionAllOfAttributes.cardNetwork);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, direction, amount, balance, summary, cardLast4Digits, atmName, atmLocation, surcharge, tags, networkTransactionId, interchange, internationalServiceFee, cardNetwork);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AtmTransactionAllOfAttributes {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    cardLast4Digits: ").append(toIndentedString(cardLast4Digits)).append("\n");
    sb.append("    atmName: ").append(toIndentedString(atmName)).append("\n");
    sb.append("    atmLocation: ").append(toIndentedString(atmLocation)).append("\n");
    sb.append("    surcharge: ").append(toIndentedString(surcharge)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    networkTransactionId: ").append(toIndentedString(networkTransactionId)).append("\n");
    sb.append("    interchange: ").append(toIndentedString(interchange)).append("\n");
    sb.append("    internationalServiceFee: ").append(toIndentedString(internationalServiceFee)).append("\n");
    sb.append("    cardNetwork: ").append(toIndentedString(cardNetwork)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdAt");
    openapiFields.add("direction");
    openapiFields.add("amount");
    openapiFields.add("balance");
    openapiFields.add("summary");
    openapiFields.add("cardLast4Digits");
    openapiFields.add("atmName");
    openapiFields.add("atmLocation");
    openapiFields.add("surcharge");
    openapiFields.add("tags");
    openapiFields.add("networkTransactionId");
    openapiFields.add("interchange");
    openapiFields.add("internationalServiceFee");
    openapiFields.add("cardNetwork");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("direction");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("balance");
    openapiRequiredFields.add("summary");
    openapiRequiredFields.add("cardLast4Digits");
    openapiRequiredFields.add("atmName");
    openapiRequiredFields.add("surcharge");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AtmTransactionAllOfAttributes
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AtmTransactionAllOfAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AtmTransactionAllOfAttributes is not found in the empty JSON string", AtmTransactionAllOfAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AtmTransactionAllOfAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AtmTransactionAllOfAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AtmTransactionAllOfAttributes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direction").toString()));
      }
      if (!jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
      if (!jsonObj.get("cardLast4Digits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardLast4Digits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardLast4Digits").toString()));
      }
      if (!jsonObj.get("atmName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `atmName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("atmName").toString()));
      }
      if ((jsonObj.get("atmLocation") != null && !jsonObj.get("atmLocation").isJsonNull()) && !jsonObj.get("atmLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `atmLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("atmLocation").toString()));
      }
      if ((jsonObj.get("networkTransactionId") != null && !jsonObj.get("networkTransactionId").isJsonNull()) && !jsonObj.get("networkTransactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkTransactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkTransactionId").toString()));
      }
      if ((jsonObj.get("interchange") != null && !jsonObj.get("interchange").isJsonNull()) && !jsonObj.get("interchange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interchange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interchange").toString()));
      }
      if ((jsonObj.get("cardNetwork") != null && !jsonObj.get("cardNetwork").isJsonNull()) && !jsonObj.get("cardNetwork").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardNetwork` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardNetwork").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AtmTransactionAllOfAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AtmTransactionAllOfAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AtmTransactionAllOfAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AtmTransactionAllOfAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<AtmTransactionAllOfAttributes>() {
           @Override
           public void write(JsonWriter out, AtmTransactionAllOfAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AtmTransactionAllOfAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AtmTransactionAllOfAttributes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AtmTransactionAllOfAttributes
  * @throws IOException if the JSON string is invalid with respect to AtmTransactionAllOfAttributes
  */
  public static AtmTransactionAllOfAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AtmTransactionAllOfAttributes.class);
  }

 /**
  * Convert an instance of AtmTransactionAllOfAttributes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

