/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.ApplicationStatus;
import org.openapitools.client.model.BeneficialOwner;
import org.openapitools.client.model.BusinessAnnualRevenue;
import org.openapitools.client.model.BusinessNumberOfEmployees;
import org.openapitools.client.model.BusinessVertical;
import org.openapitools.client.model.CashFlow;
import org.openapitools.client.model.Contact;
import org.openapitools.client.model.EntityType;
import org.openapitools.client.model.Industry;
import org.openapitools.client.model.Officer;
import org.openapitools.client.model.Phone;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BusinessApplicationAllOfAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BusinessApplicationAllOfAttributes {
  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ApplicationStatus status;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_EVALUATION_OUTCOME = "evaluationOutcome";
  @SerializedName(SERIALIZED_NAME_EVALUATION_OUTCOME)
  private String evaluationOutcome;

  public static final String SERIALIZED_NAME_EVALUATION_ID = "evaluationId";
  @SerializedName(SERIALIZED_NAME_EVALUATION_ID)
  private String evaluationId;

  public static final String SERIALIZED_NAME_EVALUATION_ENTITY_ID = "evaluationEntityId";
  @SerializedName(SERIALIZED_NAME_EVALUATION_ENTITY_ID)
  private String evaluationEntityId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DBA = "dba";
  @SerializedName(SERIALIZED_NAME_DBA)
  private String dba;

  public static final String SERIALIZED_NAME_EIN = "ein";
  @SerializedName(SERIALIZED_NAME_EIN)
  private String ein;

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private EntityType entityType;

  public static final String SERIALIZED_NAME_DATE_OF_INCORPORATION = "dateOfIncorporation";
  @SerializedName(SERIALIZED_NAME_DATE_OF_INCORPORATION)
  private LocalDate dateOfIncorporation;

  public static final String SERIALIZED_NAME_STATE_OF_INCORPORATION = "stateOfIncorporation";
  @SerializedName(SERIALIZED_NAME_STATE_OF_INCORPORATION)
  private String stateOfIncorporation;

  public static final String SERIALIZED_NAME_PURPOSE = "purpose";
  @SerializedName(SERIALIZED_NAME_PURPOSE)
  private String purpose;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private Phone phone;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_CONTACT = "contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private Contact contact;

  public static final String SERIALIZED_NAME_OFFICER = "officer";
  @SerializedName(SERIALIZED_NAME_OFFICER)
  private Officer officer;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public static final String SERIALIZED_NAME_BENEFICIAL_OWNERS = "beneficialOwners";
  @SerializedName(SERIALIZED_NAME_BENEFICIAL_OWNERS)
  private List<BeneficialOwner> beneficialOwners = new ArrayList<>();

  /**
   * Gets or Sets decisionMethod
   */
  @JsonAdapter(DecisionMethodEnum.Adapter.class)
  public enum DecisionMethodEnum {
    MANUALLY("Manually"),
    
    AUTOMATICALLY("Automatically");

    private String value;

    DecisionMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DecisionMethodEnum fromValue(String value) {
      for (DecisionMethodEnum b : DecisionMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DecisionMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DecisionMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DecisionMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DecisionMethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DECISION_METHOD = "decisionMethod";
  @SerializedName(SERIALIZED_NAME_DECISION_METHOD)
  private DecisionMethodEnum decisionMethod;

  public static final String SERIALIZED_NAME_DECISION_USER_ID = "decisionUserId";
  @SerializedName(SERIALIZED_NAME_DECISION_USER_ID)
  private String decisionUserId;

  public static final String SERIALIZED_NAME_DECISION_REASON = "decisionReason";
  @SerializedName(SERIALIZED_NAME_DECISION_REASON)
  private String decisionReason;

  public static final String SERIALIZED_NAME_DECISION_DATE_TIME = "decisionDateTime";
  @SerializedName(SERIALIZED_NAME_DECISION_DATE_TIME)
  private OffsetDateTime decisionDateTime;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Object tags;

  /**
   * Gets or Sets riskRate
   */
  @JsonAdapter(RiskRateEnum.Adapter.class)
  public enum RiskRateEnum {
    LOW("low"),
    
    MEDIUM("medium"),
    
    HIGH("high");

    private String value;

    RiskRateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RiskRateEnum fromValue(String value) {
      for (RiskRateEnum b : RiskRateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RiskRateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RiskRateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RiskRateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RiskRateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RISK_RATE = "riskRate";
  @SerializedName(SERIALIZED_NAME_RISK_RATE)
  private RiskRateEnum riskRate;

  public static final String SERIALIZED_NAME_EVALUATION_FLAGS = "evaluationFlags";
  @SerializedName(SERIALIZED_NAME_EVALUATION_FLAGS)
  private List<String> evaluationFlags;

  public static final String SERIALIZED_NAME_IP_LOCATION_DETAILS = "ipLocationDetails";
  @SerializedName(SERIALIZED_NAME_IP_LOCATION_DETAILS)
  private Object ipLocationDetails;

  public static final String SERIALIZED_NAME_PHONE_LOCATION_DETAILS = "phoneLocationDetails";
  @SerializedName(SERIALIZED_NAME_PHONE_LOCATION_DETAILS)
  private Object phoneLocationDetails;

  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived;

  public static final String SERIALIZED_NAME_INDUSTRY = "industry";
  @SerializedName(SERIALIZED_NAME_INDUSTRY)
  private Industry industry;

  public static final String SERIALIZED_NAME_ANNUAL_REVENUE = "annualRevenue";
  @SerializedName(SERIALIZED_NAME_ANNUAL_REVENUE)
  private BusinessAnnualRevenue annualRevenue;

  public static final String SERIALIZED_NAME_NUMBER_OF_EMPLOYEES = "numberOfEmployees";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_EMPLOYEES)
  private BusinessNumberOfEmployees numberOfEmployees;

  public static final String SERIALIZED_NAME_CASH_FLOW = "cashFlow";
  @SerializedName(SERIALIZED_NAME_CASH_FLOW)
  private CashFlow cashFlow;

  public static final String SERIALIZED_NAME_YEAR_OF_INCORPORATION = "yearOfIncorporation";
  @SerializedName(SERIALIZED_NAME_YEAR_OF_INCORPORATION)
  private String yearOfIncorporation;

  public static final String SERIALIZED_NAME_COUNTRIES_OF_OPERATION = "countriesOfOperation";
  @SerializedName(SERIALIZED_NAME_COUNTRIES_OF_OPERATION)
  private List<String> countriesOfOperation;

  public static final String SERIALIZED_NAME_STOCK_SYMBOL = "stockSymbol";
  @SerializedName(SERIALIZED_NAME_STOCK_SYMBOL)
  private String stockSymbol;

  public static final String SERIALIZED_NAME_BUSINESS_VERTICAL = "businessVertical";
  @SerializedName(SERIALIZED_NAME_BUSINESS_VERTICAL)
  private BusinessVertical businessVertical;

  public BusinessApplicationAllOfAttributes() {
  }

  public BusinessApplicationAllOfAttributes createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public BusinessApplicationAllOfAttributes updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public BusinessApplicationAllOfAttributes status(ApplicationStatus status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  public ApplicationStatus getStatus() {
    return status;
  }


  public void setStatus(ApplicationStatus status) {
    this.status = status;
  }


  public BusinessApplicationAllOfAttributes message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }


  public BusinessApplicationAllOfAttributes evaluationOutcome(String evaluationOutcome) {
    
    this.evaluationOutcome = evaluationOutcome;
    return this;
  }

   /**
   * Get evaluationOutcome
   * @return evaluationOutcome
  **/
  @javax.annotation.Nullable
  public String getEvaluationOutcome() {
    return evaluationOutcome;
  }


  public void setEvaluationOutcome(String evaluationOutcome) {
    this.evaluationOutcome = evaluationOutcome;
  }


  public BusinessApplicationAllOfAttributes evaluationId(String evaluationId) {
    
    this.evaluationId = evaluationId;
    return this;
  }

   /**
   * Get evaluationId
   * @return evaluationId
  **/
  @javax.annotation.Nullable
  public String getEvaluationId() {
    return evaluationId;
  }


  public void setEvaluationId(String evaluationId) {
    this.evaluationId = evaluationId;
  }


  public BusinessApplicationAllOfAttributes evaluationEntityId(String evaluationEntityId) {
    
    this.evaluationEntityId = evaluationEntityId;
    return this;
  }

   /**
   * Get evaluationEntityId
   * @return evaluationEntityId
  **/
  @javax.annotation.Nullable
  public String getEvaluationEntityId() {
    return evaluationEntityId;
  }


  public void setEvaluationEntityId(String evaluationEntityId) {
    this.evaluationEntityId = evaluationEntityId;
  }


  public BusinessApplicationAllOfAttributes name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public BusinessApplicationAllOfAttributes dba(String dba) {
    
    this.dba = dba;
    return this;
  }

   /**
   * Get dba
   * @return dba
  **/
  @javax.annotation.Nullable
  public String getDba() {
    return dba;
  }


  public void setDba(String dba) {
    this.dba = dba;
  }


  public BusinessApplicationAllOfAttributes ein(String ein) {
    
    this.ein = ein;
    return this;
  }

   /**
   * Get ein
   * @return ein
  **/
  @javax.annotation.Nullable
  public String getEin() {
    return ein;
  }


  public void setEin(String ein) {
    this.ein = ein;
  }


  public BusinessApplicationAllOfAttributes entityType(EntityType entityType) {
    
    this.entityType = entityType;
    return this;
  }

   /**
   * Get entityType
   * @return entityType
  **/
  @javax.annotation.Nonnull
  public EntityType getEntityType() {
    return entityType;
  }


  public void setEntityType(EntityType entityType) {
    this.entityType = entityType;
  }


  public BusinessApplicationAllOfAttributes dateOfIncorporation(LocalDate dateOfIncorporation) {
    
    this.dateOfIncorporation = dateOfIncorporation;
    return this;
  }

   /**
   * Get dateOfIncorporation
   * @return dateOfIncorporation
  **/
  @javax.annotation.Nullable
  public LocalDate getDateOfIncorporation() {
    return dateOfIncorporation;
  }


  public void setDateOfIncorporation(LocalDate dateOfIncorporation) {
    this.dateOfIncorporation = dateOfIncorporation;
  }


  public BusinessApplicationAllOfAttributes stateOfIncorporation(String stateOfIncorporation) {
    
    this.stateOfIncorporation = stateOfIncorporation;
    return this;
  }

   /**
   * Get stateOfIncorporation
   * @return stateOfIncorporation
  **/
  @javax.annotation.Nonnull
  public String getStateOfIncorporation() {
    return stateOfIncorporation;
  }


  public void setStateOfIncorporation(String stateOfIncorporation) {
    this.stateOfIncorporation = stateOfIncorporation;
  }


  public BusinessApplicationAllOfAttributes purpose(String purpose) {
    
    this.purpose = purpose;
    return this;
  }

   /**
   * Get purpose
   * @return purpose
  **/
  @javax.annotation.Nullable
  public String getPurpose() {
    return purpose;
  }


  public void setPurpose(String purpose) {
    this.purpose = purpose;
  }


  public BusinessApplicationAllOfAttributes phone(Phone phone) {
    
    this.phone = phone;
    return this;
  }

   /**
   * Get phone
   * @return phone
  **/
  @javax.annotation.Nullable
  public Phone getPhone() {
    return phone;
  }


  public void setPhone(Phone phone) {
    this.phone = phone;
  }


  public BusinessApplicationAllOfAttributes address(Address address) {
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  public Address getAddress() {
    return address;
  }


  public void setAddress(Address address) {
    this.address = address;
  }


  public BusinessApplicationAllOfAttributes contact(Contact contact) {
    
    this.contact = contact;
    return this;
  }

   /**
   * Get contact
   * @return contact
  **/
  @javax.annotation.Nonnull
  public Contact getContact() {
    return contact;
  }


  public void setContact(Contact contact) {
    this.contact = contact;
  }


  public BusinessApplicationAllOfAttributes officer(Officer officer) {
    
    this.officer = officer;
    return this;
  }

   /**
   * Get officer
   * @return officer
  **/
  @javax.annotation.Nonnull
  public Officer getOfficer() {
    return officer;
  }


  public void setOfficer(Officer officer) {
    this.officer = officer;
  }


  public BusinessApplicationAllOfAttributes ip(String ip) {
    
    this.ip = ip;
    return this;
  }

   /**
   * Get ip
   * @return ip
  **/
  @javax.annotation.Nullable
  public String getIp() {
    return ip;
  }


  public void setIp(String ip) {
    this.ip = ip;
  }


  public BusinessApplicationAllOfAttributes website(String website) {
    
    this.website = website;
    return this;
  }

   /**
   * Get website
   * @return website
  **/
  @javax.annotation.Nullable
  public String getWebsite() {
    return website;
  }


  public void setWebsite(String website) {
    this.website = website;
  }


  public BusinessApplicationAllOfAttributes beneficialOwners(List<BeneficialOwner> beneficialOwners) {
    
    this.beneficialOwners = beneficialOwners;
    return this;
  }

  public BusinessApplicationAllOfAttributes addBeneficialOwnersItem(BeneficialOwner beneficialOwnersItem) {
    if (this.beneficialOwners == null) {
      this.beneficialOwners = new ArrayList<>();
    }
    this.beneficialOwners.add(beneficialOwnersItem);
    return this;
  }

   /**
   * Get beneficialOwners
   * @return beneficialOwners
  **/
  @javax.annotation.Nonnull
  public List<BeneficialOwner> getBeneficialOwners() {
    return beneficialOwners;
  }


  public void setBeneficialOwners(List<BeneficialOwner> beneficialOwners) {
    this.beneficialOwners = beneficialOwners;
  }


  public BusinessApplicationAllOfAttributes decisionMethod(DecisionMethodEnum decisionMethod) {
    
    this.decisionMethod = decisionMethod;
    return this;
  }

   /**
   * Get decisionMethod
   * @return decisionMethod
  **/
  @javax.annotation.Nullable
  public DecisionMethodEnum getDecisionMethod() {
    return decisionMethod;
  }


  public void setDecisionMethod(DecisionMethodEnum decisionMethod) {
    this.decisionMethod = decisionMethod;
  }


  public BusinessApplicationAllOfAttributes decisionUserId(String decisionUserId) {
    
    this.decisionUserId = decisionUserId;
    return this;
  }

   /**
   * Get decisionUserId
   * @return decisionUserId
  **/
  @javax.annotation.Nullable
  public String getDecisionUserId() {
    return decisionUserId;
  }


  public void setDecisionUserId(String decisionUserId) {
    this.decisionUserId = decisionUserId;
  }


  public BusinessApplicationAllOfAttributes decisionReason(String decisionReason) {
    
    this.decisionReason = decisionReason;
    return this;
  }

   /**
   * Get decisionReason
   * @return decisionReason
  **/
  @javax.annotation.Nullable
  public String getDecisionReason() {
    return decisionReason;
  }


  public void setDecisionReason(String decisionReason) {
    this.decisionReason = decisionReason;
  }


  public BusinessApplicationAllOfAttributes decisionDateTime(OffsetDateTime decisionDateTime) {
    
    this.decisionDateTime = decisionDateTime;
    return this;
  }

   /**
   * Get decisionDateTime
   * @return decisionDateTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDecisionDateTime() {
    return decisionDateTime;
  }


  public void setDecisionDateTime(OffsetDateTime decisionDateTime) {
    this.decisionDateTime = decisionDateTime;
  }


  public BusinessApplicationAllOfAttributes tags(Object tags) {
    
    this.tags = tags;
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  public Object getTags() {
    return tags;
  }


  public void setTags(Object tags) {
    this.tags = tags;
  }


  public BusinessApplicationAllOfAttributes riskRate(RiskRateEnum riskRate) {
    
    this.riskRate = riskRate;
    return this;
  }

   /**
   * Get riskRate
   * @return riskRate
  **/
  @javax.annotation.Nullable
  public RiskRateEnum getRiskRate() {
    return riskRate;
  }


  public void setRiskRate(RiskRateEnum riskRate) {
    this.riskRate = riskRate;
  }


  public BusinessApplicationAllOfAttributes evaluationFlags(List<String> evaluationFlags) {
    
    this.evaluationFlags = evaluationFlags;
    return this;
  }

  public BusinessApplicationAllOfAttributes addEvaluationFlagsItem(String evaluationFlagsItem) {
    if (this.evaluationFlags == null) {
      this.evaluationFlags = new ArrayList<>();
    }
    this.evaluationFlags.add(evaluationFlagsItem);
    return this;
  }

   /**
   * Get evaluationFlags
   * @return evaluationFlags
  **/
  @javax.annotation.Nullable
  public List<String> getEvaluationFlags() {
    return evaluationFlags;
  }


  public void setEvaluationFlags(List<String> evaluationFlags) {
    this.evaluationFlags = evaluationFlags;
  }


  public BusinessApplicationAllOfAttributes ipLocationDetails(Object ipLocationDetails) {
    
    this.ipLocationDetails = ipLocationDetails;
    return this;
  }

   /**
   * Get ipLocationDetails
   * @return ipLocationDetails
  **/
  @javax.annotation.Nullable
  public Object getIpLocationDetails() {
    return ipLocationDetails;
  }


  public void setIpLocationDetails(Object ipLocationDetails) {
    this.ipLocationDetails = ipLocationDetails;
  }


  public BusinessApplicationAllOfAttributes phoneLocationDetails(Object phoneLocationDetails) {
    
    this.phoneLocationDetails = phoneLocationDetails;
    return this;
  }

   /**
   * Get phoneLocationDetails
   * @return phoneLocationDetails
  **/
  @javax.annotation.Nullable
  public Object getPhoneLocationDetails() {
    return phoneLocationDetails;
  }


  public void setPhoneLocationDetails(Object phoneLocationDetails) {
    this.phoneLocationDetails = phoneLocationDetails;
  }


  public BusinessApplicationAllOfAttributes archived(Boolean archived) {
    
    this.archived = archived;
    return this;
  }

   /**
   * Get archived
   * @return archived
  **/
  @javax.annotation.Nullable
  public Boolean getArchived() {
    return archived;
  }


  public void setArchived(Boolean archived) {
    this.archived = archived;
  }


  public BusinessApplicationAllOfAttributes industry(Industry industry) {
    
    this.industry = industry;
    return this;
  }

   /**
   * Get industry
   * @return industry
  **/
  @javax.annotation.Nullable
  public Industry getIndustry() {
    return industry;
  }


  public void setIndustry(Industry industry) {
    this.industry = industry;
  }


  public BusinessApplicationAllOfAttributes annualRevenue(BusinessAnnualRevenue annualRevenue) {
    
    this.annualRevenue = annualRevenue;
    return this;
  }

   /**
   * Get annualRevenue
   * @return annualRevenue
  **/
  @javax.annotation.Nullable
  public BusinessAnnualRevenue getAnnualRevenue() {
    return annualRevenue;
  }


  public void setAnnualRevenue(BusinessAnnualRevenue annualRevenue) {
    this.annualRevenue = annualRevenue;
  }


  public BusinessApplicationAllOfAttributes numberOfEmployees(BusinessNumberOfEmployees numberOfEmployees) {
    
    this.numberOfEmployees = numberOfEmployees;
    return this;
  }

   /**
   * Get numberOfEmployees
   * @return numberOfEmployees
  **/
  @javax.annotation.Nullable
  public BusinessNumberOfEmployees getNumberOfEmployees() {
    return numberOfEmployees;
  }


  public void setNumberOfEmployees(BusinessNumberOfEmployees numberOfEmployees) {
    this.numberOfEmployees = numberOfEmployees;
  }


  public BusinessApplicationAllOfAttributes cashFlow(CashFlow cashFlow) {
    
    this.cashFlow = cashFlow;
    return this;
  }

   /**
   * Get cashFlow
   * @return cashFlow
  **/
  @javax.annotation.Nullable
  public CashFlow getCashFlow() {
    return cashFlow;
  }


  public void setCashFlow(CashFlow cashFlow) {
    this.cashFlow = cashFlow;
  }


  public BusinessApplicationAllOfAttributes yearOfIncorporation(String yearOfIncorporation) {
    
    this.yearOfIncorporation = yearOfIncorporation;
    return this;
  }

   /**
   * Get yearOfIncorporation
   * @return yearOfIncorporation
  **/
  @javax.annotation.Nullable
  public String getYearOfIncorporation() {
    return yearOfIncorporation;
  }


  public void setYearOfIncorporation(String yearOfIncorporation) {
    this.yearOfIncorporation = yearOfIncorporation;
  }


  public BusinessApplicationAllOfAttributes countriesOfOperation(List<String> countriesOfOperation) {
    
    this.countriesOfOperation = countriesOfOperation;
    return this;
  }

  public BusinessApplicationAllOfAttributes addCountriesOfOperationItem(String countriesOfOperationItem) {
    if (this.countriesOfOperation == null) {
      this.countriesOfOperation = new ArrayList<>();
    }
    this.countriesOfOperation.add(countriesOfOperationItem);
    return this;
  }

   /**
   * Get countriesOfOperation
   * @return countriesOfOperation
  **/
  @javax.annotation.Nullable
  public List<String> getCountriesOfOperation() {
    return countriesOfOperation;
  }


  public void setCountriesOfOperation(List<String> countriesOfOperation) {
    this.countriesOfOperation = countriesOfOperation;
  }


  public BusinessApplicationAllOfAttributes stockSymbol(String stockSymbol) {
    
    this.stockSymbol = stockSymbol;
    return this;
  }

   /**
   * Get stockSymbol
   * @return stockSymbol
  **/
  @javax.annotation.Nullable
  public String getStockSymbol() {
    return stockSymbol;
  }


  public void setStockSymbol(String stockSymbol) {
    this.stockSymbol = stockSymbol;
  }


  public BusinessApplicationAllOfAttributes businessVertical(BusinessVertical businessVertical) {
    
    this.businessVertical = businessVertical;
    return this;
  }

   /**
   * Get businessVertical
   * @return businessVertical
  **/
  @javax.annotation.Nullable
  public BusinessVertical getBusinessVertical() {
    return businessVertical;
  }


  public void setBusinessVertical(BusinessVertical businessVertical) {
    this.businessVertical = businessVertical;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BusinessApplicationAllOfAttributes businessApplicationAllOfAttributes = (BusinessApplicationAllOfAttributes) o;
    return Objects.equals(this.createdAt, businessApplicationAllOfAttributes.createdAt) &&
        Objects.equals(this.updatedAt, businessApplicationAllOfAttributes.updatedAt) &&
        Objects.equals(this.status, businessApplicationAllOfAttributes.status) &&
        Objects.equals(this.message, businessApplicationAllOfAttributes.message) &&
        Objects.equals(this.evaluationOutcome, businessApplicationAllOfAttributes.evaluationOutcome) &&
        Objects.equals(this.evaluationId, businessApplicationAllOfAttributes.evaluationId) &&
        Objects.equals(this.evaluationEntityId, businessApplicationAllOfAttributes.evaluationEntityId) &&
        Objects.equals(this.name, businessApplicationAllOfAttributes.name) &&
        Objects.equals(this.dba, businessApplicationAllOfAttributes.dba) &&
        Objects.equals(this.ein, businessApplicationAllOfAttributes.ein) &&
        Objects.equals(this.entityType, businessApplicationAllOfAttributes.entityType) &&
        Objects.equals(this.dateOfIncorporation, businessApplicationAllOfAttributes.dateOfIncorporation) &&
        Objects.equals(this.stateOfIncorporation, businessApplicationAllOfAttributes.stateOfIncorporation) &&
        Objects.equals(this.purpose, businessApplicationAllOfAttributes.purpose) &&
        Objects.equals(this.phone, businessApplicationAllOfAttributes.phone) &&
        Objects.equals(this.address, businessApplicationAllOfAttributes.address) &&
        Objects.equals(this.contact, businessApplicationAllOfAttributes.contact) &&
        Objects.equals(this.officer, businessApplicationAllOfAttributes.officer) &&
        Objects.equals(this.ip, businessApplicationAllOfAttributes.ip) &&
        Objects.equals(this.website, businessApplicationAllOfAttributes.website) &&
        Objects.equals(this.beneficialOwners, businessApplicationAllOfAttributes.beneficialOwners) &&
        Objects.equals(this.decisionMethod, businessApplicationAllOfAttributes.decisionMethod) &&
        Objects.equals(this.decisionUserId, businessApplicationAllOfAttributes.decisionUserId) &&
        Objects.equals(this.decisionReason, businessApplicationAllOfAttributes.decisionReason) &&
        Objects.equals(this.decisionDateTime, businessApplicationAllOfAttributes.decisionDateTime) &&
        Objects.equals(this.tags, businessApplicationAllOfAttributes.tags) &&
        Objects.equals(this.riskRate, businessApplicationAllOfAttributes.riskRate) &&
        Objects.equals(this.evaluationFlags, businessApplicationAllOfAttributes.evaluationFlags) &&
        Objects.equals(this.ipLocationDetails, businessApplicationAllOfAttributes.ipLocationDetails) &&
        Objects.equals(this.phoneLocationDetails, businessApplicationAllOfAttributes.phoneLocationDetails) &&
        Objects.equals(this.archived, businessApplicationAllOfAttributes.archived) &&
        Objects.equals(this.industry, businessApplicationAllOfAttributes.industry) &&
        Objects.equals(this.annualRevenue, businessApplicationAllOfAttributes.annualRevenue) &&
        Objects.equals(this.numberOfEmployees, businessApplicationAllOfAttributes.numberOfEmployees) &&
        Objects.equals(this.cashFlow, businessApplicationAllOfAttributes.cashFlow) &&
        Objects.equals(this.yearOfIncorporation, businessApplicationAllOfAttributes.yearOfIncorporation) &&
        Objects.equals(this.countriesOfOperation, businessApplicationAllOfAttributes.countriesOfOperation) &&
        Objects.equals(this.stockSymbol, businessApplicationAllOfAttributes.stockSymbol) &&
        Objects.equals(this.businessVertical, businessApplicationAllOfAttributes.businessVertical);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, updatedAt, status, message, evaluationOutcome, evaluationId, evaluationEntityId, name, dba, ein, entityType, dateOfIncorporation, stateOfIncorporation, purpose, phone, address, contact, officer, ip, website, beneficialOwners, decisionMethod, decisionUserId, decisionReason, decisionDateTime, tags, riskRate, evaluationFlags, ipLocationDetails, phoneLocationDetails, archived, industry, annualRevenue, numberOfEmployees, cashFlow, yearOfIncorporation, countriesOfOperation, stockSymbol, businessVertical);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BusinessApplicationAllOfAttributes {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    evaluationOutcome: ").append(toIndentedString(evaluationOutcome)).append("\n");
    sb.append("    evaluationId: ").append(toIndentedString(evaluationId)).append("\n");
    sb.append("    evaluationEntityId: ").append(toIndentedString(evaluationEntityId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    dba: ").append(toIndentedString(dba)).append("\n");
    sb.append("    ein: ").append(toIndentedString(ein)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    dateOfIncorporation: ").append(toIndentedString(dateOfIncorporation)).append("\n");
    sb.append("    stateOfIncorporation: ").append(toIndentedString(stateOfIncorporation)).append("\n");
    sb.append("    purpose: ").append(toIndentedString(purpose)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    officer: ").append(toIndentedString(officer)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("    beneficialOwners: ").append(toIndentedString(beneficialOwners)).append("\n");
    sb.append("    decisionMethod: ").append(toIndentedString(decisionMethod)).append("\n");
    sb.append("    decisionUserId: ").append(toIndentedString(decisionUserId)).append("\n");
    sb.append("    decisionReason: ").append(toIndentedString(decisionReason)).append("\n");
    sb.append("    decisionDateTime: ").append(toIndentedString(decisionDateTime)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    riskRate: ").append(toIndentedString(riskRate)).append("\n");
    sb.append("    evaluationFlags: ").append(toIndentedString(evaluationFlags)).append("\n");
    sb.append("    ipLocationDetails: ").append(toIndentedString(ipLocationDetails)).append("\n");
    sb.append("    phoneLocationDetails: ").append(toIndentedString(phoneLocationDetails)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    industry: ").append(toIndentedString(industry)).append("\n");
    sb.append("    annualRevenue: ").append(toIndentedString(annualRevenue)).append("\n");
    sb.append("    numberOfEmployees: ").append(toIndentedString(numberOfEmployees)).append("\n");
    sb.append("    cashFlow: ").append(toIndentedString(cashFlow)).append("\n");
    sb.append("    yearOfIncorporation: ").append(toIndentedString(yearOfIncorporation)).append("\n");
    sb.append("    countriesOfOperation: ").append(toIndentedString(countriesOfOperation)).append("\n");
    sb.append("    stockSymbol: ").append(toIndentedString(stockSymbol)).append("\n");
    sb.append("    businessVertical: ").append(toIndentedString(businessVertical)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");
    openapiFields.add("status");
    openapiFields.add("message");
    openapiFields.add("evaluationOutcome");
    openapiFields.add("evaluationId");
    openapiFields.add("evaluationEntityId");
    openapiFields.add("name");
    openapiFields.add("dba");
    openapiFields.add("ein");
    openapiFields.add("entityType");
    openapiFields.add("dateOfIncorporation");
    openapiFields.add("stateOfIncorporation");
    openapiFields.add("purpose");
    openapiFields.add("phone");
    openapiFields.add("address");
    openapiFields.add("contact");
    openapiFields.add("officer");
    openapiFields.add("ip");
    openapiFields.add("website");
    openapiFields.add("beneficialOwners");
    openapiFields.add("decisionMethod");
    openapiFields.add("decisionUserId");
    openapiFields.add("decisionReason");
    openapiFields.add("decisionDateTime");
    openapiFields.add("tags");
    openapiFields.add("riskRate");
    openapiFields.add("evaluationFlags");
    openapiFields.add("ipLocationDetails");
    openapiFields.add("phoneLocationDetails");
    openapiFields.add("archived");
    openapiFields.add("industry");
    openapiFields.add("annualRevenue");
    openapiFields.add("numberOfEmployees");
    openapiFields.add("cashFlow");
    openapiFields.add("yearOfIncorporation");
    openapiFields.add("countriesOfOperation");
    openapiFields.add("stockSymbol");
    openapiFields.add("businessVertical");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("entityType");
    openapiRequiredFields.add("stateOfIncorporation");
    openapiRequiredFields.add("contact");
    openapiRequiredFields.add("officer");
    openapiRequiredFields.add("beneficialOwners");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BusinessApplicationAllOfAttributes
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BusinessApplicationAllOfAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BusinessApplicationAllOfAttributes is not found in the empty JSON string", BusinessApplicationAllOfAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BusinessApplicationAllOfAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BusinessApplicationAllOfAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BusinessApplicationAllOfAttributes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("evaluationOutcome") != null && !jsonObj.get("evaluationOutcome").isJsonNull()) && !jsonObj.get("evaluationOutcome").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationOutcome` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluationOutcome").toString()));
      }
      if ((jsonObj.get("evaluationId") != null && !jsonObj.get("evaluationId").isJsonNull()) && !jsonObj.get("evaluationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluationId").toString()));
      }
      if ((jsonObj.get("evaluationEntityId") != null && !jsonObj.get("evaluationEntityId").isJsonNull()) && !jsonObj.get("evaluationEntityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationEntityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluationEntityId").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("dba") != null && !jsonObj.get("dba").isJsonNull()) && !jsonObj.get("dba").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dba` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dba").toString()));
      }
      if ((jsonObj.get("ein") != null && !jsonObj.get("ein").isJsonNull()) && !jsonObj.get("ein").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ein` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ein").toString()));
      }
      if (!jsonObj.get("stateOfIncorporation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateOfIncorporation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateOfIncorporation").toString()));
      }
      if ((jsonObj.get("purpose") != null && !jsonObj.get("purpose").isJsonNull()) && !jsonObj.get("purpose").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purpose` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purpose").toString()));
      }
      // validate the optional field `phone`
      if (jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) {
        Phone.validateJsonElement(jsonObj.get("phone"));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("address"));
      }
      // validate the required field `contact`
      Contact.validateJsonElement(jsonObj.get("contact"));
      // validate the required field `officer`
      Officer.validateJsonElement(jsonObj.get("officer"));
      if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("beneficialOwners").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `beneficialOwners` to be an array in the JSON string but got `%s`", jsonObj.get("beneficialOwners").toString()));
      }

      JsonArray jsonArraybeneficialOwners = jsonObj.getAsJsonArray("beneficialOwners");
      // validate the required field `beneficialOwners` (array)
      for (int i = 0; i < jsonArraybeneficialOwners.size(); i++) {
        BeneficialOwner.validateJsonElement(jsonArraybeneficialOwners.get(i));
      };
      if ((jsonObj.get("decisionMethod") != null && !jsonObj.get("decisionMethod").isJsonNull()) && !jsonObj.get("decisionMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `decisionMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("decisionMethod").toString()));
      }
      if ((jsonObj.get("decisionUserId") != null && !jsonObj.get("decisionUserId").isJsonNull()) && !jsonObj.get("decisionUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `decisionUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("decisionUserId").toString()));
      }
      if ((jsonObj.get("decisionReason") != null && !jsonObj.get("decisionReason").isJsonNull()) && !jsonObj.get("decisionReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `decisionReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("decisionReason").toString()));
      }
      if ((jsonObj.get("riskRate") != null && !jsonObj.get("riskRate").isJsonNull()) && !jsonObj.get("riskRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `riskRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("riskRate").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("evaluationFlags") != null && !jsonObj.get("evaluationFlags").isJsonNull() && !jsonObj.get("evaluationFlags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationFlags` to be an array in the JSON string but got `%s`", jsonObj.get("evaluationFlags").toString()));
      }
      if ((jsonObj.get("yearOfIncorporation") != null && !jsonObj.get("yearOfIncorporation").isJsonNull()) && !jsonObj.get("yearOfIncorporation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `yearOfIncorporation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("yearOfIncorporation").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("countriesOfOperation") != null && !jsonObj.get("countriesOfOperation").isJsonNull() && !jsonObj.get("countriesOfOperation").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `countriesOfOperation` to be an array in the JSON string but got `%s`", jsonObj.get("countriesOfOperation").toString()));
      }
      if ((jsonObj.get("stockSymbol") != null && !jsonObj.get("stockSymbol").isJsonNull()) && !jsonObj.get("stockSymbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stockSymbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stockSymbol").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BusinessApplicationAllOfAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BusinessApplicationAllOfAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BusinessApplicationAllOfAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BusinessApplicationAllOfAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<BusinessApplicationAllOfAttributes>() {
           @Override
           public void write(JsonWriter out, BusinessApplicationAllOfAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BusinessApplicationAllOfAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BusinessApplicationAllOfAttributes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BusinessApplicationAllOfAttributes
  * @throws IOException if the JSON string is invalid with respect to BusinessApplicationAllOfAttributes
  */
  public static BusinessApplicationAllOfAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BusinessApplicationAllOfAttributes.class);
  }

 /**
  * Convert an instance of BusinessApplicationAllOfAttributes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

