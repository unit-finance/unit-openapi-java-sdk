/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CardVerificationData;
import org.openapitools.client.model.Merchant;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CardTransactionAllOfAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CardTransactionAllOfAttributes {
  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  /**
   * Gets or Sets direction
   */
  @JsonAdapter(DirectionEnum.Adapter.class)
  public enum DirectionEnum {
    CREDIT("Credit"),
    
    DEBIT("Debit");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DirectionEnum fromValue(String value) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DirectionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private DirectionEnum direction;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private Integer balance;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public static final String SERIALIZED_NAME_CARD_LAST4_DIGITS = "cardLast4Digits";
  @SerializedName(SERIALIZED_NAME_CARD_LAST4_DIGITS)
  private String cardLast4Digits;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Object tags;

  public static final String SERIALIZED_NAME_NETWORK_TRANSACTION_ID = "networkTransactionId";
  @SerializedName(SERIALIZED_NAME_NETWORK_TRANSACTION_ID)
  private String networkTransactionId;

  public static final String SERIALIZED_NAME_INTERCHANGE = "interchange";
  @SerializedName(SERIALIZED_NAME_INTERCHANGE)
  private String interchange;

  public static final String SERIALIZED_NAME_INTERNATIONAL_SERVICE_FEE = "internationalServiceFee";
  @SerializedName(SERIALIZED_NAME_INTERNATIONAL_SERVICE_FEE)
  private Integer internationalServiceFee;

  public static final String SERIALIZED_NAME_MERCHANT = "merchant";
  @SerializedName(SERIALIZED_NAME_MERCHANT)
  private Merchant merchant;

  public static final String SERIALIZED_NAME_RECURRING = "recurring";
  @SerializedName(SERIALIZED_NAME_RECURRING)
  private Boolean recurring;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "paymentMethod";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private String paymentMethod;

  public static final String SERIALIZED_NAME_DIGITAL_WALLET = "digitalWallet";
  @SerializedName(SERIALIZED_NAME_DIGITAL_WALLET)
  private String digitalWallet;

  public static final String SERIALIZED_NAME_CARD_VERIFICATION_DATA = "cardVerificationData";
  @SerializedName(SERIALIZED_NAME_CARD_VERIFICATION_DATA)
  private CardVerificationData cardVerificationData;

  public static final String SERIALIZED_NAME_CARD_NETWORK = "cardNetwork";
  @SerializedName(SERIALIZED_NAME_CARD_NETWORK)
  private String cardNetwork;

  public CardTransactionAllOfAttributes() {
  }

  public CardTransactionAllOfAttributes createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public CardTransactionAllOfAttributes direction(DirectionEnum direction) {
    
    this.direction = direction;
    return this;
  }

   /**
   * Get direction
   * @return direction
  **/
  @javax.annotation.Nonnull
  public DirectionEnum getDirection() {
    return direction;
  }


  public void setDirection(DirectionEnum direction) {
    this.direction = direction;
  }


  public CardTransactionAllOfAttributes amount(Integer amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nonnull
  public Integer getAmount() {
    return amount;
  }


  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public CardTransactionAllOfAttributes balance(Integer balance) {
    
    this.balance = balance;
    return this;
  }

   /**
   * Get balance
   * @return balance
  **/
  @javax.annotation.Nonnull
  public Integer getBalance() {
    return balance;
  }


  public void setBalance(Integer balance) {
    this.balance = balance;
  }


  public CardTransactionAllOfAttributes summary(String summary) {
    
    this.summary = summary;
    return this;
  }

   /**
   * Get summary
   * @return summary
  **/
  @javax.annotation.Nonnull
  public String getSummary() {
    return summary;
  }


  public void setSummary(String summary) {
    this.summary = summary;
  }


  public CardTransactionAllOfAttributes cardLast4Digits(String cardLast4Digits) {
    
    this.cardLast4Digits = cardLast4Digits;
    return this;
  }

   /**
   * Get cardLast4Digits
   * @return cardLast4Digits
  **/
  @javax.annotation.Nonnull
  public String getCardLast4Digits() {
    return cardLast4Digits;
  }


  public void setCardLast4Digits(String cardLast4Digits) {
    this.cardLast4Digits = cardLast4Digits;
  }


  public CardTransactionAllOfAttributes tags(Object tags) {
    
    this.tags = tags;
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  public Object getTags() {
    return tags;
  }


  public void setTags(Object tags) {
    this.tags = tags;
  }


  public CardTransactionAllOfAttributes networkTransactionId(String networkTransactionId) {
    
    this.networkTransactionId = networkTransactionId;
    return this;
  }

   /**
   * Get networkTransactionId
   * @return networkTransactionId
  **/
  @javax.annotation.Nullable
  public String getNetworkTransactionId() {
    return networkTransactionId;
  }


  public void setNetworkTransactionId(String networkTransactionId) {
    this.networkTransactionId = networkTransactionId;
  }


  public CardTransactionAllOfAttributes interchange(String interchange) {
    
    this.interchange = interchange;
    return this;
  }

   /**
   * Get interchange
   * @return interchange
  **/
  @javax.annotation.Nullable
  public String getInterchange() {
    return interchange;
  }


  public void setInterchange(String interchange) {
    this.interchange = interchange;
  }


  public CardTransactionAllOfAttributes internationalServiceFee(Integer internationalServiceFee) {
    
    this.internationalServiceFee = internationalServiceFee;
    return this;
  }

   /**
   * Get internationalServiceFee
   * @return internationalServiceFee
  **/
  @javax.annotation.Nullable
  public Integer getInternationalServiceFee() {
    return internationalServiceFee;
  }


  public void setInternationalServiceFee(Integer internationalServiceFee) {
    this.internationalServiceFee = internationalServiceFee;
  }


  public CardTransactionAllOfAttributes merchant(Merchant merchant) {
    
    this.merchant = merchant;
    return this;
  }

   /**
   * Get merchant
   * @return merchant
  **/
  @javax.annotation.Nonnull
  public Merchant getMerchant() {
    return merchant;
  }


  public void setMerchant(Merchant merchant) {
    this.merchant = merchant;
  }


  public CardTransactionAllOfAttributes recurring(Boolean recurring) {
    
    this.recurring = recurring;
    return this;
  }

   /**
   * Get recurring
   * @return recurring
  **/
  @javax.annotation.Nonnull
  public Boolean getRecurring() {
    return recurring;
  }


  public void setRecurring(Boolean recurring) {
    this.recurring = recurring;
  }


  public CardTransactionAllOfAttributes paymentMethod(String paymentMethod) {
    
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * Get paymentMethod
   * @return paymentMethod
  **/
  @javax.annotation.Nullable
  public String getPaymentMethod() {
    return paymentMethod;
  }


  public void setPaymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
  }


  public CardTransactionAllOfAttributes digitalWallet(String digitalWallet) {
    
    this.digitalWallet = digitalWallet;
    return this;
  }

   /**
   * Get digitalWallet
   * @return digitalWallet
  **/
  @javax.annotation.Nullable
  public String getDigitalWallet() {
    return digitalWallet;
  }


  public void setDigitalWallet(String digitalWallet) {
    this.digitalWallet = digitalWallet;
  }


  public CardTransactionAllOfAttributes cardVerificationData(CardVerificationData cardVerificationData) {
    
    this.cardVerificationData = cardVerificationData;
    return this;
  }

   /**
   * Get cardVerificationData
   * @return cardVerificationData
  **/
  @javax.annotation.Nullable
  public CardVerificationData getCardVerificationData() {
    return cardVerificationData;
  }


  public void setCardVerificationData(CardVerificationData cardVerificationData) {
    this.cardVerificationData = cardVerificationData;
  }


  public CardTransactionAllOfAttributes cardNetwork(String cardNetwork) {
    
    this.cardNetwork = cardNetwork;
    return this;
  }

   /**
   * Get cardNetwork
   * @return cardNetwork
  **/
  @javax.annotation.Nullable
  public String getCardNetwork() {
    return cardNetwork;
  }


  public void setCardNetwork(String cardNetwork) {
    this.cardNetwork = cardNetwork;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardTransactionAllOfAttributes cardTransactionAllOfAttributes = (CardTransactionAllOfAttributes) o;
    return Objects.equals(this.createdAt, cardTransactionAllOfAttributes.createdAt) &&
        Objects.equals(this.direction, cardTransactionAllOfAttributes.direction) &&
        Objects.equals(this.amount, cardTransactionAllOfAttributes.amount) &&
        Objects.equals(this.balance, cardTransactionAllOfAttributes.balance) &&
        Objects.equals(this.summary, cardTransactionAllOfAttributes.summary) &&
        Objects.equals(this.cardLast4Digits, cardTransactionAllOfAttributes.cardLast4Digits) &&
        Objects.equals(this.tags, cardTransactionAllOfAttributes.tags) &&
        Objects.equals(this.networkTransactionId, cardTransactionAllOfAttributes.networkTransactionId) &&
        Objects.equals(this.interchange, cardTransactionAllOfAttributes.interchange) &&
        Objects.equals(this.internationalServiceFee, cardTransactionAllOfAttributes.internationalServiceFee) &&
        Objects.equals(this.merchant, cardTransactionAllOfAttributes.merchant) &&
        Objects.equals(this.recurring, cardTransactionAllOfAttributes.recurring) &&
        Objects.equals(this.paymentMethod, cardTransactionAllOfAttributes.paymentMethod) &&
        Objects.equals(this.digitalWallet, cardTransactionAllOfAttributes.digitalWallet) &&
        Objects.equals(this.cardVerificationData, cardTransactionAllOfAttributes.cardVerificationData) &&
        Objects.equals(this.cardNetwork, cardTransactionAllOfAttributes.cardNetwork);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, direction, amount, balance, summary, cardLast4Digits, tags, networkTransactionId, interchange, internationalServiceFee, merchant, recurring, paymentMethod, digitalWallet, cardVerificationData, cardNetwork);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardTransactionAllOfAttributes {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    cardLast4Digits: ").append(toIndentedString(cardLast4Digits)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    networkTransactionId: ").append(toIndentedString(networkTransactionId)).append("\n");
    sb.append("    interchange: ").append(toIndentedString(interchange)).append("\n");
    sb.append("    internationalServiceFee: ").append(toIndentedString(internationalServiceFee)).append("\n");
    sb.append("    merchant: ").append(toIndentedString(merchant)).append("\n");
    sb.append("    recurring: ").append(toIndentedString(recurring)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    digitalWallet: ").append(toIndentedString(digitalWallet)).append("\n");
    sb.append("    cardVerificationData: ").append(toIndentedString(cardVerificationData)).append("\n");
    sb.append("    cardNetwork: ").append(toIndentedString(cardNetwork)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdAt");
    openapiFields.add("direction");
    openapiFields.add("amount");
    openapiFields.add("balance");
    openapiFields.add("summary");
    openapiFields.add("cardLast4Digits");
    openapiFields.add("tags");
    openapiFields.add("networkTransactionId");
    openapiFields.add("interchange");
    openapiFields.add("internationalServiceFee");
    openapiFields.add("merchant");
    openapiFields.add("recurring");
    openapiFields.add("paymentMethod");
    openapiFields.add("digitalWallet");
    openapiFields.add("cardVerificationData");
    openapiFields.add("cardNetwork");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("direction");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("balance");
    openapiRequiredFields.add("summary");
    openapiRequiredFields.add("cardLast4Digits");
    openapiRequiredFields.add("merchant");
    openapiRequiredFields.add("recurring");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CardTransactionAllOfAttributes
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CardTransactionAllOfAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CardTransactionAllOfAttributes is not found in the empty JSON string", CardTransactionAllOfAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CardTransactionAllOfAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CardTransactionAllOfAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CardTransactionAllOfAttributes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direction").toString()));
      }
      if (!jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
      if (!jsonObj.get("cardLast4Digits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardLast4Digits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardLast4Digits").toString()));
      }
      if ((jsonObj.get("networkTransactionId") != null && !jsonObj.get("networkTransactionId").isJsonNull()) && !jsonObj.get("networkTransactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkTransactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkTransactionId").toString()));
      }
      if ((jsonObj.get("interchange") != null && !jsonObj.get("interchange").isJsonNull()) && !jsonObj.get("interchange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interchange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interchange").toString()));
      }
      // validate the required field `merchant`
      Merchant.validateJsonElement(jsonObj.get("merchant"));
      if ((jsonObj.get("paymentMethod") != null && !jsonObj.get("paymentMethod").isJsonNull()) && !jsonObj.get("paymentMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentMethod").toString()));
      }
      if ((jsonObj.get("digitalWallet") != null && !jsonObj.get("digitalWallet").isJsonNull()) && !jsonObj.get("digitalWallet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `digitalWallet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("digitalWallet").toString()));
      }
      // validate the optional field `cardVerificationData`
      if (jsonObj.get("cardVerificationData") != null && !jsonObj.get("cardVerificationData").isJsonNull()) {
        CardVerificationData.validateJsonElement(jsonObj.get("cardVerificationData"));
      }
      if ((jsonObj.get("cardNetwork") != null && !jsonObj.get("cardNetwork").isJsonNull()) && !jsonObj.get("cardNetwork").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardNetwork` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardNetwork").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CardTransactionAllOfAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CardTransactionAllOfAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CardTransactionAllOfAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CardTransactionAllOfAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<CardTransactionAllOfAttributes>() {
           @Override
           public void write(JsonWriter out, CardTransactionAllOfAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CardTransactionAllOfAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CardTransactionAllOfAttributes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CardTransactionAllOfAttributes
  * @throws IOException if the JSON string is invalid with respect to CardTransactionAllOfAttributes
  */
  public static CardTransactionAllOfAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CardTransactionAllOfAttributes.class);
  }

 /**
  * Convert an instance of CardTransactionAllOfAttributes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

