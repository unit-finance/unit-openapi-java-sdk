/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CheckPaymentAttributesCounterparty;
import org.openapitools.client.model.ReturnReason;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CheckPaymentAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CheckPaymentAttributes {
  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_RETURN_CUTOFF_TIME = "returnCutoffTime";
  @SerializedName(SERIALIZED_NAME_RETURN_CUTOFF_TIME)
  private OffsetDateTime returnCutoffTime;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    MARKEDFORRETURN("MarkedForReturn"),
    
    RETURNED("Returned"),
    
    PROCESSED("Processed"),
    
    PENDINGREVIEW("PendingReview");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_MEMO = "memo";
  @SerializedName(SERIALIZED_NAME_MEMO)
  private String memo;

  /**
   * Gets or Sets deliveryStatus
   */
  @JsonAdapter(DeliveryStatusEnum.Adapter.class)
  public enum DeliveryStatusEnum {
    MAILED("Mailed"),
    
    INLOCALAREA("InLocalArea"),
    
    DELIVERED("Delivered"),
    
    REROUTED("Rerouted"),
    
    RETURNEDTOSENDER("ReturnedToSender");

    private String value;

    DeliveryStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeliveryStatusEnum fromValue(String value) {
      for (DeliveryStatusEnum b : DeliveryStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeliveryStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeliveryStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeliveryStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeliveryStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DELIVERY_STATUS = "deliveryStatus";
  @SerializedName(SERIALIZED_NAME_DELIVERY_STATUS)
  private DeliveryStatusEnum deliveryStatus;

  public static final String SERIALIZED_NAME_SEND_AT = "sendAt";
  @SerializedName(SERIALIZED_NAME_SEND_AT)
  private OffsetDateTime sendAt;

  public static final String SERIALIZED_NAME_COUNTERPARTY = "counterparty";
  @SerializedName(SERIALIZED_NAME_COUNTERPARTY)
  private CheckPaymentAttributesCounterparty counterparty;

  public static final String SERIALIZED_NAME_TRACKED_AT = "trackedAt";
  @SerializedName(SERIALIZED_NAME_TRACKED_AT)
  private OffsetDateTime trackedAt;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_EXPECTED_DELIVERY = "expectedDelivery";
  @SerializedName(SERIALIZED_NAME_EXPECTED_DELIVERY)
  private LocalDate expectedDelivery;

  public static final String SERIALIZED_NAME_ORIGINATED = "originated";
  @SerializedName(SERIALIZED_NAME_ORIGINATED)
  private Boolean originated;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private LocalDate expirationDate;

  public static final String SERIALIZED_NAME_REJECT_REASON = "rejectReason";
  @SerializedName(SERIALIZED_NAME_REJECT_REASON)
  private String rejectReason;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Object tags;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_RETURN_REASON = "returnReason";
  @SerializedName(SERIALIZED_NAME_RETURN_REASON)
  private ReturnReason returnReason;

  /**
   * Gets or Sets pendingReviewReasons
   */
  @JsonAdapter(PendingReviewReasonsEnum.Adapter.class)
  public enum PendingReviewReasonsEnum {
    NAMEMISSMATCH("NameMissMatch"),
    
    SOFTLIMIT("SoftLimit");

    private String value;

    PendingReviewReasonsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PendingReviewReasonsEnum fromValue(String value) {
      for (PendingReviewReasonsEnum b : PendingReviewReasonsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PendingReviewReasonsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PendingReviewReasonsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PendingReviewReasonsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PendingReviewReasonsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PENDING_REVIEW_REASONS = "pendingReviewReasons";
  @SerializedName(SERIALIZED_NAME_PENDING_REVIEW_REASONS)
  private List<PendingReviewReasonsEnum> pendingReviewReasons;

  public static final String SERIALIZED_NAME_CHECK_NUMBER = "checkNumber";
  @SerializedName(SERIALIZED_NAME_CHECK_NUMBER)
  private String checkNumber;

  public static final String SERIALIZED_NAME_ON_US_AUXILIARY = "onUsAuxiliary";
  @SerializedName(SERIALIZED_NAME_ON_US_AUXILIARY)
  private String onUsAuxiliary;

  public static final String SERIALIZED_NAME_ON_US = "onUs";
  @SerializedName(SERIALIZED_NAME_ON_US)
  private String onUs;

  public static final String SERIALIZED_NAME_COUNTERPARTY_ROUTING_NUMBER = "counterpartyRoutingNumber";
  @SerializedName(SERIALIZED_NAME_COUNTERPARTY_ROUTING_NUMBER)
  private String counterpartyRoutingNumber;

  /**
   * Gets or Sets additionalVerificationStatus
   */
  @JsonAdapter(AdditionalVerificationStatusEnum.Adapter.class)
  public enum AdditionalVerificationStatusEnum {
    REQUIRED("Required"),
    
    NOTREQUIRED("NotRequired"),
    
    APPROVED("Approved");

    private String value;

    AdditionalVerificationStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdditionalVerificationStatusEnum fromValue(String value) {
      for (AdditionalVerificationStatusEnum b : AdditionalVerificationStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AdditionalVerificationStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdditionalVerificationStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdditionalVerificationStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AdditionalVerificationStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ADDITIONAL_VERIFICATION_STATUS = "additionalVerificationStatus";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_VERIFICATION_STATUS)
  private AdditionalVerificationStatusEnum additionalVerificationStatus;

  public CheckPaymentAttributes() {
  }

  public CheckPaymentAttributes createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public CheckPaymentAttributes updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public CheckPaymentAttributes amount(Integer amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * minimum: 1
   * @return amount
  **/
  @javax.annotation.Nonnull
  public Integer getAmount() {
    return amount;
  }


  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public CheckPaymentAttributes returnCutoffTime(OffsetDateTime returnCutoffTime) {
    
    this.returnCutoffTime = returnCutoffTime;
    return this;
  }

   /**
   * Get returnCutoffTime
   * @return returnCutoffTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getReturnCutoffTime() {
    return returnCutoffTime;
  }


  public void setReturnCutoffTime(OffsetDateTime returnCutoffTime) {
    this.returnCutoffTime = returnCutoffTime;
  }


  public CheckPaymentAttributes status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public CheckPaymentAttributes memo(String memo) {
    
    this.memo = memo;
    return this;
  }

   /**
   * Get memo
   * @return memo
  **/
  @javax.annotation.Nullable
  public String getMemo() {
    return memo;
  }


  public void setMemo(String memo) {
    this.memo = memo;
  }


  public CheckPaymentAttributes deliveryStatus(DeliveryStatusEnum deliveryStatus) {
    
    this.deliveryStatus = deliveryStatus;
    return this;
  }

   /**
   * Get deliveryStatus
   * @return deliveryStatus
  **/
  @javax.annotation.Nullable
  public DeliveryStatusEnum getDeliveryStatus() {
    return deliveryStatus;
  }


  public void setDeliveryStatus(DeliveryStatusEnum deliveryStatus) {
    this.deliveryStatus = deliveryStatus;
  }


  public CheckPaymentAttributes sendAt(OffsetDateTime sendAt) {
    
    this.sendAt = sendAt;
    return this;
  }

   /**
   * Get sendAt
   * @return sendAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getSendAt() {
    return sendAt;
  }


  public void setSendAt(OffsetDateTime sendAt) {
    this.sendAt = sendAt;
  }


  public CheckPaymentAttributes counterparty(CheckPaymentAttributesCounterparty counterparty) {
    
    this.counterparty = counterparty;
    return this;
  }

   /**
   * Get counterparty
   * @return counterparty
  **/
  @javax.annotation.Nullable
  public CheckPaymentAttributesCounterparty getCounterparty() {
    return counterparty;
  }


  public void setCounterparty(CheckPaymentAttributesCounterparty counterparty) {
    this.counterparty = counterparty;
  }


  public CheckPaymentAttributes trackedAt(OffsetDateTime trackedAt) {
    
    this.trackedAt = trackedAt;
    return this;
  }

   /**
   * Get trackedAt
   * @return trackedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getTrackedAt() {
    return trackedAt;
  }


  public void setTrackedAt(OffsetDateTime trackedAt) {
    this.trackedAt = trackedAt;
  }


  public CheckPaymentAttributes postalCode(String postalCode) {
    
    this.postalCode = postalCode;
    return this;
  }

   /**
   * Get postalCode
   * @return postalCode
  **/
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }


  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public CheckPaymentAttributes expectedDelivery(LocalDate expectedDelivery) {
    
    this.expectedDelivery = expectedDelivery;
    return this;
  }

   /**
   * Get expectedDelivery
   * @return expectedDelivery
  **/
  @javax.annotation.Nullable
  public LocalDate getExpectedDelivery() {
    return expectedDelivery;
  }


  public void setExpectedDelivery(LocalDate expectedDelivery) {
    this.expectedDelivery = expectedDelivery;
  }


  public CheckPaymentAttributes originated(Boolean originated) {
    
    this.originated = originated;
    return this;
  }

   /**
   * Get originated
   * @return originated
  **/
  @javax.annotation.Nonnull
  public Boolean getOriginated() {
    return originated;
  }


  public void setOriginated(Boolean originated) {
    this.originated = originated;
  }


  public CheckPaymentAttributes expirationDate(LocalDate expirationDate) {
    
    this.expirationDate = expirationDate;
    return this;
  }

   /**
   * Get expirationDate
   * @return expirationDate
  **/
  @javax.annotation.Nullable
  public LocalDate getExpirationDate() {
    return expirationDate;
  }


  public void setExpirationDate(LocalDate expirationDate) {
    this.expirationDate = expirationDate;
  }


  public CheckPaymentAttributes rejectReason(String rejectReason) {
    
    this.rejectReason = rejectReason;
    return this;
  }

   /**
   * Get rejectReason
   * @return rejectReason
  **/
  @javax.annotation.Nullable
  public String getRejectReason() {
    return rejectReason;
  }


  public void setRejectReason(String rejectReason) {
    this.rejectReason = rejectReason;
  }


  public CheckPaymentAttributes tags(Object tags) {
    
    this.tags = tags;
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  public Object getTags() {
    return tags;
  }


  public void setTags(Object tags) {
    this.tags = tags;
  }


  public CheckPaymentAttributes description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public CheckPaymentAttributes returnReason(ReturnReason returnReason) {
    
    this.returnReason = returnReason;
    return this;
  }

   /**
   * Get returnReason
   * @return returnReason
  **/
  @javax.annotation.Nullable
  public ReturnReason getReturnReason() {
    return returnReason;
  }


  public void setReturnReason(ReturnReason returnReason) {
    this.returnReason = returnReason;
  }


  public CheckPaymentAttributes pendingReviewReasons(List<PendingReviewReasonsEnum> pendingReviewReasons) {
    
    this.pendingReviewReasons = pendingReviewReasons;
    return this;
  }

  public CheckPaymentAttributes addPendingReviewReasonsItem(PendingReviewReasonsEnum pendingReviewReasonsItem) {
    if (this.pendingReviewReasons == null) {
      this.pendingReviewReasons = new ArrayList<>();
    }
    this.pendingReviewReasons.add(pendingReviewReasonsItem);
    return this;
  }

   /**
   * Get pendingReviewReasons
   * @return pendingReviewReasons
  **/
  @javax.annotation.Nullable
  public List<PendingReviewReasonsEnum> getPendingReviewReasons() {
    return pendingReviewReasons;
  }


  public void setPendingReviewReasons(List<PendingReviewReasonsEnum> pendingReviewReasons) {
    this.pendingReviewReasons = pendingReviewReasons;
  }


  public CheckPaymentAttributes checkNumber(String checkNumber) {
    
    this.checkNumber = checkNumber;
    return this;
  }

   /**
   * Get checkNumber
   * @return checkNumber
  **/
  @javax.annotation.Nullable
  public String getCheckNumber() {
    return checkNumber;
  }


  public void setCheckNumber(String checkNumber) {
    this.checkNumber = checkNumber;
  }


  public CheckPaymentAttributes onUsAuxiliary(String onUsAuxiliary) {
    
    this.onUsAuxiliary = onUsAuxiliary;
    return this;
  }

   /**
   * Get onUsAuxiliary
   * @return onUsAuxiliary
  **/
  @javax.annotation.Nullable
  public String getOnUsAuxiliary() {
    return onUsAuxiliary;
  }


  public void setOnUsAuxiliary(String onUsAuxiliary) {
    this.onUsAuxiliary = onUsAuxiliary;
  }


  public CheckPaymentAttributes onUs(String onUs) {
    
    this.onUs = onUs;
    return this;
  }

   /**
   * Get onUs
   * @return onUs
  **/
  @javax.annotation.Nullable
  public String getOnUs() {
    return onUs;
  }


  public void setOnUs(String onUs) {
    this.onUs = onUs;
  }


  public CheckPaymentAttributes counterpartyRoutingNumber(String counterpartyRoutingNumber) {
    
    this.counterpartyRoutingNumber = counterpartyRoutingNumber;
    return this;
  }

   /**
   * Get counterpartyRoutingNumber
   * @return counterpartyRoutingNumber
  **/
  @javax.annotation.Nullable
  public String getCounterpartyRoutingNumber() {
    return counterpartyRoutingNumber;
  }


  public void setCounterpartyRoutingNumber(String counterpartyRoutingNumber) {
    this.counterpartyRoutingNumber = counterpartyRoutingNumber;
  }


  public CheckPaymentAttributes additionalVerificationStatus(AdditionalVerificationStatusEnum additionalVerificationStatus) {
    
    this.additionalVerificationStatus = additionalVerificationStatus;
    return this;
  }

   /**
   * Get additionalVerificationStatus
   * @return additionalVerificationStatus
  **/
  @javax.annotation.Nullable
  public AdditionalVerificationStatusEnum getAdditionalVerificationStatus() {
    return additionalVerificationStatus;
  }


  public void setAdditionalVerificationStatus(AdditionalVerificationStatusEnum additionalVerificationStatus) {
    this.additionalVerificationStatus = additionalVerificationStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckPaymentAttributes checkPaymentAttributes = (CheckPaymentAttributes) o;
    return Objects.equals(this.createdAt, checkPaymentAttributes.createdAt) &&
        Objects.equals(this.updatedAt, checkPaymentAttributes.updatedAt) &&
        Objects.equals(this.amount, checkPaymentAttributes.amount) &&
        Objects.equals(this.returnCutoffTime, checkPaymentAttributes.returnCutoffTime) &&
        Objects.equals(this.status, checkPaymentAttributes.status) &&
        Objects.equals(this.memo, checkPaymentAttributes.memo) &&
        Objects.equals(this.deliveryStatus, checkPaymentAttributes.deliveryStatus) &&
        Objects.equals(this.sendAt, checkPaymentAttributes.sendAt) &&
        Objects.equals(this.counterparty, checkPaymentAttributes.counterparty) &&
        Objects.equals(this.trackedAt, checkPaymentAttributes.trackedAt) &&
        Objects.equals(this.postalCode, checkPaymentAttributes.postalCode) &&
        Objects.equals(this.expectedDelivery, checkPaymentAttributes.expectedDelivery) &&
        Objects.equals(this.originated, checkPaymentAttributes.originated) &&
        Objects.equals(this.expirationDate, checkPaymentAttributes.expirationDate) &&
        Objects.equals(this.rejectReason, checkPaymentAttributes.rejectReason) &&
        Objects.equals(this.tags, checkPaymentAttributes.tags) &&
        Objects.equals(this.description, checkPaymentAttributes.description) &&
        Objects.equals(this.returnReason, checkPaymentAttributes.returnReason) &&
        Objects.equals(this.pendingReviewReasons, checkPaymentAttributes.pendingReviewReasons) &&
        Objects.equals(this.checkNumber, checkPaymentAttributes.checkNumber) &&
        Objects.equals(this.onUsAuxiliary, checkPaymentAttributes.onUsAuxiliary) &&
        Objects.equals(this.onUs, checkPaymentAttributes.onUs) &&
        Objects.equals(this.counterpartyRoutingNumber, checkPaymentAttributes.counterpartyRoutingNumber) &&
        Objects.equals(this.additionalVerificationStatus, checkPaymentAttributes.additionalVerificationStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, updatedAt, amount, returnCutoffTime, status, memo, deliveryStatus, sendAt, counterparty, trackedAt, postalCode, expectedDelivery, originated, expirationDate, rejectReason, tags, description, returnReason, pendingReviewReasons, checkNumber, onUsAuxiliary, onUs, counterpartyRoutingNumber, additionalVerificationStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckPaymentAttributes {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    returnCutoffTime: ").append(toIndentedString(returnCutoffTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    deliveryStatus: ").append(toIndentedString(deliveryStatus)).append("\n");
    sb.append("    sendAt: ").append(toIndentedString(sendAt)).append("\n");
    sb.append("    counterparty: ").append(toIndentedString(counterparty)).append("\n");
    sb.append("    trackedAt: ").append(toIndentedString(trackedAt)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    expectedDelivery: ").append(toIndentedString(expectedDelivery)).append("\n");
    sb.append("    originated: ").append(toIndentedString(originated)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    rejectReason: ").append(toIndentedString(rejectReason)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    returnReason: ").append(toIndentedString(returnReason)).append("\n");
    sb.append("    pendingReviewReasons: ").append(toIndentedString(pendingReviewReasons)).append("\n");
    sb.append("    checkNumber: ").append(toIndentedString(checkNumber)).append("\n");
    sb.append("    onUsAuxiliary: ").append(toIndentedString(onUsAuxiliary)).append("\n");
    sb.append("    onUs: ").append(toIndentedString(onUs)).append("\n");
    sb.append("    counterpartyRoutingNumber: ").append(toIndentedString(counterpartyRoutingNumber)).append("\n");
    sb.append("    additionalVerificationStatus: ").append(toIndentedString(additionalVerificationStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");
    openapiFields.add("amount");
    openapiFields.add("returnCutoffTime");
    openapiFields.add("status");
    openapiFields.add("memo");
    openapiFields.add("deliveryStatus");
    openapiFields.add("sendAt");
    openapiFields.add("counterparty");
    openapiFields.add("trackedAt");
    openapiFields.add("postalCode");
    openapiFields.add("expectedDelivery");
    openapiFields.add("originated");
    openapiFields.add("expirationDate");
    openapiFields.add("rejectReason");
    openapiFields.add("tags");
    openapiFields.add("description");
    openapiFields.add("returnReason");
    openapiFields.add("pendingReviewReasons");
    openapiFields.add("checkNumber");
    openapiFields.add("onUsAuxiliary");
    openapiFields.add("onUs");
    openapiFields.add("counterpartyRoutingNumber");
    openapiFields.add("additionalVerificationStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("updatedAt");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("originated");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CheckPaymentAttributes
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckPaymentAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckPaymentAttributes is not found in the empty JSON string", CheckPaymentAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckPaymentAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckPaymentAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CheckPaymentAttributes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("memo") != null && !jsonObj.get("memo").isJsonNull()) && !jsonObj.get("memo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memo").toString()));
      }
      if ((jsonObj.get("deliveryStatus") != null && !jsonObj.get("deliveryStatus").isJsonNull()) && !jsonObj.get("deliveryStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryStatus").toString()));
      }
      // validate the optional field `counterparty`
      if (jsonObj.get("counterparty") != null && !jsonObj.get("counterparty").isJsonNull()) {
        CheckPaymentAttributesCounterparty.validateJsonElement(jsonObj.get("counterparty"));
      }
      if ((jsonObj.get("postalCode") != null && !jsonObj.get("postalCode").isJsonNull()) && !jsonObj.get("postalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalCode").toString()));
      }
      if ((jsonObj.get("rejectReason") != null && !jsonObj.get("rejectReason").isJsonNull()) && !jsonObj.get("rejectReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rejectReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rejectReason").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pendingReviewReasons") != null && !jsonObj.get("pendingReviewReasons").isJsonNull() && !jsonObj.get("pendingReviewReasons").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pendingReviewReasons` to be an array in the JSON string but got `%s`", jsonObj.get("pendingReviewReasons").toString()));
      }
      if ((jsonObj.get("checkNumber") != null && !jsonObj.get("checkNumber").isJsonNull()) && !jsonObj.get("checkNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkNumber").toString()));
      }
      if ((jsonObj.get("onUsAuxiliary") != null && !jsonObj.get("onUsAuxiliary").isJsonNull()) && !jsonObj.get("onUsAuxiliary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `onUsAuxiliary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("onUsAuxiliary").toString()));
      }
      if ((jsonObj.get("onUs") != null && !jsonObj.get("onUs").isJsonNull()) && !jsonObj.get("onUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `onUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("onUs").toString()));
      }
      if ((jsonObj.get("counterpartyRoutingNumber") != null && !jsonObj.get("counterpartyRoutingNumber").isJsonNull()) && !jsonObj.get("counterpartyRoutingNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `counterpartyRoutingNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("counterpartyRoutingNumber").toString()));
      }
      if ((jsonObj.get("additionalVerificationStatus") != null && !jsonObj.get("additionalVerificationStatus").isJsonNull()) && !jsonObj.get("additionalVerificationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalVerificationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalVerificationStatus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckPaymentAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckPaymentAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckPaymentAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckPaymentAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckPaymentAttributes>() {
           @Override
           public void write(JsonWriter out, CheckPaymentAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckPaymentAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CheckPaymentAttributes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CheckPaymentAttributes
  * @throws IOException if the JSON string is invalid with respect to CheckPaymentAttributes
  */
  public static CheckPaymentAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckPaymentAttributes.class);
  }

 /**
  * Convert an instance of CheckPaymentAttributes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

