/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.CardLevelLimits;
import org.openapitools.client.model.FullName;
import org.openapitools.client.model.Phone;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateBusinessDebitCardAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CreateBusinessDebitCardAttributes {
  public static final String SERIALIZED_NAME_SHIPPING_ADDRESS = "shippingAddress";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESS)
  private Address shippingAddress;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_FULL_NAME = "fullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private FullName fullName;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private Phone phone;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "dateOfBirth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private LocalDate dateOfBirth;

  public static final String SERIALIZED_NAME_NATIONALITY = "nationality";
  @SerializedName(SERIALIZED_NAME_NATIONALITY)
  private String nationality;

  public static final String SERIALIZED_NAME_SSN = "ssn";
  @SerializedName(SERIALIZED_NAME_SSN)
  private String ssn;

  public static final String SERIALIZED_NAME_PASSPORT = "passport";
  @SerializedName(SERIALIZED_NAME_PASSPORT)
  private String passport;

  public static final String SERIALIZED_NAME_DESIGN = "design";
  @SerializedName(SERIALIZED_NAME_DESIGN)
  private String design;

  public static final String SERIALIZED_NAME_ADDITIONAL_EMBOSSED_TEXT = "additionalEmbossedText";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_EMBOSSED_TEXT)
  private String additionalEmbossedText;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Object tags;

  public static final String SERIALIZED_NAME_LIMITS = "limits";
  @SerializedName(SERIALIZED_NAME_LIMITS)
  private CardLevelLimits limits;

  public static final String SERIALIZED_NAME_IDEMPOTENCY_KEY = "idempotencyKey";
  @SerializedName(SERIALIZED_NAME_IDEMPOTENCY_KEY)
  private String idempotencyKey;

  public static final String SERIALIZED_NAME_ACTIVE_FOR_ONLINE_USE = "activeForOnlineUse";
  @SerializedName(SERIALIZED_NAME_ACTIVE_FOR_ONLINE_USE)
  private Boolean activeForOnlineUse;

  public static final String SERIALIZED_NAME_PRINT_ONLY_BUSINESS_NAME = "printOnlyBusinessName";
  @SerializedName(SERIALIZED_NAME_PRINT_ONLY_BUSINESS_NAME)
  private Boolean printOnlyBusinessName;

  public static final String SERIALIZED_NAME_EXPIRY_DATE = "expiryDate";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE)
  private String expiryDate;

  public CreateBusinessDebitCardAttributes() {
  }

  public CreateBusinessDebitCardAttributes shippingAddress(Address shippingAddress) {
    
    this.shippingAddress = shippingAddress;
    return this;
  }

   /**
   * Get shippingAddress
   * @return shippingAddress
  **/
  @javax.annotation.Nullable
  public Address getShippingAddress() {
    return shippingAddress;
  }


  public void setShippingAddress(Address shippingAddress) {
    this.shippingAddress = shippingAddress;
  }


  public CreateBusinessDebitCardAttributes address(Address address) {
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nonnull
  public Address getAddress() {
    return address;
  }


  public void setAddress(Address address) {
    this.address = address;
  }


  public CreateBusinessDebitCardAttributes fullName(FullName fullName) {
    
    this.fullName = fullName;
    return this;
  }

   /**
   * Get fullName
   * @return fullName
  **/
  @javax.annotation.Nonnull
  public FullName getFullName() {
    return fullName;
  }


  public void setFullName(FullName fullName) {
    this.fullName = fullName;
  }


  public CreateBusinessDebitCardAttributes phone(Phone phone) {
    
    this.phone = phone;
    return this;
  }

   /**
   * Get phone
   * @return phone
  **/
  @javax.annotation.Nonnull
  public Phone getPhone() {
    return phone;
  }


  public void setPhone(Phone phone) {
    this.phone = phone;
  }


  public CreateBusinessDebitCardAttributes email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public CreateBusinessDebitCardAttributes dateOfBirth(LocalDate dateOfBirth) {
    
    this.dateOfBirth = dateOfBirth;
    return this;
  }

   /**
   * Get dateOfBirth
   * @return dateOfBirth
  **/
  @javax.annotation.Nonnull
  public LocalDate getDateOfBirth() {
    return dateOfBirth;
  }


  public void setDateOfBirth(LocalDate dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
  }


  public CreateBusinessDebitCardAttributes nationality(String nationality) {
    
    this.nationality = nationality;
    return this;
  }

   /**
   * Get nationality
   * @return nationality
  **/
  @javax.annotation.Nullable
  public String getNationality() {
    return nationality;
  }


  public void setNationality(String nationality) {
    this.nationality = nationality;
  }


  public CreateBusinessDebitCardAttributes ssn(String ssn) {
    
    this.ssn = ssn;
    return this;
  }

   /**
   * Get ssn
   * @return ssn
  **/
  @javax.annotation.Nullable
  public String getSsn() {
    return ssn;
  }


  public void setSsn(String ssn) {
    this.ssn = ssn;
  }


  public CreateBusinessDebitCardAttributes passport(String passport) {
    
    this.passport = passport;
    return this;
  }

   /**
   * Get passport
   * @return passport
  **/
  @javax.annotation.Nullable
  public String getPassport() {
    return passport;
  }


  public void setPassport(String passport) {
    this.passport = passport;
  }


  public CreateBusinessDebitCardAttributes design(String design) {
    
    this.design = design;
    return this;
  }

   /**
   * Get design
   * @return design
  **/
  @javax.annotation.Nullable
  public String getDesign() {
    return design;
  }


  public void setDesign(String design) {
    this.design = design;
  }


  public CreateBusinessDebitCardAttributes additionalEmbossedText(String additionalEmbossedText) {
    
    this.additionalEmbossedText = additionalEmbossedText;
    return this;
  }

   /**
   * Get additionalEmbossedText
   * @return additionalEmbossedText
  **/
  @javax.annotation.Nullable
  public String getAdditionalEmbossedText() {
    return additionalEmbossedText;
  }


  public void setAdditionalEmbossedText(String additionalEmbossedText) {
    this.additionalEmbossedText = additionalEmbossedText;
  }


  public CreateBusinessDebitCardAttributes tags(Object tags) {
    
    this.tags = tags;
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  public Object getTags() {
    return tags;
  }


  public void setTags(Object tags) {
    this.tags = tags;
  }


  public CreateBusinessDebitCardAttributes limits(CardLevelLimits limits) {
    
    this.limits = limits;
    return this;
  }

   /**
   * Get limits
   * @return limits
  **/
  @javax.annotation.Nullable
  public CardLevelLimits getLimits() {
    return limits;
  }


  public void setLimits(CardLevelLimits limits) {
    this.limits = limits;
  }


  public CreateBusinessDebitCardAttributes idempotencyKey(String idempotencyKey) {
    
    this.idempotencyKey = idempotencyKey;
    return this;
  }

   /**
   * Get idempotencyKey
   * @return idempotencyKey
  **/
  @javax.annotation.Nullable
  public String getIdempotencyKey() {
    return idempotencyKey;
  }


  public void setIdempotencyKey(String idempotencyKey) {
    this.idempotencyKey = idempotencyKey;
  }


  public CreateBusinessDebitCardAttributes activeForOnlineUse(Boolean activeForOnlineUse) {
    
    this.activeForOnlineUse = activeForOnlineUse;
    return this;
  }

   /**
   * Get activeForOnlineUse
   * @return activeForOnlineUse
  **/
  @javax.annotation.Nullable
  public Boolean getActiveForOnlineUse() {
    return activeForOnlineUse;
  }


  public void setActiveForOnlineUse(Boolean activeForOnlineUse) {
    this.activeForOnlineUse = activeForOnlineUse;
  }


  public CreateBusinessDebitCardAttributes printOnlyBusinessName(Boolean printOnlyBusinessName) {
    
    this.printOnlyBusinessName = printOnlyBusinessName;
    return this;
  }

   /**
   * Get printOnlyBusinessName
   * @return printOnlyBusinessName
  **/
  @javax.annotation.Nullable
  public Boolean getPrintOnlyBusinessName() {
    return printOnlyBusinessName;
  }


  public void setPrintOnlyBusinessName(Boolean printOnlyBusinessName) {
    this.printOnlyBusinessName = printOnlyBusinessName;
  }


  public CreateBusinessDebitCardAttributes expiryDate(String expiryDate) {
    
    this.expiryDate = expiryDate;
    return this;
  }

   /**
   * Get expiryDate
   * @return expiryDate
  **/
  @javax.annotation.Nullable
  public String getExpiryDate() {
    return expiryDate;
  }


  public void setExpiryDate(String expiryDate) {
    this.expiryDate = expiryDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateBusinessDebitCardAttributes createBusinessDebitCardAttributes = (CreateBusinessDebitCardAttributes) o;
    return Objects.equals(this.shippingAddress, createBusinessDebitCardAttributes.shippingAddress) &&
        Objects.equals(this.address, createBusinessDebitCardAttributes.address) &&
        Objects.equals(this.fullName, createBusinessDebitCardAttributes.fullName) &&
        Objects.equals(this.phone, createBusinessDebitCardAttributes.phone) &&
        Objects.equals(this.email, createBusinessDebitCardAttributes.email) &&
        Objects.equals(this.dateOfBirth, createBusinessDebitCardAttributes.dateOfBirth) &&
        Objects.equals(this.nationality, createBusinessDebitCardAttributes.nationality) &&
        Objects.equals(this.ssn, createBusinessDebitCardAttributes.ssn) &&
        Objects.equals(this.passport, createBusinessDebitCardAttributes.passport) &&
        Objects.equals(this.design, createBusinessDebitCardAttributes.design) &&
        Objects.equals(this.additionalEmbossedText, createBusinessDebitCardAttributes.additionalEmbossedText) &&
        Objects.equals(this.tags, createBusinessDebitCardAttributes.tags) &&
        Objects.equals(this.limits, createBusinessDebitCardAttributes.limits) &&
        Objects.equals(this.idempotencyKey, createBusinessDebitCardAttributes.idempotencyKey) &&
        Objects.equals(this.activeForOnlineUse, createBusinessDebitCardAttributes.activeForOnlineUse) &&
        Objects.equals(this.printOnlyBusinessName, createBusinessDebitCardAttributes.printOnlyBusinessName) &&
        Objects.equals(this.expiryDate, createBusinessDebitCardAttributes.expiryDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(shippingAddress, address, fullName, phone, email, dateOfBirth, nationality, ssn, passport, design, additionalEmbossedText, tags, limits, idempotencyKey, activeForOnlineUse, printOnlyBusinessName, expiryDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateBusinessDebitCardAttributes {\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    nationality: ").append(toIndentedString(nationality)).append("\n");
    sb.append("    ssn: ").append(toIndentedString(ssn)).append("\n");
    sb.append("    passport: ").append(toIndentedString(passport)).append("\n");
    sb.append("    design: ").append(toIndentedString(design)).append("\n");
    sb.append("    additionalEmbossedText: ").append(toIndentedString(additionalEmbossedText)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    limits: ").append(toIndentedString(limits)).append("\n");
    sb.append("    idempotencyKey: ").append(toIndentedString(idempotencyKey)).append("\n");
    sb.append("    activeForOnlineUse: ").append(toIndentedString(activeForOnlineUse)).append("\n");
    sb.append("    printOnlyBusinessName: ").append(toIndentedString(printOnlyBusinessName)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("shippingAddress");
    openapiFields.add("address");
    openapiFields.add("fullName");
    openapiFields.add("phone");
    openapiFields.add("email");
    openapiFields.add("dateOfBirth");
    openapiFields.add("nationality");
    openapiFields.add("ssn");
    openapiFields.add("passport");
    openapiFields.add("design");
    openapiFields.add("additionalEmbossedText");
    openapiFields.add("tags");
    openapiFields.add("limits");
    openapiFields.add("idempotencyKey");
    openapiFields.add("activeForOnlineUse");
    openapiFields.add("printOnlyBusinessName");
    openapiFields.add("expiryDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("fullName");
    openapiRequiredFields.add("phone");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("dateOfBirth");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CreateBusinessDebitCardAttributes
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateBusinessDebitCardAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateBusinessDebitCardAttributes is not found in the empty JSON string", CreateBusinessDebitCardAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateBusinessDebitCardAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateBusinessDebitCardAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateBusinessDebitCardAttributes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `shippingAddress`
      if (jsonObj.get("shippingAddress") != null && !jsonObj.get("shippingAddress").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("shippingAddress"));
      }
      // validate the required field `address`
      Address.validateJsonElement(jsonObj.get("address"));
      // validate the required field `fullName`
      FullName.validateJsonElement(jsonObj.get("fullName"));
      // validate the required field `phone`
      Phone.validateJsonElement(jsonObj.get("phone"));
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("nationality") != null && !jsonObj.get("nationality").isJsonNull()) && !jsonObj.get("nationality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationality").toString()));
      }
      if ((jsonObj.get("ssn") != null && !jsonObj.get("ssn").isJsonNull()) && !jsonObj.get("ssn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssn").toString()));
      }
      if ((jsonObj.get("passport") != null && !jsonObj.get("passport").isJsonNull()) && !jsonObj.get("passport").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passport` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passport").toString()));
      }
      if ((jsonObj.get("design") != null && !jsonObj.get("design").isJsonNull()) && !jsonObj.get("design").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `design` to be a primitive type in the JSON string but got `%s`", jsonObj.get("design").toString()));
      }
      if ((jsonObj.get("additionalEmbossedText") != null && !jsonObj.get("additionalEmbossedText").isJsonNull()) && !jsonObj.get("additionalEmbossedText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalEmbossedText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalEmbossedText").toString()));
      }
      // validate the optional field `limits`
      if (jsonObj.get("limits") != null && !jsonObj.get("limits").isJsonNull()) {
        CardLevelLimits.validateJsonElement(jsonObj.get("limits"));
      }
      if ((jsonObj.get("idempotencyKey") != null && !jsonObj.get("idempotencyKey").isJsonNull()) && !jsonObj.get("idempotencyKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idempotencyKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idempotencyKey").toString()));
      }
      if ((jsonObj.get("expiryDate") != null && !jsonObj.get("expiryDate").isJsonNull()) && !jsonObj.get("expiryDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiryDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiryDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateBusinessDebitCardAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateBusinessDebitCardAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateBusinessDebitCardAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateBusinessDebitCardAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateBusinessDebitCardAttributes>() {
           @Override
           public void write(JsonWriter out, CreateBusinessDebitCardAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateBusinessDebitCardAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateBusinessDebitCardAttributes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateBusinessDebitCardAttributes
  * @throws IOException if the JSON string is invalid with respect to CreateBusinessDebitCardAttributes
  */
  public static CreateBusinessDebitCardAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateBusinessDebitCardAttributes.class);
  }

 /**
  * Convert an instance of CreateBusinessDebitCardAttributes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

