/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateAchPayment;
import org.openapitools.client.model.CreateAchPaymentCounterparty;
import org.openapitools.client.model.CreateAchPaymentPlaid;
import org.openapitools.client.model.CreateAchPaymentRelationships;
import org.openapitools.client.model.CreateBillPayment;
import org.openapitools.client.model.CreateBookPayment;
import org.openapitools.client.model.CreatePushToCardPayment;
import org.openapitools.client.model.CreatePushToCardPaymentAttributes;
import org.openapitools.client.model.CreateWirePayment;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CreatePayment extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(CreatePayment.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CreatePayment.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CreatePayment' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CreateAchPayment> adapterCreateAchPayment = gson.getDelegateAdapter(this, TypeToken.get(CreateAchPayment.class));
            final TypeAdapter<CreateAchPaymentCounterparty> adapterCreateAchPaymentCounterparty = gson.getDelegateAdapter(this, TypeToken.get(CreateAchPaymentCounterparty.class));
            final TypeAdapter<CreateAchPaymentPlaid> adapterCreateAchPaymentPlaid = gson.getDelegateAdapter(this, TypeToken.get(CreateAchPaymentPlaid.class));
            final TypeAdapter<CreateBookPayment> adapterCreateBookPayment = gson.getDelegateAdapter(this, TypeToken.get(CreateBookPayment.class));
            final TypeAdapter<CreateWirePayment> adapterCreateWirePayment = gson.getDelegateAdapter(this, TypeToken.get(CreateWirePayment.class));
            final TypeAdapter<CreateBillPayment> adapterCreateBillPayment = gson.getDelegateAdapter(this, TypeToken.get(CreateBillPayment.class));
            final TypeAdapter<CreatePushToCardPayment> adapterCreatePushToCardPayment = gson.getDelegateAdapter(this, TypeToken.get(CreatePushToCardPayment.class));

            return (TypeAdapter<T>) new TypeAdapter<CreatePayment>() {
                @Override
                public void write(JsonWriter out, CreatePayment value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `CreateAchPayment`
                    if (value.getActualInstance() instanceof CreateAchPayment) {
                      JsonElement element = adapterCreateAchPayment.toJsonTree((CreateAchPayment)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `CreateAchPaymentCounterparty`
                    if (value.getActualInstance() instanceof CreateAchPaymentCounterparty) {
                      JsonElement element = adapterCreateAchPaymentCounterparty.toJsonTree((CreateAchPaymentCounterparty)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `CreateAchPaymentPlaid`
                    if (value.getActualInstance() instanceof CreateAchPaymentPlaid) {
                      JsonElement element = adapterCreateAchPaymentPlaid.toJsonTree((CreateAchPaymentPlaid)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `CreateBookPayment`
                    if (value.getActualInstance() instanceof CreateBookPayment) {
                      JsonElement element = adapterCreateBookPayment.toJsonTree((CreateBookPayment)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `CreateWirePayment`
                    if (value.getActualInstance() instanceof CreateWirePayment) {
                      JsonElement element = adapterCreateWirePayment.toJsonTree((CreateWirePayment)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `CreateBillPayment`
                    if (value.getActualInstance() instanceof CreateBillPayment) {
                      JsonElement element = adapterCreateBillPayment.toJsonTree((CreateBillPayment)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `CreatePushToCardPayment`
                    if (value.getActualInstance() instanceof CreatePushToCardPayment) {
                      JsonElement element = adapterCreatePushToCardPayment.toJsonTree((CreatePushToCardPayment)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: CreateAchPayment, CreateAchPaymentCounterparty, CreateAchPaymentPlaid, CreateBillPayment, CreateBookPayment, CreatePushToCardPayment, CreateWirePayment");
                }

                @Override
                public CreatePayment read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize CreateAchPayment
                    try {
                      // validate the JSON object to see if any exception is thrown
                      CreateAchPayment.validateJsonElement(jsonElement);
                      actualAdapter = adapterCreateAchPayment;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'CreateAchPayment'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for CreateAchPayment failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'CreateAchPayment'", e);
                    }
                    // deserialize CreateAchPaymentCounterparty
                    try {
                      // validate the JSON object to see if any exception is thrown
                      CreateAchPaymentCounterparty.validateJsonElement(jsonElement);
                      actualAdapter = adapterCreateAchPaymentCounterparty;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'CreateAchPaymentCounterparty'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for CreateAchPaymentCounterparty failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'CreateAchPaymentCounterparty'", e);
                    }
                    // deserialize CreateAchPaymentPlaid
                    try {
                      // validate the JSON object to see if any exception is thrown
                      CreateAchPaymentPlaid.validateJsonElement(jsonElement);
                      actualAdapter = adapterCreateAchPaymentPlaid;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'CreateAchPaymentPlaid'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for CreateAchPaymentPlaid failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'CreateAchPaymentPlaid'", e);
                    }
                    // deserialize CreateBookPayment
                    try {
                      // validate the JSON object to see if any exception is thrown
                      CreateBookPayment.validateJsonElement(jsonElement);
                      actualAdapter = adapterCreateBookPayment;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'CreateBookPayment'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for CreateBookPayment failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'CreateBookPayment'", e);
                    }
                    // deserialize CreateWirePayment
                    try {
                      // validate the JSON object to see if any exception is thrown
                      CreateWirePayment.validateJsonElement(jsonElement);
                      actualAdapter = adapterCreateWirePayment;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'CreateWirePayment'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for CreateWirePayment failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'CreateWirePayment'", e);
                    }
                    // deserialize CreateBillPayment
                    try {
                      // validate the JSON object to see if any exception is thrown
                      CreateBillPayment.validateJsonElement(jsonElement);
                      actualAdapter = adapterCreateBillPayment;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'CreateBillPayment'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for CreateBillPayment failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'CreateBillPayment'", e);
                    }
                    // deserialize CreatePushToCardPayment
                    try {
                      // validate the JSON object to see if any exception is thrown
                      CreatePushToCardPayment.validateJsonElement(jsonElement);
                      actualAdapter = adapterCreatePushToCardPayment;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'CreatePushToCardPayment'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for CreatePushToCardPayment failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'CreatePushToCardPayment'", e);
                    }

                    if (match == 1) {
                        CreatePayment ret = new CreatePayment();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for CreatePayment: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public CreatePayment() {
        super("oneOf", Boolean.FALSE);
    }

    public CreatePayment(CreateAchPayment o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CreatePayment(CreateAchPaymentCounterparty o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CreatePayment(CreateAchPaymentPlaid o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CreatePayment(CreateBillPayment o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CreatePayment(CreateBookPayment o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CreatePayment(CreatePushToCardPayment o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CreatePayment(CreateWirePayment o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("CreateAchPayment", CreateAchPayment.class);
        schemas.put("CreateAchPaymentCounterparty", CreateAchPaymentCounterparty.class);
        schemas.put("CreateAchPaymentPlaid", CreateAchPaymentPlaid.class);
        schemas.put("CreateBookPayment", CreateBookPayment.class);
        schemas.put("CreateWirePayment", CreateWirePayment.class);
        schemas.put("CreateBillPayment", CreateBillPayment.class);
        schemas.put("CreatePushToCardPayment", CreatePushToCardPayment.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return CreatePayment.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * CreateAchPayment, CreateAchPaymentCounterparty, CreateAchPaymentPlaid, CreateBillPayment, CreateBookPayment, CreatePushToCardPayment, CreateWirePayment
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof CreateAchPayment) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CreateAchPaymentCounterparty) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CreateAchPaymentPlaid) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CreateBookPayment) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CreateWirePayment) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CreateBillPayment) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CreatePushToCardPayment) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be CreateAchPayment, CreateAchPaymentCounterparty, CreateAchPaymentPlaid, CreateBillPayment, CreateBookPayment, CreatePushToCardPayment, CreateWirePayment");
    }

    /**
     * Get the actual instance, which can be the following:
     * CreateAchPayment, CreateAchPaymentCounterparty, CreateAchPaymentPlaid, CreateBillPayment, CreateBookPayment, CreatePushToCardPayment, CreateWirePayment
     *
     * @return The actual instance (CreateAchPayment, CreateAchPaymentCounterparty, CreateAchPaymentPlaid, CreateBillPayment, CreateBookPayment, CreatePushToCardPayment, CreateWirePayment)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `CreateAchPayment`. If the actual instance is not `CreateAchPayment`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CreateAchPayment`
     * @throws ClassCastException if the instance is not `CreateAchPayment`
     */
    public CreateAchPayment getCreateAchPayment() throws ClassCastException {
        return (CreateAchPayment)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CreateAchPaymentCounterparty`. If the actual instance is not `CreateAchPaymentCounterparty`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CreateAchPaymentCounterparty`
     * @throws ClassCastException if the instance is not `CreateAchPaymentCounterparty`
     */
    public CreateAchPaymentCounterparty getCreateAchPaymentCounterparty() throws ClassCastException {
        return (CreateAchPaymentCounterparty)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CreateAchPaymentPlaid`. If the actual instance is not `CreateAchPaymentPlaid`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CreateAchPaymentPlaid`
     * @throws ClassCastException if the instance is not `CreateAchPaymentPlaid`
     */
    public CreateAchPaymentPlaid getCreateAchPaymentPlaid() throws ClassCastException {
        return (CreateAchPaymentPlaid)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CreateBookPayment`. If the actual instance is not `CreateBookPayment`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CreateBookPayment`
     * @throws ClassCastException if the instance is not `CreateBookPayment`
     */
    public CreateBookPayment getCreateBookPayment() throws ClassCastException {
        return (CreateBookPayment)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CreateWirePayment`. If the actual instance is not `CreateWirePayment`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CreateWirePayment`
     * @throws ClassCastException if the instance is not `CreateWirePayment`
     */
    public CreateWirePayment getCreateWirePayment() throws ClassCastException {
        return (CreateWirePayment)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CreateBillPayment`. If the actual instance is not `CreateBillPayment`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CreateBillPayment`
     * @throws ClassCastException if the instance is not `CreateBillPayment`
     */
    public CreateBillPayment getCreateBillPayment() throws ClassCastException {
        return (CreateBillPayment)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CreatePushToCardPayment`. If the actual instance is not `CreatePushToCardPayment`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CreatePushToCardPayment`
     * @throws ClassCastException if the instance is not `CreatePushToCardPayment`
     */
    public CreatePushToCardPayment getCreatePushToCardPayment() throws ClassCastException {
        return (CreatePushToCardPayment)super.getActualInstance();
    }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CreatePayment
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with CreateAchPayment
    try {
      CreateAchPayment.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CreateAchPayment failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CreateAchPaymentCounterparty
    try {
      CreateAchPaymentCounterparty.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CreateAchPaymentCounterparty failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CreateAchPaymentPlaid
    try {
      CreateAchPaymentPlaid.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CreateAchPaymentPlaid failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CreateBookPayment
    try {
      CreateBookPayment.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CreateBookPayment failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CreateWirePayment
    try {
      CreateWirePayment.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CreateWirePayment failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CreateBillPayment
    try {
      CreateBillPayment.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CreateBillPayment failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CreatePushToCardPayment
    try {
      CreatePushToCardPayment.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CreatePushToCardPayment failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for CreatePayment with oneOf schemas: CreateAchPayment, CreateAchPaymentCounterparty, CreateAchPaymentPlaid, CreateBillPayment, CreateBookPayment, CreatePushToCardPayment, CreateWirePayment. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
    }
  }

 /**
  * Create an instance of CreatePayment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreatePayment
  * @throws IOException if the JSON string is invalid with respect to CreatePayment
  */
  public static CreatePayment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreatePayment.class);
  }

 /**
  * Convert an instance of CreatePayment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

