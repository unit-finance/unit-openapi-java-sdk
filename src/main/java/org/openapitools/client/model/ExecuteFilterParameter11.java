/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.*;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.stream.Collectors;
import org.openapitools.client.Pair;
import org.openapitools.client.JSON;

/**
 * ExecuteFilterParameter11
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ExecuteFilterParameter11 {
  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_REWARDED_TRANSACTION_ID = "rewardedTransactionId";
  @SerializedName(SERIALIZED_NAME_REWARDED_TRANSACTION_ID)
  private String rewardedTransactionId;

  public static final String SERIALIZED_NAME_RECEIVING_ACCOUNT_ID = "receivingAccountId";
  @SerializedName(SERIALIZED_NAME_RECEIVING_ACCOUNT_ID)
  private String receivingAccountId;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_CARD_ID = "cardId";
  @SerializedName(SERIALIZED_NAME_CARD_ID)
  private String cardId;

  public static final String SERIALIZED_NAME_SINCE = "since";
  @SerializedName(SERIALIZED_NAME_SINCE)
  private String since;

  public static final String SERIALIZED_NAME_UNTIL = "until";
  @SerializedName(SERIALIZED_NAME_UNTIL)
  private String until;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public ExecuteFilterParameter11() {
  }

  public ExecuteFilterParameter11 transactionId(String transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * Get transactionId
   * @return transactionId
  **/
  @javax.annotation.Nullable
  public String getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public ExecuteFilterParameter11 rewardedTransactionId(String rewardedTransactionId) {
    
    this.rewardedTransactionId = rewardedTransactionId;
    return this;
  }

   /**
   * Get rewardedTransactionId
   * @return rewardedTransactionId
  **/
  @javax.annotation.Nullable
  public String getRewardedTransactionId() {
    return rewardedTransactionId;
  }


  public void setRewardedTransactionId(String rewardedTransactionId) {
    this.rewardedTransactionId = rewardedTransactionId;
  }


  public ExecuteFilterParameter11 receivingAccountId(String receivingAccountId) {
    
    this.receivingAccountId = receivingAccountId;
    return this;
  }

   /**
   * Get receivingAccountId
   * @return receivingAccountId
  **/
  @javax.annotation.Nullable
  public String getReceivingAccountId() {
    return receivingAccountId;
  }


  public void setReceivingAccountId(String receivingAccountId) {
    this.receivingAccountId = receivingAccountId;
  }


  public ExecuteFilterParameter11 customerId(String customerId) {
    
    this.customerId = customerId;
    return this;
  }

   /**
   * Get customerId
   * @return customerId
  **/
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }


  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public ExecuteFilterParameter11 cardId(String cardId) {
    
    this.cardId = cardId;
    return this;
  }

   /**
   * Get cardId
   * @return cardId
  **/
  @javax.annotation.Nullable
  public String getCardId() {
    return cardId;
  }


  public void setCardId(String cardId) {
    this.cardId = cardId;
  }


  public ExecuteFilterParameter11 since(String since) {
    
    this.since = since;
    return this;
  }

   /**
   * Get since
   * @return since
  **/
  @javax.annotation.Nullable
  public String getSince() {
    return since;
  }


  public void setSince(String since) {
    this.since = since;
  }


  public ExecuteFilterParameter11 until(String until) {
    
    this.until = until;
    return this;
  }

   /**
   * Get until
   * @return until
  **/
  @javax.annotation.Nullable
  public String getUntil() {
    return until;
  }


  public void setUntil(String until) {
    this.until = until;
  }


  public ExecuteFilterParameter11 status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public ExecuteFilterParameter11 tags(Map<String, String> tags) {
    
    this.tags = tags;
    return this;
  }

  public ExecuteFilterParameter11 putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }


  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecuteFilterParameter11 executeFilterParameter11 = (ExecuteFilterParameter11) o;
    return Objects.equals(this.transactionId, executeFilterParameter11.transactionId) &&
        Objects.equals(this.rewardedTransactionId, executeFilterParameter11.rewardedTransactionId) &&
        Objects.equals(this.receivingAccountId, executeFilterParameter11.receivingAccountId) &&
        Objects.equals(this.customerId, executeFilterParameter11.customerId) &&
        Objects.equals(this.cardId, executeFilterParameter11.cardId) &&
        Objects.equals(this.since, executeFilterParameter11.since) &&
        Objects.equals(this.until, executeFilterParameter11.until) &&
        Objects.equals(this.status, executeFilterParameter11.status) &&
        Objects.equals(this.tags, executeFilterParameter11.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionId, rewardedTransactionId, receivingAccountId, customerId, cardId, since, until, status, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExecuteFilterParameter11 {\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    rewardedTransactionId: ").append(toIndentedString(rewardedTransactionId)).append("\n");
    sb.append("    receivingAccountId: ").append(toIndentedString(receivingAccountId)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    cardId: ").append(toIndentedString(cardId)).append("\n");
    sb.append("    since: ").append(toIndentedString(since)).append("\n");
    sb.append("    until: ").append(toIndentedString(until)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transactionId");
    openapiFields.add("rewardedTransactionId");
    openapiFields.add("receivingAccountId");
    openapiFields.add("customerId");
    openapiFields.add("cardId");
    openapiFields.add("since");
    openapiFields.add("until");
    openapiFields.add("status");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ExecuteFilterParameter11
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExecuteFilterParameter11.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExecuteFilterParameter11 is not found in the empty JSON string", ExecuteFilterParameter11.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExecuteFilterParameter11.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExecuteFilterParameter11` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("transactionId") != null && !jsonObj.get("transactionId").isJsonNull()) && !jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      if ((jsonObj.get("rewardedTransactionId") != null && !jsonObj.get("rewardedTransactionId").isJsonNull()) && !jsonObj.get("rewardedTransactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rewardedTransactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rewardedTransactionId").toString()));
      }
      if ((jsonObj.get("receivingAccountId") != null && !jsonObj.get("receivingAccountId").isJsonNull()) && !jsonObj.get("receivingAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receivingAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receivingAccountId").toString()));
      }
      if ((jsonObj.get("customerId") != null && !jsonObj.get("customerId").isJsonNull()) && !jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      if ((jsonObj.get("cardId") != null && !jsonObj.get("cardId").isJsonNull()) && !jsonObj.get("cardId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardId").toString()));
      }
      if ((jsonObj.get("since") != null && !jsonObj.get("since").isJsonNull()) && !jsonObj.get("since").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `since` to be a primitive type in the JSON string but got `%s`", jsonObj.get("since").toString()));
      }
      if ((jsonObj.get("until") != null && !jsonObj.get("until").isJsonNull()) && !jsonObj.get("until").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `until` to be a primitive type in the JSON string but got `%s`", jsonObj.get("until").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExecuteFilterParameter11.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExecuteFilterParameter11' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExecuteFilterParameter11> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExecuteFilterParameter11.class));

       return (TypeAdapter<T>) new TypeAdapter<ExecuteFilterParameter11>() {
           @Override
           public void write(JsonWriter out, ExecuteFilterParameter11 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExecuteFilterParameter11 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExecuteFilterParameter11 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExecuteFilterParameter11
  * @throws IOException if the JSON string is invalid with respect to ExecuteFilterParameter11
  */
  public static ExecuteFilterParameter11 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExecuteFilterParameter11.class);
  }

 /**
  * Convert an instance of ExecuteFilterParameter11 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }

  public List<Pair> toParams(){
        List<Pair> params = new ArrayList<>();

        if(this.cardId != null){
            params.add(new Pair("filter[cardId]", this.cardId));
        }

        if(this.customerId != null){
            params.add(new Pair("filter[customerId]", this.customerId));
        }

        if(this.transactionId != null){
            params.add(new Pair("filter[transactionId]", this.transactionId));
        }

        if(this.since != null){
            params.add(new Pair("filter[since]", this.since));
        }

        if(this.until != null){
            params.add(new Pair("filter[until]", this.until));
        }

        if(this.status != null){
            params.add(new Pair("filter[status]", this.status));
        }

        if(this.receivingAccountId != null){
            params.add(new Pair("filter[receivingAccountId]", this.receivingAccountId));
        }

        if(this.rewardedTransactionId != null){
            params.add(new Pair("filter[rewardedTransactionId]", this.rewardedTransactionId));
        }

        if(this.tags != null){
            String tagsAsString = this.tags.keySet().stream()
                    .map(key -> key + ":" + this.tags.get(key))
                    .collect(Collectors.joining(", ", "{", "}"));
            params.add(new Pair("filter[tags]", tagsAsString));
        }

        return params;
    }
}

