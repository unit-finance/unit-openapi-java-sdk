/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;
import org.openapitools.client.Pair;

/**
 * ExecuteFilterParameter6
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ExecuteFilterParameter6 {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private List<String> status;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    RECURRINGCREDITACHPAYMENT("recurringCreditAchPayment"),
    
    RECURRINGDEBITACHPAYMENT("recurringDebitAchPayment"),
    
    RECURRINGCREDITBOOKPAYMENT("recurringCreditBookPayment");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private List<TypeEnum> type;

  public static final String SERIALIZED_NAME_FROM_START_TIME = "fromStartTime";
  @SerializedName(SERIALIZED_NAME_FROM_START_TIME)
  private String fromStartTime;

  public static final String SERIALIZED_NAME_TO_START_TIME = "toStartTime";
  @SerializedName(SERIALIZED_NAME_TO_START_TIME)
  private String toStartTime;

  public static final String SERIALIZED_NAME_FROM_END_TIME = "fromEndTime";
  @SerializedName(SERIALIZED_NAME_FROM_END_TIME)
  private String fromEndTime;

  public static final String SERIALIZED_NAME_TO_END_TIME = "toEndTime";
  @SerializedName(SERIALIZED_NAME_TO_END_TIME)
  private String toEndTime;

  public ExecuteFilterParameter6() {
  }

  public ExecuteFilterParameter6 accountId(String accountId) {
    
    this.accountId = accountId;
    return this;
  }

   /**
   * Get accountId
   * @return accountId
  **/
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }


  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public ExecuteFilterParameter6 customerId(String customerId) {
    
    this.customerId = customerId;
    return this;
  }

   /**
   * Get customerId
   * @return customerId
  **/
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }


  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public ExecuteFilterParameter6 status(List<String> status) {
    
    this.status = status;
    return this;
  }

  public ExecuteFilterParameter6 addStatusItem(String statusItem) {
    if (this.status == null) {
      this.status = new ArrayList<>();
    }
    this.status.add(statusItem);
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public List<String> getStatus() {
    return status;
  }


  public void setStatus(List<String> status) {
    this.status = status;
  }


  public ExecuteFilterParameter6 type(List<TypeEnum> type) {
    
    this.type = type;
    return this;
  }

  public ExecuteFilterParameter6 addTypeItem(TypeEnum typeItem) {
    if (this.type == null) {
      this.type = new ArrayList<>();
    }
    this.type.add(typeItem);
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public List<TypeEnum> getType() {
    return type;
  }


  public void setType(List<TypeEnum> type) {
    this.type = type;
  }


  public ExecuteFilterParameter6 fromStartTime(String fromStartTime) {
    
    this.fromStartTime = fromStartTime;
    return this;
  }

   /**
   * Get fromStartTime
   * @return fromStartTime
  **/
  @javax.annotation.Nullable
  public String getFromStartTime() {
    return fromStartTime;
  }


  public void setFromStartTime(String fromStartTime) {
    this.fromStartTime = fromStartTime;
  }


  public ExecuteFilterParameter6 toStartTime(String toStartTime) {
    
    this.toStartTime = toStartTime;
    return this;
  }

   /**
   * Get toStartTime
   * @return toStartTime
  **/
  @javax.annotation.Nullable
  public String getToStartTime() {
    return toStartTime;
  }


  public void setToStartTime(String toStartTime) {
    this.toStartTime = toStartTime;
  }


  public ExecuteFilterParameter6 fromEndTime(String fromEndTime) {
    
    this.fromEndTime = fromEndTime;
    return this;
  }

   /**
   * Get fromEndTime
   * @return fromEndTime
  **/
  @javax.annotation.Nullable
  public String getFromEndTime() {
    return fromEndTime;
  }


  public void setFromEndTime(String fromEndTime) {
    this.fromEndTime = fromEndTime;
  }


  public ExecuteFilterParameter6 toEndTime(String toEndTime) {
    
    this.toEndTime = toEndTime;
    return this;
  }

   /**
   * Get toEndTime
   * @return toEndTime
  **/
  @javax.annotation.Nullable
  public String getToEndTime() {
    return toEndTime;
  }


  public void setToEndTime(String toEndTime) {
    this.toEndTime = toEndTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecuteFilterParameter6 executeFilterParameter6 = (ExecuteFilterParameter6) o;
    return Objects.equals(this.accountId, executeFilterParameter6.accountId) &&
        Objects.equals(this.customerId, executeFilterParameter6.customerId) &&
        Objects.equals(this.status, executeFilterParameter6.status) &&
        Objects.equals(this.type, executeFilterParameter6.type) &&
        Objects.equals(this.fromStartTime, executeFilterParameter6.fromStartTime) &&
        Objects.equals(this.toStartTime, executeFilterParameter6.toStartTime) &&
        Objects.equals(this.fromEndTime, executeFilterParameter6.fromEndTime) &&
        Objects.equals(this.toEndTime, executeFilterParameter6.toEndTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, customerId, status, type, fromStartTime, toStartTime, fromEndTime, toEndTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExecuteFilterParameter6 {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    fromStartTime: ").append(toIndentedString(fromStartTime)).append("\n");
    sb.append("    toStartTime: ").append(toIndentedString(toStartTime)).append("\n");
    sb.append("    fromEndTime: ").append(toIndentedString(fromEndTime)).append("\n");
    sb.append("    toEndTime: ").append(toIndentedString(toEndTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("customerId");
    openapiFields.add("status");
    openapiFields.add("type");
    openapiFields.add("fromStartTime");
    openapiFields.add("toStartTime");
    openapiFields.add("fromEndTime");
    openapiFields.add("toEndTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ExecuteFilterParameter6
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExecuteFilterParameter6.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExecuteFilterParameter6 is not found in the empty JSON string", ExecuteFilterParameter6.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExecuteFilterParameter6.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExecuteFilterParameter6` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("customerId") != null && !jsonObj.get("customerId").isJsonNull()) && !jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull() && !jsonObj.get("status").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be an array in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull() && !jsonObj.get("type").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be an array in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("fromStartTime") != null && !jsonObj.get("fromStartTime").isJsonNull()) && !jsonObj.get("fromStartTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromStartTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromStartTime").toString()));
      }
      if ((jsonObj.get("toStartTime") != null && !jsonObj.get("toStartTime").isJsonNull()) && !jsonObj.get("toStartTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toStartTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toStartTime").toString()));
      }
      if ((jsonObj.get("fromEndTime") != null && !jsonObj.get("fromEndTime").isJsonNull()) && !jsonObj.get("fromEndTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromEndTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromEndTime").toString()));
      }
      if ((jsonObj.get("toEndTime") != null && !jsonObj.get("toEndTime").isJsonNull()) && !jsonObj.get("toEndTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toEndTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toEndTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExecuteFilterParameter6.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExecuteFilterParameter6' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExecuteFilterParameter6> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExecuteFilterParameter6.class));

       return (TypeAdapter<T>) new TypeAdapter<ExecuteFilterParameter6>() {
           @Override
           public void write(JsonWriter out, ExecuteFilterParameter6 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExecuteFilterParameter6 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExecuteFilterParameter6 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExecuteFilterParameter6
  * @throws IOException if the JSON string is invalid with respect to ExecuteFilterParameter6
  */
  public static ExecuteFilterParameter6 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExecuteFilterParameter6.class);
  }

 /**
  * Convert an instance of ExecuteFilterParameter6 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }

  public List<Pair> toParams() {
    List<Pair> params = new ArrayList<>();

    if (this.accountId != null) {
      params.add(new Pair("filter[accountId]", this.accountId));
    }

    if (this.customerId != null) {
      params.add(new Pair("filter[customerId]", this.customerId));
    }

    if (this.fromEndTime != null) {
      params.add(new Pair("filter[fromEndTime]", this.fromEndTime));
    }

    if (this.toEndTime != null) {
      params.add(new Pair("filter[toEndTime]", this.toEndTime));
    }

    if (this.fromStartTime != null) {
      params.add(new Pair("filter[fromStartTime]", this.fromStartTime));
    }

    if (this.toStartTime != null) {
      params.add(new Pair("filter[toStartTime]", this.toStartTime));
    }

    if (this.type != null) {
      int i = 0;
      for (TypeEnum t : this.type) {
        params.add(new Pair(String.format("filter[type][%s]", i), t.getValue()));
        i++;
      }
    }

    if (this.status != null) {
      int i = 0;
      for (String s : this.status) {
        params.add(new Pair(String.format("filter[status][%s]", i), s));
        i++;
      }
    }

    return params;
  }
}

