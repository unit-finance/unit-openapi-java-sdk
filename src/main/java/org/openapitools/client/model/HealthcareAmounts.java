/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HealthcareAmounts
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class HealthcareAmounts {
  public static final String SERIALIZED_NAME_TRANSIT_AMOUNT = "transitAmount";
  @SerializedName(SERIALIZED_NAME_TRANSIT_AMOUNT)
  private Integer transitAmount;

  public static final String SERIALIZED_NAME_PRESCRIPTION_R_X_AMOUNT = "prescriptionRXAmount";
  @SerializedName(SERIALIZED_NAME_PRESCRIPTION_R_X_AMOUNT)
  private Integer prescriptionRXAmount;

  public static final String SERIALIZED_NAME_VISION_OPTICAL_AMOUNT = "visionOpticalAmount";
  @SerializedName(SERIALIZED_NAME_VISION_OPTICAL_AMOUNT)
  private Integer visionOpticalAmount;

  public static final String SERIALIZED_NAME_CLINIC_OTHER_QUALIFIED_MEDICAL_AMOUNT = "clinicOtherQualifiedMedicalAmount";
  @SerializedName(SERIALIZED_NAME_CLINIC_OTHER_QUALIFIED_MEDICAL_AMOUNT)
  private Integer clinicOtherQualifiedMedicalAmount;

  public static final String SERIALIZED_NAME_DENTAL_AMOUNT = "dentalAmount";
  @SerializedName(SERIALIZED_NAME_DENTAL_AMOUNT)
  private Integer dentalAmount;

  public static final String SERIALIZED_NAME_TOTAL_HEALTHCARE_AMOUNT = "totalHealthcareAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_HEALTHCARE_AMOUNT)
  private Integer totalHealthcareAmount;

  public HealthcareAmounts() {
  }

  public HealthcareAmounts transitAmount(Integer transitAmount) {
    
    this.transitAmount = transitAmount;
    return this;
  }

   /**
   * Get transitAmount
   * @return transitAmount
  **/
  @javax.annotation.Nonnull
  public Integer getTransitAmount() {
    return transitAmount;
  }


  public void setTransitAmount(Integer transitAmount) {
    this.transitAmount = transitAmount;
  }


  public HealthcareAmounts prescriptionRXAmount(Integer prescriptionRXAmount) {
    
    this.prescriptionRXAmount = prescriptionRXAmount;
    return this;
  }

   /**
   * Get prescriptionRXAmount
   * @return prescriptionRXAmount
  **/
  @javax.annotation.Nonnull
  public Integer getPrescriptionRXAmount() {
    return prescriptionRXAmount;
  }


  public void setPrescriptionRXAmount(Integer prescriptionRXAmount) {
    this.prescriptionRXAmount = prescriptionRXAmount;
  }


  public HealthcareAmounts visionOpticalAmount(Integer visionOpticalAmount) {
    
    this.visionOpticalAmount = visionOpticalAmount;
    return this;
  }

   /**
   * Get visionOpticalAmount
   * @return visionOpticalAmount
  **/
  @javax.annotation.Nonnull
  public Integer getVisionOpticalAmount() {
    return visionOpticalAmount;
  }


  public void setVisionOpticalAmount(Integer visionOpticalAmount) {
    this.visionOpticalAmount = visionOpticalAmount;
  }


  public HealthcareAmounts clinicOtherQualifiedMedicalAmount(Integer clinicOtherQualifiedMedicalAmount) {
    
    this.clinicOtherQualifiedMedicalAmount = clinicOtherQualifiedMedicalAmount;
    return this;
  }

   /**
   * Get clinicOtherQualifiedMedicalAmount
   * @return clinicOtherQualifiedMedicalAmount
  **/
  @javax.annotation.Nonnull
  public Integer getClinicOtherQualifiedMedicalAmount() {
    return clinicOtherQualifiedMedicalAmount;
  }


  public void setClinicOtherQualifiedMedicalAmount(Integer clinicOtherQualifiedMedicalAmount) {
    this.clinicOtherQualifiedMedicalAmount = clinicOtherQualifiedMedicalAmount;
  }


  public HealthcareAmounts dentalAmount(Integer dentalAmount) {
    
    this.dentalAmount = dentalAmount;
    return this;
  }

   /**
   * Get dentalAmount
   * @return dentalAmount
  **/
  @javax.annotation.Nonnull
  public Integer getDentalAmount() {
    return dentalAmount;
  }


  public void setDentalAmount(Integer dentalAmount) {
    this.dentalAmount = dentalAmount;
  }


  public HealthcareAmounts totalHealthcareAmount(Integer totalHealthcareAmount) {
    
    this.totalHealthcareAmount = totalHealthcareAmount;
    return this;
  }

   /**
   * Get totalHealthcareAmount
   * @return totalHealthcareAmount
  **/
  @javax.annotation.Nonnull
  public Integer getTotalHealthcareAmount() {
    return totalHealthcareAmount;
  }


  public void setTotalHealthcareAmount(Integer totalHealthcareAmount) {
    this.totalHealthcareAmount = totalHealthcareAmount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HealthcareAmounts healthcareAmounts = (HealthcareAmounts) o;
    return Objects.equals(this.transitAmount, healthcareAmounts.transitAmount) &&
        Objects.equals(this.prescriptionRXAmount, healthcareAmounts.prescriptionRXAmount) &&
        Objects.equals(this.visionOpticalAmount, healthcareAmounts.visionOpticalAmount) &&
        Objects.equals(this.clinicOtherQualifiedMedicalAmount, healthcareAmounts.clinicOtherQualifiedMedicalAmount) &&
        Objects.equals(this.dentalAmount, healthcareAmounts.dentalAmount) &&
        Objects.equals(this.totalHealthcareAmount, healthcareAmounts.totalHealthcareAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transitAmount, prescriptionRXAmount, visionOpticalAmount, clinicOtherQualifiedMedicalAmount, dentalAmount, totalHealthcareAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HealthcareAmounts {\n");
    sb.append("    transitAmount: ").append(toIndentedString(transitAmount)).append("\n");
    sb.append("    prescriptionRXAmount: ").append(toIndentedString(prescriptionRXAmount)).append("\n");
    sb.append("    visionOpticalAmount: ").append(toIndentedString(visionOpticalAmount)).append("\n");
    sb.append("    clinicOtherQualifiedMedicalAmount: ").append(toIndentedString(clinicOtherQualifiedMedicalAmount)).append("\n");
    sb.append("    dentalAmount: ").append(toIndentedString(dentalAmount)).append("\n");
    sb.append("    totalHealthcareAmount: ").append(toIndentedString(totalHealthcareAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transitAmount");
    openapiFields.add("prescriptionRXAmount");
    openapiFields.add("visionOpticalAmount");
    openapiFields.add("clinicOtherQualifiedMedicalAmount");
    openapiFields.add("dentalAmount");
    openapiFields.add("totalHealthcareAmount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("transitAmount");
    openapiRequiredFields.add("prescriptionRXAmount");
    openapiRequiredFields.add("visionOpticalAmount");
    openapiRequiredFields.add("clinicOtherQualifiedMedicalAmount");
    openapiRequiredFields.add("dentalAmount");
    openapiRequiredFields.add("totalHealthcareAmount");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to HealthcareAmounts
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HealthcareAmounts.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HealthcareAmounts is not found in the empty JSON string", HealthcareAmounts.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HealthcareAmounts.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HealthcareAmounts` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HealthcareAmounts.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HealthcareAmounts.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HealthcareAmounts' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HealthcareAmounts> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HealthcareAmounts.class));

       return (TypeAdapter<T>) new TypeAdapter<HealthcareAmounts>() {
           @Override
           public void write(JsonWriter out, HealthcareAmounts value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HealthcareAmounts read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of HealthcareAmounts given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of HealthcareAmounts
  * @throws IOException if the JSON string is invalid with respect to HealthcareAmounts
  */
  public static HealthcareAmounts fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HealthcareAmounts.class);
  }

 /**
  * Convert an instance of HealthcareAmounts to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

