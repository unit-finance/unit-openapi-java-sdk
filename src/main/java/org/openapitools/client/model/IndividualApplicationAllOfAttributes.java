/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AnnualIncome;
import org.openapitools.client.model.ApplicationStatus;
import org.openapitools.client.model.BusinessVertical;
import org.openapitools.client.model.FullName;
import org.openapitools.client.model.Industry;
import org.openapitools.client.model.Occupation;
import org.openapitools.client.model.Phone;
import org.openapitools.client.model.PowerOfAttorneyAgent;
import org.openapitools.client.model.SoleProprietorshipAnnualRevenue;
import org.openapitools.client.model.SoleProprietorshipNumberOfEmployees;
import org.openapitools.client.model.SourceOfIncome;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IndividualApplicationAllOfAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class IndividualApplicationAllOfAttributes {
  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ApplicationStatus status;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_EVALUATION_OUTCOME = "evaluationOutcome";
  @SerializedName(SERIALIZED_NAME_EVALUATION_OUTCOME)
  private String evaluationOutcome;

  public static final String SERIALIZED_NAME_EVALUATION_ID = "evaluationId";
  @SerializedName(SERIALIZED_NAME_EVALUATION_ID)
  private String evaluationId;

  public static final String SERIALIZED_NAME_EVALUATION_ENTITY_ID = "evaluationEntityId";
  @SerializedName(SERIALIZED_NAME_EVALUATION_ENTITY_ID)
  private String evaluationEntityId;

  public static final String SERIALIZED_NAME_FULL_NAME = "fullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private FullName fullName;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private Phone phone;

  public static final String SERIALIZED_NAME_SSN = "ssn";
  @SerializedName(SERIALIZED_NAME_SSN)
  private String ssn;

  public static final String SERIALIZED_NAME_PASSPORT = "passport";
  @SerializedName(SERIALIZED_NAME_PASSPORT)
  private String passport;

  public static final String SERIALIZED_NAME_NATIONALITY = "nationality";
  @SerializedName(SERIALIZED_NAME_NATIONALITY)
  private String nationality;

  public static final String SERIALIZED_NAME_MATRICULA_CONSULAR = "matriculaConsular";
  @SerializedName(SERIALIZED_NAME_MATRICULA_CONSULAR)
  private String matriculaConsular;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Object address;

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "dateOfBirth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private LocalDate dateOfBirth;

  public static final String SERIALIZED_NAME_DBA = "dba";
  @SerializedName(SERIALIZED_NAME_DBA)
  private String dba;

  public static final String SERIALIZED_NAME_EIN = "ein";
  @SerializedName(SERIALIZED_NAME_EIN)
  private String ein;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_SOLE_PROPRIETORSHIP = "soleProprietorship";
  @SerializedName(SERIALIZED_NAME_SOLE_PROPRIETORSHIP)
  private Boolean soleProprietorship;

  /**
   * Gets or Sets decisionMethod
   */
  @JsonAdapter(DecisionMethodEnum.Adapter.class)
  public enum DecisionMethodEnum {
    MANUALLY("Manually"),
    
    AUTOMATICALLY("Automatically");

    private String value;

    DecisionMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DecisionMethodEnum fromValue(String value) {
      for (DecisionMethodEnum b : DecisionMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DecisionMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DecisionMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DecisionMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DecisionMethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DECISION_METHOD = "decisionMethod";
  @SerializedName(SERIALIZED_NAME_DECISION_METHOD)
  private DecisionMethodEnum decisionMethod;

  public static final String SERIALIZED_NAME_DECISION_USER_ID = "decisionUserId";
  @SerializedName(SERIALIZED_NAME_DECISION_USER_ID)
  private String decisionUserId;

  public static final String SERIALIZED_NAME_DECISION_REASON = "decisionReason";
  @SerializedName(SERIALIZED_NAME_DECISION_REASON)
  private String decisionReason;

  public static final String SERIALIZED_NAME_DECISION_DATE_TIME = "decisionDateTime";
  @SerializedName(SERIALIZED_NAME_DECISION_DATE_TIME)
  private OffsetDateTime decisionDateTime;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Object tags;

  /**
   * Gets or Sets riskRate
   */
  @JsonAdapter(RiskRateEnum.Adapter.class)
  public enum RiskRateEnum {
    LOW("low"),
    
    MEDIUM("medium"),
    
    HIGH("high");

    private String value;

    RiskRateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RiskRateEnum fromValue(String value) {
      for (RiskRateEnum b : RiskRateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RiskRateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RiskRateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RiskRateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RiskRateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RISK_RATE = "riskRate";
  @SerializedName(SERIALIZED_NAME_RISK_RATE)
  private RiskRateEnum riskRate;

  public static final String SERIALIZED_NAME_EVALUATION_FLAGS = "evaluationFlags";
  @SerializedName(SERIALIZED_NAME_EVALUATION_FLAGS)
  private List<String> evaluationFlags;

  public static final String SERIALIZED_NAME_EVALUATION_SCORES = "evaluationScores";
  @SerializedName(SERIALIZED_NAME_EVALUATION_SCORES)
  private Object evaluationScores;

  public static final String SERIALIZED_NAME_IP_LOCATION_DETAILS = "ipLocationDetails";
  @SerializedName(SERIALIZED_NAME_IP_LOCATION_DETAILS)
  private Object ipLocationDetails;

  public static final String SERIALIZED_NAME_PHONE_LOCATION_DETAILS = "phoneLocationDetails";
  @SerializedName(SERIALIZED_NAME_PHONE_LOCATION_DETAILS)
  private Object phoneLocationDetails;

  public static final String SERIALIZED_NAME_MASKED_S_S_N = "maskedSSN";
  @SerializedName(SERIALIZED_NAME_MASKED_S_S_N)
  private String maskedSSN;

  public static final String SERIALIZED_NAME_MASKED_PASSPORT = "maskedPassport";
  @SerializedName(SERIALIZED_NAME_MASKED_PASSPORT)
  private String maskedPassport;

  public static final String SERIALIZED_NAME_MASKED_MATRICULA_CONSULAR = "maskedMatriculaConsular";
  @SerializedName(SERIALIZED_NAME_MASKED_MATRICULA_CONSULAR)
  private String maskedMatriculaConsular;

  public static final String SERIALIZED_NAME_JWT_SUBJECT = "jwtSubject";
  @SerializedName(SERIALIZED_NAME_JWT_SUBJECT)
  private String jwtSubject;

  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived;

  public static final String SERIALIZED_NAME_POWER_OF_ATTORNEY_AGENT = "powerOfAttorneyAgent";
  @SerializedName(SERIALIZED_NAME_POWER_OF_ATTORNEY_AGENT)
  private PowerOfAttorneyAgent powerOfAttorneyAgent;

  public static final String SERIALIZED_NAME_INDUSTRY = "industry";
  @SerializedName(SERIALIZED_NAME_INDUSTRY)
  private Industry industry;

  public static final String SERIALIZED_NAME_ID_THEFT_SCORE = "idTheftScore";
  @SerializedName(SERIALIZED_NAME_ID_THEFT_SCORE)
  private Integer idTheftScore;

  public static final String SERIALIZED_NAME_OCCUPATION = "occupation";
  @SerializedName(SERIALIZED_NAME_OCCUPATION)
  private Occupation occupation;

  public static final String SERIALIZED_NAME_ANNUAL_INCOME = "annualIncome";
  @SerializedName(SERIALIZED_NAME_ANNUAL_INCOME)
  private AnnualIncome annualIncome;

  public static final String SERIALIZED_NAME_SOURCE_OF_INCOME = "sourceOfIncome";
  @SerializedName(SERIALIZED_NAME_SOURCE_OF_INCOME)
  private SourceOfIncome sourceOfIncome;

  public static final String SERIALIZED_NAME_ANNUAL_REVENUE = "annualRevenue";
  @SerializedName(SERIALIZED_NAME_ANNUAL_REVENUE)
  private SoleProprietorshipAnnualRevenue annualRevenue;

  public static final String SERIALIZED_NAME_NUMBER_OF_EMPLOYEES = "numberOfEmployees";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_EMPLOYEES)
  private SoleProprietorshipNumberOfEmployees numberOfEmployees;

  public static final String SERIALIZED_NAME_BUSINESS_VERTICAL = "businessVertical";
  @SerializedName(SERIALIZED_NAME_BUSINESS_VERTICAL)
  private BusinessVertical businessVertical;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public IndividualApplicationAllOfAttributes() {
  }

  public IndividualApplicationAllOfAttributes createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public IndividualApplicationAllOfAttributes updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public IndividualApplicationAllOfAttributes status(ApplicationStatus status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  public ApplicationStatus getStatus() {
    return status;
  }


  public void setStatus(ApplicationStatus status) {
    this.status = status;
  }


  public IndividualApplicationAllOfAttributes message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }


  public IndividualApplicationAllOfAttributes evaluationOutcome(String evaluationOutcome) {
    
    this.evaluationOutcome = evaluationOutcome;
    return this;
  }

   /**
   * Get evaluationOutcome
   * @return evaluationOutcome
  **/
  @javax.annotation.Nullable
  public String getEvaluationOutcome() {
    return evaluationOutcome;
  }


  public void setEvaluationOutcome(String evaluationOutcome) {
    this.evaluationOutcome = evaluationOutcome;
  }


  public IndividualApplicationAllOfAttributes evaluationId(String evaluationId) {
    
    this.evaluationId = evaluationId;
    return this;
  }

   /**
   * Get evaluationId
   * @return evaluationId
  **/
  @javax.annotation.Nullable
  public String getEvaluationId() {
    return evaluationId;
  }


  public void setEvaluationId(String evaluationId) {
    this.evaluationId = evaluationId;
  }


  public IndividualApplicationAllOfAttributes evaluationEntityId(String evaluationEntityId) {
    
    this.evaluationEntityId = evaluationEntityId;
    return this;
  }

   /**
   * Get evaluationEntityId
   * @return evaluationEntityId
  **/
  @javax.annotation.Nullable
  public String getEvaluationEntityId() {
    return evaluationEntityId;
  }


  public void setEvaluationEntityId(String evaluationEntityId) {
    this.evaluationEntityId = evaluationEntityId;
  }


  public IndividualApplicationAllOfAttributes fullName(FullName fullName) {
    
    this.fullName = fullName;
    return this;
  }

   /**
   * Get fullName
   * @return fullName
  **/
  @javax.annotation.Nonnull
  public FullName getFullName() {
    return fullName;
  }


  public void setFullName(FullName fullName) {
    this.fullName = fullName;
  }


  public IndividualApplicationAllOfAttributes email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public IndividualApplicationAllOfAttributes phone(Phone phone) {
    
    this.phone = phone;
    return this;
  }

   /**
   * Get phone
   * @return phone
  **/
  @javax.annotation.Nullable
  public Phone getPhone() {
    return phone;
  }


  public void setPhone(Phone phone) {
    this.phone = phone;
  }


  public IndividualApplicationAllOfAttributes ssn(String ssn) {
    
    this.ssn = ssn;
    return this;
  }

   /**
   * Get ssn
   * @return ssn
  **/
  @javax.annotation.Nullable
  public String getSsn() {
    return ssn;
  }


  public void setSsn(String ssn) {
    this.ssn = ssn;
  }


  public IndividualApplicationAllOfAttributes passport(String passport) {
    
    this.passport = passport;
    return this;
  }

   /**
   * Get passport
   * @return passport
  **/
  @javax.annotation.Nullable
  public String getPassport() {
    return passport;
  }


  public void setPassport(String passport) {
    this.passport = passport;
  }


  public IndividualApplicationAllOfAttributes nationality(String nationality) {
    
    this.nationality = nationality;
    return this;
  }

   /**
   * Get nationality
   * @return nationality
  **/
  @javax.annotation.Nullable
  public String getNationality() {
    return nationality;
  }


  public void setNationality(String nationality) {
    this.nationality = nationality;
  }


  public IndividualApplicationAllOfAttributes matriculaConsular(String matriculaConsular) {
    
    this.matriculaConsular = matriculaConsular;
    return this;
  }

   /**
   * Get matriculaConsular
   * @return matriculaConsular
  **/
  @javax.annotation.Nullable
  public String getMatriculaConsular() {
    return matriculaConsular;
  }


  public void setMatriculaConsular(String matriculaConsular) {
    this.matriculaConsular = matriculaConsular;
  }


  public IndividualApplicationAllOfAttributes address(Object address) {
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  public Object getAddress() {
    return address;
  }


  public void setAddress(Object address) {
    this.address = address;
  }


  public IndividualApplicationAllOfAttributes dateOfBirth(LocalDate dateOfBirth) {
    
    this.dateOfBirth = dateOfBirth;
    return this;
  }

   /**
   * Get dateOfBirth
   * @return dateOfBirth
  **/
  @javax.annotation.Nullable
  public LocalDate getDateOfBirth() {
    return dateOfBirth;
  }


  public void setDateOfBirth(LocalDate dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
  }


  public IndividualApplicationAllOfAttributes dba(String dba) {
    
    this.dba = dba;
    return this;
  }

   /**
   * Get dba
   * @return dba
  **/
  @javax.annotation.Nullable
  public String getDba() {
    return dba;
  }


  public void setDba(String dba) {
    this.dba = dba;
  }


  public IndividualApplicationAllOfAttributes ein(String ein) {
    
    this.ein = ein;
    return this;
  }

   /**
   * Get ein
   * @return ein
  **/
  @javax.annotation.Nullable
  public String getEin() {
    return ein;
  }


  public void setEin(String ein) {
    this.ein = ein;
  }


  public IndividualApplicationAllOfAttributes ip(String ip) {
    
    this.ip = ip;
    return this;
  }

   /**
   * Get ip
   * @return ip
  **/
  @javax.annotation.Nullable
  public String getIp() {
    return ip;
  }


  public void setIp(String ip) {
    this.ip = ip;
  }


  public IndividualApplicationAllOfAttributes soleProprietorship(Boolean soleProprietorship) {
    
    this.soleProprietorship = soleProprietorship;
    return this;
  }

   /**
   * Get soleProprietorship
   * @return soleProprietorship
  **/
  @javax.annotation.Nullable
  public Boolean getSoleProprietorship() {
    return soleProprietorship;
  }


  public void setSoleProprietorship(Boolean soleProprietorship) {
    this.soleProprietorship = soleProprietorship;
  }


  public IndividualApplicationAllOfAttributes decisionMethod(DecisionMethodEnum decisionMethod) {
    
    this.decisionMethod = decisionMethod;
    return this;
  }

   /**
   * Get decisionMethod
   * @return decisionMethod
  **/
  @javax.annotation.Nullable
  public DecisionMethodEnum getDecisionMethod() {
    return decisionMethod;
  }


  public void setDecisionMethod(DecisionMethodEnum decisionMethod) {
    this.decisionMethod = decisionMethod;
  }


  public IndividualApplicationAllOfAttributes decisionUserId(String decisionUserId) {
    
    this.decisionUserId = decisionUserId;
    return this;
  }

   /**
   * Get decisionUserId
   * @return decisionUserId
  **/
  @javax.annotation.Nullable
  public String getDecisionUserId() {
    return decisionUserId;
  }


  public void setDecisionUserId(String decisionUserId) {
    this.decisionUserId = decisionUserId;
  }


  public IndividualApplicationAllOfAttributes decisionReason(String decisionReason) {
    
    this.decisionReason = decisionReason;
    return this;
  }

   /**
   * Get decisionReason
   * @return decisionReason
  **/
  @javax.annotation.Nullable
  public String getDecisionReason() {
    return decisionReason;
  }


  public void setDecisionReason(String decisionReason) {
    this.decisionReason = decisionReason;
  }


  public IndividualApplicationAllOfAttributes decisionDateTime(OffsetDateTime decisionDateTime) {
    
    this.decisionDateTime = decisionDateTime;
    return this;
  }

   /**
   * Get decisionDateTime
   * @return decisionDateTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDecisionDateTime() {
    return decisionDateTime;
  }


  public void setDecisionDateTime(OffsetDateTime decisionDateTime) {
    this.decisionDateTime = decisionDateTime;
  }


  public IndividualApplicationAllOfAttributes tags(Object tags) {
    
    this.tags = tags;
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  public Object getTags() {
    return tags;
  }


  public void setTags(Object tags) {
    this.tags = tags;
  }


  public IndividualApplicationAllOfAttributes riskRate(RiskRateEnum riskRate) {
    
    this.riskRate = riskRate;
    return this;
  }

   /**
   * Get riskRate
   * @return riskRate
  **/
  @javax.annotation.Nullable
  public RiskRateEnum getRiskRate() {
    return riskRate;
  }


  public void setRiskRate(RiskRateEnum riskRate) {
    this.riskRate = riskRate;
  }


  public IndividualApplicationAllOfAttributes evaluationFlags(List<String> evaluationFlags) {
    
    this.evaluationFlags = evaluationFlags;
    return this;
  }

  public IndividualApplicationAllOfAttributes addEvaluationFlagsItem(String evaluationFlagsItem) {
    if (this.evaluationFlags == null) {
      this.evaluationFlags = new ArrayList<>();
    }
    this.evaluationFlags.add(evaluationFlagsItem);
    return this;
  }

   /**
   * Get evaluationFlags
   * @return evaluationFlags
  **/
  @javax.annotation.Nullable
  public List<String> getEvaluationFlags() {
    return evaluationFlags;
  }


  public void setEvaluationFlags(List<String> evaluationFlags) {
    this.evaluationFlags = evaluationFlags;
  }


  public IndividualApplicationAllOfAttributes evaluationScores(Object evaluationScores) {
    
    this.evaluationScores = evaluationScores;
    return this;
  }

   /**
   * Get evaluationScores
   * @return evaluationScores
  **/
  @javax.annotation.Nullable
  public Object getEvaluationScores() {
    return evaluationScores;
  }


  public void setEvaluationScores(Object evaluationScores) {
    this.evaluationScores = evaluationScores;
  }


  public IndividualApplicationAllOfAttributes ipLocationDetails(Object ipLocationDetails) {
    
    this.ipLocationDetails = ipLocationDetails;
    return this;
  }

   /**
   * Get ipLocationDetails
   * @return ipLocationDetails
  **/
  @javax.annotation.Nullable
  public Object getIpLocationDetails() {
    return ipLocationDetails;
  }


  public void setIpLocationDetails(Object ipLocationDetails) {
    this.ipLocationDetails = ipLocationDetails;
  }


  public IndividualApplicationAllOfAttributes phoneLocationDetails(Object phoneLocationDetails) {
    
    this.phoneLocationDetails = phoneLocationDetails;
    return this;
  }

   /**
   * Get phoneLocationDetails
   * @return phoneLocationDetails
  **/
  @javax.annotation.Nullable
  public Object getPhoneLocationDetails() {
    return phoneLocationDetails;
  }


  public void setPhoneLocationDetails(Object phoneLocationDetails) {
    this.phoneLocationDetails = phoneLocationDetails;
  }


  public IndividualApplicationAllOfAttributes maskedSSN(String maskedSSN) {
    
    this.maskedSSN = maskedSSN;
    return this;
  }

   /**
   * Get maskedSSN
   * @return maskedSSN
  **/
  @javax.annotation.Nullable
  public String getMaskedSSN() {
    return maskedSSN;
  }


  public void setMaskedSSN(String maskedSSN) {
    this.maskedSSN = maskedSSN;
  }


  public IndividualApplicationAllOfAttributes maskedPassport(String maskedPassport) {
    
    this.maskedPassport = maskedPassport;
    return this;
  }

   /**
   * Get maskedPassport
   * @return maskedPassport
  **/
  @javax.annotation.Nullable
  public String getMaskedPassport() {
    return maskedPassport;
  }


  public void setMaskedPassport(String maskedPassport) {
    this.maskedPassport = maskedPassport;
  }


  public IndividualApplicationAllOfAttributes maskedMatriculaConsular(String maskedMatriculaConsular) {
    
    this.maskedMatriculaConsular = maskedMatriculaConsular;
    return this;
  }

   /**
   * Get maskedMatriculaConsular
   * @return maskedMatriculaConsular
  **/
  @javax.annotation.Nullable
  public String getMaskedMatriculaConsular() {
    return maskedMatriculaConsular;
  }


  public void setMaskedMatriculaConsular(String maskedMatriculaConsular) {
    this.maskedMatriculaConsular = maskedMatriculaConsular;
  }


  public IndividualApplicationAllOfAttributes jwtSubject(String jwtSubject) {
    
    this.jwtSubject = jwtSubject;
    return this;
  }

   /**
   * Get jwtSubject
   * @return jwtSubject
  **/
  @javax.annotation.Nullable
  public String getJwtSubject() {
    return jwtSubject;
  }


  public void setJwtSubject(String jwtSubject) {
    this.jwtSubject = jwtSubject;
  }


  public IndividualApplicationAllOfAttributes archived(Boolean archived) {
    
    this.archived = archived;
    return this;
  }

   /**
   * Get archived
   * @return archived
  **/
  @javax.annotation.Nullable
  public Boolean getArchived() {
    return archived;
  }


  public void setArchived(Boolean archived) {
    this.archived = archived;
  }


  public IndividualApplicationAllOfAttributes powerOfAttorneyAgent(PowerOfAttorneyAgent powerOfAttorneyAgent) {
    
    this.powerOfAttorneyAgent = powerOfAttorneyAgent;
    return this;
  }

   /**
   * Get powerOfAttorneyAgent
   * @return powerOfAttorneyAgent
  **/
  @javax.annotation.Nullable
  public PowerOfAttorneyAgent getPowerOfAttorneyAgent() {
    return powerOfAttorneyAgent;
  }


  public void setPowerOfAttorneyAgent(PowerOfAttorneyAgent powerOfAttorneyAgent) {
    this.powerOfAttorneyAgent = powerOfAttorneyAgent;
  }


  public IndividualApplicationAllOfAttributes industry(Industry industry) {
    
    this.industry = industry;
    return this;
  }

   /**
   * Get industry
   * @return industry
  **/
  @javax.annotation.Nullable
  public Industry getIndustry() {
    return industry;
  }


  public void setIndustry(Industry industry) {
    this.industry = industry;
  }


  public IndividualApplicationAllOfAttributes idTheftScore(Integer idTheftScore) {
    
    this.idTheftScore = idTheftScore;
    return this;
  }

   /**
   * Get idTheftScore
   * @return idTheftScore
  **/
  @javax.annotation.Nullable
  public Integer getIdTheftScore() {
    return idTheftScore;
  }


  public void setIdTheftScore(Integer idTheftScore) {
    this.idTheftScore = idTheftScore;
  }


  public IndividualApplicationAllOfAttributes occupation(Occupation occupation) {
    
    this.occupation = occupation;
    return this;
  }

   /**
   * Get occupation
   * @return occupation
  **/
  @javax.annotation.Nullable
  public Occupation getOccupation() {
    return occupation;
  }


  public void setOccupation(Occupation occupation) {
    this.occupation = occupation;
  }


  public IndividualApplicationAllOfAttributes annualIncome(AnnualIncome annualIncome) {
    
    this.annualIncome = annualIncome;
    return this;
  }

   /**
   * Get annualIncome
   * @return annualIncome
  **/
  @javax.annotation.Nullable
  public AnnualIncome getAnnualIncome() {
    return annualIncome;
  }


  public void setAnnualIncome(AnnualIncome annualIncome) {
    this.annualIncome = annualIncome;
  }


  public IndividualApplicationAllOfAttributes sourceOfIncome(SourceOfIncome sourceOfIncome) {
    
    this.sourceOfIncome = sourceOfIncome;
    return this;
  }

   /**
   * Get sourceOfIncome
   * @return sourceOfIncome
  **/
  @javax.annotation.Nullable
  public SourceOfIncome getSourceOfIncome() {
    return sourceOfIncome;
  }


  public void setSourceOfIncome(SourceOfIncome sourceOfIncome) {
    this.sourceOfIncome = sourceOfIncome;
  }


  public IndividualApplicationAllOfAttributes annualRevenue(SoleProprietorshipAnnualRevenue annualRevenue) {
    
    this.annualRevenue = annualRevenue;
    return this;
  }

   /**
   * Get annualRevenue
   * @return annualRevenue
  **/
  @javax.annotation.Nullable
  public SoleProprietorshipAnnualRevenue getAnnualRevenue() {
    return annualRevenue;
  }


  public void setAnnualRevenue(SoleProprietorshipAnnualRevenue annualRevenue) {
    this.annualRevenue = annualRevenue;
  }


  public IndividualApplicationAllOfAttributes numberOfEmployees(SoleProprietorshipNumberOfEmployees numberOfEmployees) {
    
    this.numberOfEmployees = numberOfEmployees;
    return this;
  }

   /**
   * Get numberOfEmployees
   * @return numberOfEmployees
  **/
  @javax.annotation.Nullable
  public SoleProprietorshipNumberOfEmployees getNumberOfEmployees() {
    return numberOfEmployees;
  }


  public void setNumberOfEmployees(SoleProprietorshipNumberOfEmployees numberOfEmployees) {
    this.numberOfEmployees = numberOfEmployees;
  }


  public IndividualApplicationAllOfAttributes businessVertical(BusinessVertical businessVertical) {
    
    this.businessVertical = businessVertical;
    return this;
  }

   /**
   * Get businessVertical
   * @return businessVertical
  **/
  @javax.annotation.Nullable
  public BusinessVertical getBusinessVertical() {
    return businessVertical;
  }


  public void setBusinessVertical(BusinessVertical businessVertical) {
    this.businessVertical = businessVertical;
  }


  public IndividualApplicationAllOfAttributes website(String website) {
    
    this.website = website;
    return this;
  }

   /**
   * Get website
   * @return website
  **/
  @javax.annotation.Nullable
  public String getWebsite() {
    return website;
  }


  public void setWebsite(String website) {
    this.website = website;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IndividualApplicationAllOfAttributes individualApplicationAllOfAttributes = (IndividualApplicationAllOfAttributes) o;
    return Objects.equals(this.createdAt, individualApplicationAllOfAttributes.createdAt) &&
        Objects.equals(this.updatedAt, individualApplicationAllOfAttributes.updatedAt) &&
        Objects.equals(this.status, individualApplicationAllOfAttributes.status) &&
        Objects.equals(this.message, individualApplicationAllOfAttributes.message) &&
        Objects.equals(this.evaluationOutcome, individualApplicationAllOfAttributes.evaluationOutcome) &&
        Objects.equals(this.evaluationId, individualApplicationAllOfAttributes.evaluationId) &&
        Objects.equals(this.evaluationEntityId, individualApplicationAllOfAttributes.evaluationEntityId) &&
        Objects.equals(this.fullName, individualApplicationAllOfAttributes.fullName) &&
        Objects.equals(this.email, individualApplicationAllOfAttributes.email) &&
        Objects.equals(this.phone, individualApplicationAllOfAttributes.phone) &&
        Objects.equals(this.ssn, individualApplicationAllOfAttributes.ssn) &&
        Objects.equals(this.passport, individualApplicationAllOfAttributes.passport) &&
        Objects.equals(this.nationality, individualApplicationAllOfAttributes.nationality) &&
        Objects.equals(this.matriculaConsular, individualApplicationAllOfAttributes.matriculaConsular) &&
        Objects.equals(this.address, individualApplicationAllOfAttributes.address) &&
        Objects.equals(this.dateOfBirth, individualApplicationAllOfAttributes.dateOfBirth) &&
        Objects.equals(this.dba, individualApplicationAllOfAttributes.dba) &&
        Objects.equals(this.ein, individualApplicationAllOfAttributes.ein) &&
        Objects.equals(this.ip, individualApplicationAllOfAttributes.ip) &&
        Objects.equals(this.soleProprietorship, individualApplicationAllOfAttributes.soleProprietorship) &&
        Objects.equals(this.decisionMethod, individualApplicationAllOfAttributes.decisionMethod) &&
        Objects.equals(this.decisionUserId, individualApplicationAllOfAttributes.decisionUserId) &&
        Objects.equals(this.decisionReason, individualApplicationAllOfAttributes.decisionReason) &&
        Objects.equals(this.decisionDateTime, individualApplicationAllOfAttributes.decisionDateTime) &&
        Objects.equals(this.tags, individualApplicationAllOfAttributes.tags) &&
        Objects.equals(this.riskRate, individualApplicationAllOfAttributes.riskRate) &&
        Objects.equals(this.evaluationFlags, individualApplicationAllOfAttributes.evaluationFlags) &&
        Objects.equals(this.evaluationScores, individualApplicationAllOfAttributes.evaluationScores) &&
        Objects.equals(this.ipLocationDetails, individualApplicationAllOfAttributes.ipLocationDetails) &&
        Objects.equals(this.phoneLocationDetails, individualApplicationAllOfAttributes.phoneLocationDetails) &&
        Objects.equals(this.maskedSSN, individualApplicationAllOfAttributes.maskedSSN) &&
        Objects.equals(this.maskedPassport, individualApplicationAllOfAttributes.maskedPassport) &&
        Objects.equals(this.maskedMatriculaConsular, individualApplicationAllOfAttributes.maskedMatriculaConsular) &&
        Objects.equals(this.jwtSubject, individualApplicationAllOfAttributes.jwtSubject) &&
        Objects.equals(this.archived, individualApplicationAllOfAttributes.archived) &&
        Objects.equals(this.powerOfAttorneyAgent, individualApplicationAllOfAttributes.powerOfAttorneyAgent) &&
        Objects.equals(this.industry, individualApplicationAllOfAttributes.industry) &&
        Objects.equals(this.idTheftScore, individualApplicationAllOfAttributes.idTheftScore) &&
        Objects.equals(this.occupation, individualApplicationAllOfAttributes.occupation) &&
        Objects.equals(this.annualIncome, individualApplicationAllOfAttributes.annualIncome) &&
        Objects.equals(this.sourceOfIncome, individualApplicationAllOfAttributes.sourceOfIncome) &&
        Objects.equals(this.annualRevenue, individualApplicationAllOfAttributes.annualRevenue) &&
        Objects.equals(this.numberOfEmployees, individualApplicationAllOfAttributes.numberOfEmployees) &&
        Objects.equals(this.businessVertical, individualApplicationAllOfAttributes.businessVertical) &&
        Objects.equals(this.website, individualApplicationAllOfAttributes.website);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, updatedAt, status, message, evaluationOutcome, evaluationId, evaluationEntityId, fullName, email, phone, ssn, passport, nationality, matriculaConsular, address, dateOfBirth, dba, ein, ip, soleProprietorship, decisionMethod, decisionUserId, decisionReason, decisionDateTime, tags, riskRate, evaluationFlags, evaluationScores, ipLocationDetails, phoneLocationDetails, maskedSSN, maskedPassport, maskedMatriculaConsular, jwtSubject, archived, powerOfAttorneyAgent, industry, idTheftScore, occupation, annualIncome, sourceOfIncome, annualRevenue, numberOfEmployees, businessVertical, website);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IndividualApplicationAllOfAttributes {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    evaluationOutcome: ").append(toIndentedString(evaluationOutcome)).append("\n");
    sb.append("    evaluationId: ").append(toIndentedString(evaluationId)).append("\n");
    sb.append("    evaluationEntityId: ").append(toIndentedString(evaluationEntityId)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    ssn: ").append(toIndentedString(ssn)).append("\n");
    sb.append("    passport: ").append(toIndentedString(passport)).append("\n");
    sb.append("    nationality: ").append(toIndentedString(nationality)).append("\n");
    sb.append("    matriculaConsular: ").append(toIndentedString(matriculaConsular)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    dba: ").append(toIndentedString(dba)).append("\n");
    sb.append("    ein: ").append(toIndentedString(ein)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    soleProprietorship: ").append(toIndentedString(soleProprietorship)).append("\n");
    sb.append("    decisionMethod: ").append(toIndentedString(decisionMethod)).append("\n");
    sb.append("    decisionUserId: ").append(toIndentedString(decisionUserId)).append("\n");
    sb.append("    decisionReason: ").append(toIndentedString(decisionReason)).append("\n");
    sb.append("    decisionDateTime: ").append(toIndentedString(decisionDateTime)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    riskRate: ").append(toIndentedString(riskRate)).append("\n");
    sb.append("    evaluationFlags: ").append(toIndentedString(evaluationFlags)).append("\n");
    sb.append("    evaluationScores: ").append(toIndentedString(evaluationScores)).append("\n");
    sb.append("    ipLocationDetails: ").append(toIndentedString(ipLocationDetails)).append("\n");
    sb.append("    phoneLocationDetails: ").append(toIndentedString(phoneLocationDetails)).append("\n");
    sb.append("    maskedSSN: ").append(toIndentedString(maskedSSN)).append("\n");
    sb.append("    maskedPassport: ").append(toIndentedString(maskedPassport)).append("\n");
    sb.append("    maskedMatriculaConsular: ").append(toIndentedString(maskedMatriculaConsular)).append("\n");
    sb.append("    jwtSubject: ").append(toIndentedString(jwtSubject)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    powerOfAttorneyAgent: ").append(toIndentedString(powerOfAttorneyAgent)).append("\n");
    sb.append("    industry: ").append(toIndentedString(industry)).append("\n");
    sb.append("    idTheftScore: ").append(toIndentedString(idTheftScore)).append("\n");
    sb.append("    occupation: ").append(toIndentedString(occupation)).append("\n");
    sb.append("    annualIncome: ").append(toIndentedString(annualIncome)).append("\n");
    sb.append("    sourceOfIncome: ").append(toIndentedString(sourceOfIncome)).append("\n");
    sb.append("    annualRevenue: ").append(toIndentedString(annualRevenue)).append("\n");
    sb.append("    numberOfEmployees: ").append(toIndentedString(numberOfEmployees)).append("\n");
    sb.append("    businessVertical: ").append(toIndentedString(businessVertical)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");
    openapiFields.add("status");
    openapiFields.add("message");
    openapiFields.add("evaluationOutcome");
    openapiFields.add("evaluationId");
    openapiFields.add("evaluationEntityId");
    openapiFields.add("fullName");
    openapiFields.add("email");
    openapiFields.add("phone");
    openapiFields.add("ssn");
    openapiFields.add("passport");
    openapiFields.add("nationality");
    openapiFields.add("matriculaConsular");
    openapiFields.add("address");
    openapiFields.add("dateOfBirth");
    openapiFields.add("dba");
    openapiFields.add("ein");
    openapiFields.add("ip");
    openapiFields.add("soleProprietorship");
    openapiFields.add("decisionMethod");
    openapiFields.add("decisionUserId");
    openapiFields.add("decisionReason");
    openapiFields.add("decisionDateTime");
    openapiFields.add("tags");
    openapiFields.add("riskRate");
    openapiFields.add("evaluationFlags");
    openapiFields.add("evaluationScores");
    openapiFields.add("ipLocationDetails");
    openapiFields.add("phoneLocationDetails");
    openapiFields.add("maskedSSN");
    openapiFields.add("maskedPassport");
    openapiFields.add("maskedMatriculaConsular");
    openapiFields.add("jwtSubject");
    openapiFields.add("archived");
    openapiFields.add("powerOfAttorneyAgent");
    openapiFields.add("industry");
    openapiFields.add("idTheftScore");
    openapiFields.add("occupation");
    openapiFields.add("annualIncome");
    openapiFields.add("sourceOfIncome");
    openapiFields.add("annualRevenue");
    openapiFields.add("numberOfEmployees");
    openapiFields.add("businessVertical");
    openapiFields.add("website");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("fullName");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to IndividualApplicationAllOfAttributes
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IndividualApplicationAllOfAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IndividualApplicationAllOfAttributes is not found in the empty JSON string", IndividualApplicationAllOfAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IndividualApplicationAllOfAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IndividualApplicationAllOfAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IndividualApplicationAllOfAttributes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("evaluationOutcome") != null && !jsonObj.get("evaluationOutcome").isJsonNull()) && !jsonObj.get("evaluationOutcome").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationOutcome` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluationOutcome").toString()));
      }
      if ((jsonObj.get("evaluationId") != null && !jsonObj.get("evaluationId").isJsonNull()) && !jsonObj.get("evaluationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluationId").toString()));
      }
      if ((jsonObj.get("evaluationEntityId") != null && !jsonObj.get("evaluationEntityId").isJsonNull()) && !jsonObj.get("evaluationEntityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationEntityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluationEntityId").toString()));
      }
      // validate the required field `fullName`
      FullName.validateJsonElement(jsonObj.get("fullName"));
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      // validate the optional field `phone`
      if (jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) {
        Phone.validateJsonElement(jsonObj.get("phone"));
      }
      if ((jsonObj.get("ssn") != null && !jsonObj.get("ssn").isJsonNull()) && !jsonObj.get("ssn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssn").toString()));
      }
      if ((jsonObj.get("passport") != null && !jsonObj.get("passport").isJsonNull()) && !jsonObj.get("passport").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passport` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passport").toString()));
      }
      if ((jsonObj.get("nationality") != null && !jsonObj.get("nationality").isJsonNull()) && !jsonObj.get("nationality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationality").toString()));
      }
      if ((jsonObj.get("matriculaConsular") != null && !jsonObj.get("matriculaConsular").isJsonNull()) && !jsonObj.get("matriculaConsular").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matriculaConsular` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matriculaConsular").toString()));
      }
      if ((jsonObj.get("dba") != null && !jsonObj.get("dba").isJsonNull()) && !jsonObj.get("dba").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dba` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dba").toString()));
      }
      if ((jsonObj.get("ein") != null && !jsonObj.get("ein").isJsonNull()) && !jsonObj.get("ein").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ein` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ein").toString()));
      }
      if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if ((jsonObj.get("decisionMethod") != null && !jsonObj.get("decisionMethod").isJsonNull()) && !jsonObj.get("decisionMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `decisionMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("decisionMethod").toString()));
      }
      if ((jsonObj.get("decisionUserId") != null && !jsonObj.get("decisionUserId").isJsonNull()) && !jsonObj.get("decisionUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `decisionUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("decisionUserId").toString()));
      }
      if ((jsonObj.get("decisionReason") != null && !jsonObj.get("decisionReason").isJsonNull()) && !jsonObj.get("decisionReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `decisionReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("decisionReason").toString()));
      }
      if ((jsonObj.get("riskRate") != null && !jsonObj.get("riskRate").isJsonNull()) && !jsonObj.get("riskRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `riskRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("riskRate").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("evaluationFlags") != null && !jsonObj.get("evaluationFlags").isJsonNull() && !jsonObj.get("evaluationFlags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationFlags` to be an array in the JSON string but got `%s`", jsonObj.get("evaluationFlags").toString()));
      }
      if ((jsonObj.get("maskedSSN") != null && !jsonObj.get("maskedSSN").isJsonNull()) && !jsonObj.get("maskedSSN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maskedSSN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maskedSSN").toString()));
      }
      if ((jsonObj.get("maskedPassport") != null && !jsonObj.get("maskedPassport").isJsonNull()) && !jsonObj.get("maskedPassport").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maskedPassport` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maskedPassport").toString()));
      }
      if ((jsonObj.get("maskedMatriculaConsular") != null && !jsonObj.get("maskedMatriculaConsular").isJsonNull()) && !jsonObj.get("maskedMatriculaConsular").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maskedMatriculaConsular` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maskedMatriculaConsular").toString()));
      }
      if ((jsonObj.get("jwtSubject") != null && !jsonObj.get("jwtSubject").isJsonNull()) && !jsonObj.get("jwtSubject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jwtSubject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jwtSubject").toString()));
      }
      // validate the optional field `powerOfAttorneyAgent`
      if (jsonObj.get("powerOfAttorneyAgent") != null && !jsonObj.get("powerOfAttorneyAgent").isJsonNull()) {
        PowerOfAttorneyAgent.validateJsonElement(jsonObj.get("powerOfAttorneyAgent"));
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IndividualApplicationAllOfAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IndividualApplicationAllOfAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IndividualApplicationAllOfAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IndividualApplicationAllOfAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<IndividualApplicationAllOfAttributes>() {
           @Override
           public void write(JsonWriter out, IndividualApplicationAllOfAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IndividualApplicationAllOfAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IndividualApplicationAllOfAttributes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IndividualApplicationAllOfAttributes
  * @throws IOException if the JSON string is invalid with respect to IndividualApplicationAllOfAttributes
  */
  public static IndividualApplicationAllOfAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IndividualApplicationAllOfAttributes.class);
  }

 /**
  * Convert an instance of IndividualApplicationAllOfAttributes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

