/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReceivedPaymentAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ReceivedPaymentAttributes {
  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PENDING("Pending"),
    
    ADVANCED("Advanced"),
    
    COMPLETED("Completed"),
    
    RETURNED("Returned");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_COMPLETION_DATE = "completionDate";
  @SerializedName(SERIALIZED_NAME_COMPLETION_DATE)
  private String completionDate;

  /**
   * Gets or Sets direction
   */
  @JsonAdapter(DirectionEnum.Adapter.class)
  public enum DirectionEnum {
    DEBIT("Debit"),
    
    CREDIT("Credit");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DirectionEnum fromValue(String value) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DirectionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private DirectionEnum direction;

  public static final String SERIALIZED_NAME_WAS_ADVANCED = "wasAdvanced";
  @SerializedName(SERIALIZED_NAME_WAS_ADVANCED)
  private Boolean wasAdvanced;

  public static final String SERIALIZED_NAME_IS_ADVANCEABLE = "isAdvanceable";
  @SerializedName(SERIALIZED_NAME_IS_ADVANCEABLE)
  private Boolean isAdvanceable;

  public static final String SERIALIZED_NAME_IS_ADVACEABLE = "isAdvaceable";
  @SerializedName(SERIALIZED_NAME_IS_ADVACEABLE)
  private Boolean isAdvaceable;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "companyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_COUNTERPARTY_ROUTING_NUMBER = "counterpartyRoutingNumber";
  @SerializedName(SERIALIZED_NAME_COUNTERPARTY_ROUTING_NUMBER)
  private String counterpartyRoutingNumber;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ADDENDA = "addenda";
  @SerializedName(SERIALIZED_NAME_ADDENDA)
  private String addenda;

  public static final String SERIALIZED_NAME_TRACE_NUMBER = "traceNumber";
  @SerializedName(SERIALIZED_NAME_TRACE_NUMBER)
  private String traceNumber;

  public static final String SERIALIZED_NAME_SEC_CODE = "secCode";
  @SerializedName(SERIALIZED_NAME_SEC_CODE)
  private String secCode;

  public static final String SERIALIZED_NAME_RETURN_REASON = "returnReason";
  @SerializedName(SERIALIZED_NAME_RETURN_REASON)
  private String returnReason;

  public static final String SERIALIZED_NAME_RECEIVING_ENTITY_NAME = "receivingEntityName";
  @SerializedName(SERIALIZED_NAME_RECEIVING_ENTITY_NAME)
  private String receivingEntityName;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Object tags;

  public ReceivedPaymentAttributes() {
  }

  public ReceivedPaymentAttributes createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public ReceivedPaymentAttributes status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public ReceivedPaymentAttributes amount(Integer amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * minimum: 1
   * @return amount
  **/
  @javax.annotation.Nonnull
  public Integer getAmount() {
    return amount;
  }


  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public ReceivedPaymentAttributes completionDate(String completionDate) {
    
    this.completionDate = completionDate;
    return this;
  }

   /**
   * Get completionDate
   * @return completionDate
  **/
  @javax.annotation.Nonnull
  public String getCompletionDate() {
    return completionDate;
  }


  public void setCompletionDate(String completionDate) {
    this.completionDate = completionDate;
  }


  public ReceivedPaymentAttributes direction(DirectionEnum direction) {
    
    this.direction = direction;
    return this;
  }

   /**
   * Get direction
   * @return direction
  **/
  @javax.annotation.Nonnull
  public DirectionEnum getDirection() {
    return direction;
  }


  public void setDirection(DirectionEnum direction) {
    this.direction = direction;
  }


  public ReceivedPaymentAttributes wasAdvanced(Boolean wasAdvanced) {
    
    this.wasAdvanced = wasAdvanced;
    return this;
  }

   /**
   * Get wasAdvanced
   * @return wasAdvanced
  **/
  @javax.annotation.Nonnull
  public Boolean getWasAdvanced() {
    return wasAdvanced;
  }


  public void setWasAdvanced(Boolean wasAdvanced) {
    this.wasAdvanced = wasAdvanced;
  }


  public ReceivedPaymentAttributes isAdvanceable(Boolean isAdvanceable) {
    
    this.isAdvanceable = isAdvanceable;
    return this;
  }

   /**
   * Get isAdvanceable
   * @return isAdvanceable
  **/
  @javax.annotation.Nullable
  public Boolean getIsAdvanceable() {
    return isAdvanceable;
  }


  public void setIsAdvanceable(Boolean isAdvanceable) {
    this.isAdvanceable = isAdvanceable;
  }


  public ReceivedPaymentAttributes isAdvaceable(Boolean isAdvaceable) {
    
    this.isAdvaceable = isAdvaceable;
    return this;
  }

   /**
   * Get isAdvaceable
   * @return isAdvaceable
  **/
  @javax.annotation.Nullable
  public Boolean getIsAdvaceable() {
    return isAdvaceable;
  }


  public void setIsAdvaceable(Boolean isAdvaceable) {
    this.isAdvaceable = isAdvaceable;
  }


  public ReceivedPaymentAttributes companyName(String companyName) {
    
    this.companyName = companyName;
    return this;
  }

   /**
   * Get companyName
   * @return companyName
  **/
  @javax.annotation.Nonnull
  public String getCompanyName() {
    return companyName;
  }


  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public ReceivedPaymentAttributes counterpartyRoutingNumber(String counterpartyRoutingNumber) {
    
    this.counterpartyRoutingNumber = counterpartyRoutingNumber;
    return this;
  }

   /**
   * Get counterpartyRoutingNumber
   * @return counterpartyRoutingNumber
  **/
  @javax.annotation.Nonnull
  public String getCounterpartyRoutingNumber() {
    return counterpartyRoutingNumber;
  }


  public void setCounterpartyRoutingNumber(String counterpartyRoutingNumber) {
    this.counterpartyRoutingNumber = counterpartyRoutingNumber;
  }


  public ReceivedPaymentAttributes description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public ReceivedPaymentAttributes addenda(String addenda) {
    
    this.addenda = addenda;
    return this;
  }

   /**
   * Get addenda
   * @return addenda
  **/
  @javax.annotation.Nullable
  public String getAddenda() {
    return addenda;
  }


  public void setAddenda(String addenda) {
    this.addenda = addenda;
  }


  public ReceivedPaymentAttributes traceNumber(String traceNumber) {
    
    this.traceNumber = traceNumber;
    return this;
  }

   /**
   * Get traceNumber
   * @return traceNumber
  **/
  @javax.annotation.Nonnull
  public String getTraceNumber() {
    return traceNumber;
  }


  public void setTraceNumber(String traceNumber) {
    this.traceNumber = traceNumber;
  }


  public ReceivedPaymentAttributes secCode(String secCode) {
    
    this.secCode = secCode;
    return this;
  }

   /**
   * Get secCode
   * @return secCode
  **/
  @javax.annotation.Nonnull
  public String getSecCode() {
    return secCode;
  }


  public void setSecCode(String secCode) {
    this.secCode = secCode;
  }


  public ReceivedPaymentAttributes returnReason(String returnReason) {
    
    this.returnReason = returnReason;
    return this;
  }

   /**
   * Get returnReason
   * @return returnReason
  **/
  @javax.annotation.Nullable
  public String getReturnReason() {
    return returnReason;
  }


  public void setReturnReason(String returnReason) {
    this.returnReason = returnReason;
  }


  public ReceivedPaymentAttributes receivingEntityName(String receivingEntityName) {
    
    this.receivingEntityName = receivingEntityName;
    return this;
  }

   /**
   * Get receivingEntityName
   * @return receivingEntityName
  **/
  @javax.annotation.Nullable
  public String getReceivingEntityName() {
    return receivingEntityName;
  }


  public void setReceivingEntityName(String receivingEntityName) {
    this.receivingEntityName = receivingEntityName;
  }


  public ReceivedPaymentAttributes tags(Object tags) {
    
    this.tags = tags;
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  public Object getTags() {
    return tags;
  }


  public void setTags(Object tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReceivedPaymentAttributes receivedPaymentAttributes = (ReceivedPaymentAttributes) o;
    return Objects.equals(this.createdAt, receivedPaymentAttributes.createdAt) &&
        Objects.equals(this.status, receivedPaymentAttributes.status) &&
        Objects.equals(this.amount, receivedPaymentAttributes.amount) &&
        Objects.equals(this.completionDate, receivedPaymentAttributes.completionDate) &&
        Objects.equals(this.direction, receivedPaymentAttributes.direction) &&
        Objects.equals(this.wasAdvanced, receivedPaymentAttributes.wasAdvanced) &&
        Objects.equals(this.isAdvanceable, receivedPaymentAttributes.isAdvanceable) &&
        Objects.equals(this.isAdvaceable, receivedPaymentAttributes.isAdvaceable) &&
        Objects.equals(this.companyName, receivedPaymentAttributes.companyName) &&
        Objects.equals(this.counterpartyRoutingNumber, receivedPaymentAttributes.counterpartyRoutingNumber) &&
        Objects.equals(this.description, receivedPaymentAttributes.description) &&
        Objects.equals(this.addenda, receivedPaymentAttributes.addenda) &&
        Objects.equals(this.traceNumber, receivedPaymentAttributes.traceNumber) &&
        Objects.equals(this.secCode, receivedPaymentAttributes.secCode) &&
        Objects.equals(this.returnReason, receivedPaymentAttributes.returnReason) &&
        Objects.equals(this.receivingEntityName, receivedPaymentAttributes.receivingEntityName) &&
        Objects.equals(this.tags, receivedPaymentAttributes.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, status, amount, completionDate, direction, wasAdvanced, isAdvanceable, isAdvaceable, companyName, counterpartyRoutingNumber, description, addenda, traceNumber, secCode, returnReason, receivingEntityName, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReceivedPaymentAttributes {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    completionDate: ").append(toIndentedString(completionDate)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    wasAdvanced: ").append(toIndentedString(wasAdvanced)).append("\n");
    sb.append("    isAdvanceable: ").append(toIndentedString(isAdvanceable)).append("\n");
    sb.append("    isAdvaceable: ").append(toIndentedString(isAdvaceable)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    counterpartyRoutingNumber: ").append(toIndentedString(counterpartyRoutingNumber)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    addenda: ").append(toIndentedString(addenda)).append("\n");
    sb.append("    traceNumber: ").append(toIndentedString(traceNumber)).append("\n");
    sb.append("    secCode: ").append(toIndentedString(secCode)).append("\n");
    sb.append("    returnReason: ").append(toIndentedString(returnReason)).append("\n");
    sb.append("    receivingEntityName: ").append(toIndentedString(receivingEntityName)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdAt");
    openapiFields.add("status");
    openapiFields.add("amount");
    openapiFields.add("completionDate");
    openapiFields.add("direction");
    openapiFields.add("wasAdvanced");
    openapiFields.add("isAdvanceable");
    openapiFields.add("isAdvaceable");
    openapiFields.add("companyName");
    openapiFields.add("counterpartyRoutingNumber");
    openapiFields.add("description");
    openapiFields.add("addenda");
    openapiFields.add("traceNumber");
    openapiFields.add("secCode");
    openapiFields.add("returnReason");
    openapiFields.add("receivingEntityName");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("completionDate");
    openapiRequiredFields.add("direction");
    openapiRequiredFields.add("wasAdvanced");
    openapiRequiredFields.add("companyName");
    openapiRequiredFields.add("counterpartyRoutingNumber");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("traceNumber");
    openapiRequiredFields.add("secCode");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ReceivedPaymentAttributes
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReceivedPaymentAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReceivedPaymentAttributes is not found in the empty JSON string", ReceivedPaymentAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReceivedPaymentAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReceivedPaymentAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReceivedPaymentAttributes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("completionDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completionDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completionDate").toString()));
      }
      if (!jsonObj.get("direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direction").toString()));
      }
      if (!jsonObj.get("companyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyName").toString()));
      }
      if (!jsonObj.get("counterpartyRoutingNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `counterpartyRoutingNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("counterpartyRoutingNumber").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("addenda") != null && !jsonObj.get("addenda").isJsonNull()) && !jsonObj.get("addenda").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addenda` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addenda").toString()));
      }
      if (!jsonObj.get("traceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `traceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("traceNumber").toString()));
      }
      if (!jsonObj.get("secCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secCode").toString()));
      }
      if ((jsonObj.get("returnReason") != null && !jsonObj.get("returnReason").isJsonNull()) && !jsonObj.get("returnReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnReason").toString()));
      }
      if ((jsonObj.get("receivingEntityName") != null && !jsonObj.get("receivingEntityName").isJsonNull()) && !jsonObj.get("receivingEntityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receivingEntityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receivingEntityName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReceivedPaymentAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReceivedPaymentAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReceivedPaymentAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReceivedPaymentAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<ReceivedPaymentAttributes>() {
           @Override
           public void write(JsonWriter out, ReceivedPaymentAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReceivedPaymentAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReceivedPaymentAttributes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReceivedPaymentAttributes
  * @throws IOException if the JSON string is invalid with respect to ReceivedPaymentAttributes
  */
  public static ReceivedPaymentAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReceivedPaymentAttributes.class);
  }

 /**
  * Convert an instance of ReceivedPaymentAttributes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

