/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationFormAdditionalDisclosuresInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SettingsOverride
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SettingsOverride {
  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirectUrl";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private String redirectUrl;

  public static final String SERIALIZED_NAME_PRIVACY_POLICY_URL = "privacyPolicyUrl";
  @SerializedName(SERIALIZED_NAME_PRIVACY_POLICY_URL)
  private String privacyPolicyUrl;

  public static final String SERIALIZED_NAME_ELECTRONIC_DISCLOSURES_URL = "electronicDisclosuresUrl";
  @SerializedName(SERIALIZED_NAME_ELECTRONIC_DISCLOSURES_URL)
  private String electronicDisclosuresUrl;

  public static final String SERIALIZED_NAME_DEPOSIT_TERMS_URL = "depositTermsUrl";
  @SerializedName(SERIALIZED_NAME_DEPOSIT_TERMS_URL)
  private String depositTermsUrl;

  public static final String SERIALIZED_NAME_CLIENT_TERMS_URL = "clientTermsUrl";
  @SerializedName(SERIALIZED_NAME_CLIENT_TERMS_URL)
  private String clientTermsUrl;

  public static final String SERIALIZED_NAME_CARDHOLDER_TERMS_URL = "cardholderTermsUrl";
  @SerializedName(SERIALIZED_NAME_CARDHOLDER_TERMS_URL)
  private String cardholderTermsUrl;

  public static final String SERIALIZED_NAME_CASH_ADVANCED_TERMS_URL = "cashAdvancedTermsUrl";
  @SerializedName(SERIALIZED_NAME_CASH_ADVANCED_TERMS_URL)
  private String cashAdvancedTermsUrl;

  public static final String SERIALIZED_NAME_DEBIT_CARD_DISCLOSURE_URL = "debitCardDisclosureUrl";
  @SerializedName(SERIALIZED_NAME_DEBIT_CARD_DISCLOSURE_URL)
  private String debitCardDisclosureUrl;

  public static final String SERIALIZED_NAME_ADDITIONAL_DISCLOSURES = "additionalDisclosures";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_DISCLOSURES)
  private List<ApplicationFormAdditionalDisclosuresInner> additionalDisclosures;

  public static final String SERIALIZED_NAME_VALIDATE_PHONE_NUMBER = "validatePhoneNumber";
  @SerializedName(SERIALIZED_NAME_VALIDATE_PHONE_NUMBER)
  private Boolean validatePhoneNumber = true;

  public SettingsOverride() {
  }

  public SettingsOverride redirectUrl(String redirectUrl) {
    
    this.redirectUrl = redirectUrl;
    return this;
  }

   /**
   * Get redirectUrl
   * @return redirectUrl
  **/
  @javax.annotation.Nullable
  public String getRedirectUrl() {
    return redirectUrl;
  }


  public void setRedirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
  }


  public SettingsOverride privacyPolicyUrl(String privacyPolicyUrl) {
    
    this.privacyPolicyUrl = privacyPolicyUrl;
    return this;
  }

   /**
   * Get privacyPolicyUrl
   * @return privacyPolicyUrl
  **/
  @javax.annotation.Nullable
  public String getPrivacyPolicyUrl() {
    return privacyPolicyUrl;
  }


  public void setPrivacyPolicyUrl(String privacyPolicyUrl) {
    this.privacyPolicyUrl = privacyPolicyUrl;
  }


  public SettingsOverride electronicDisclosuresUrl(String electronicDisclosuresUrl) {
    
    this.electronicDisclosuresUrl = electronicDisclosuresUrl;
    return this;
  }

   /**
   * Get electronicDisclosuresUrl
   * @return electronicDisclosuresUrl
  **/
  @javax.annotation.Nullable
  public String getElectronicDisclosuresUrl() {
    return electronicDisclosuresUrl;
  }


  public void setElectronicDisclosuresUrl(String electronicDisclosuresUrl) {
    this.electronicDisclosuresUrl = electronicDisclosuresUrl;
  }


  public SettingsOverride depositTermsUrl(String depositTermsUrl) {
    
    this.depositTermsUrl = depositTermsUrl;
    return this;
  }

   /**
   * Get depositTermsUrl
   * @return depositTermsUrl
  **/
  @javax.annotation.Nullable
  public String getDepositTermsUrl() {
    return depositTermsUrl;
  }


  public void setDepositTermsUrl(String depositTermsUrl) {
    this.depositTermsUrl = depositTermsUrl;
  }


  public SettingsOverride clientTermsUrl(String clientTermsUrl) {
    
    this.clientTermsUrl = clientTermsUrl;
    return this;
  }

   /**
   * Get clientTermsUrl
   * @return clientTermsUrl
  **/
  @javax.annotation.Nullable
  public String getClientTermsUrl() {
    return clientTermsUrl;
  }


  public void setClientTermsUrl(String clientTermsUrl) {
    this.clientTermsUrl = clientTermsUrl;
  }


  public SettingsOverride cardholderTermsUrl(String cardholderTermsUrl) {
    
    this.cardholderTermsUrl = cardholderTermsUrl;
    return this;
  }

   /**
   * Get cardholderTermsUrl
   * @return cardholderTermsUrl
  **/
  @javax.annotation.Nullable
  public String getCardholderTermsUrl() {
    return cardholderTermsUrl;
  }


  public void setCardholderTermsUrl(String cardholderTermsUrl) {
    this.cardholderTermsUrl = cardholderTermsUrl;
  }


  public SettingsOverride cashAdvancedTermsUrl(String cashAdvancedTermsUrl) {
    
    this.cashAdvancedTermsUrl = cashAdvancedTermsUrl;
    return this;
  }

   /**
   * Get cashAdvancedTermsUrl
   * @return cashAdvancedTermsUrl
  **/
  @javax.annotation.Nullable
  public String getCashAdvancedTermsUrl() {
    return cashAdvancedTermsUrl;
  }


  public void setCashAdvancedTermsUrl(String cashAdvancedTermsUrl) {
    this.cashAdvancedTermsUrl = cashAdvancedTermsUrl;
  }


  public SettingsOverride debitCardDisclosureUrl(String debitCardDisclosureUrl) {
    
    this.debitCardDisclosureUrl = debitCardDisclosureUrl;
    return this;
  }

   /**
   * Get debitCardDisclosureUrl
   * @return debitCardDisclosureUrl
  **/
  @javax.annotation.Nullable
  public String getDebitCardDisclosureUrl() {
    return debitCardDisclosureUrl;
  }


  public void setDebitCardDisclosureUrl(String debitCardDisclosureUrl) {
    this.debitCardDisclosureUrl = debitCardDisclosureUrl;
  }


  public SettingsOverride additionalDisclosures(List<ApplicationFormAdditionalDisclosuresInner> additionalDisclosures) {
    
    this.additionalDisclosures = additionalDisclosures;
    return this;
  }

  public SettingsOverride addAdditionalDisclosuresItem(ApplicationFormAdditionalDisclosuresInner additionalDisclosuresItem) {
    if (this.additionalDisclosures == null) {
      this.additionalDisclosures = new ArrayList<>();
    }
    this.additionalDisclosures.add(additionalDisclosuresItem);
    return this;
  }

   /**
   * Get additionalDisclosures
   * @return additionalDisclosures
  **/
  @javax.annotation.Nullable
  public List<ApplicationFormAdditionalDisclosuresInner> getAdditionalDisclosures() {
    return additionalDisclosures;
  }


  public void setAdditionalDisclosures(List<ApplicationFormAdditionalDisclosuresInner> additionalDisclosures) {
    this.additionalDisclosures = additionalDisclosures;
  }


  public SettingsOverride validatePhoneNumber(Boolean validatePhoneNumber) {
    
    this.validatePhoneNumber = validatePhoneNumber;
    return this;
  }

   /**
   * Get validatePhoneNumber
   * @return validatePhoneNumber
  **/
  @javax.annotation.Nullable
  public Boolean getValidatePhoneNumber() {
    return validatePhoneNumber;
  }


  public void setValidatePhoneNumber(Boolean validatePhoneNumber) {
    this.validatePhoneNumber = validatePhoneNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SettingsOverride settingsOverride = (SettingsOverride) o;
    return Objects.equals(this.redirectUrl, settingsOverride.redirectUrl) &&
        Objects.equals(this.privacyPolicyUrl, settingsOverride.privacyPolicyUrl) &&
        Objects.equals(this.electronicDisclosuresUrl, settingsOverride.electronicDisclosuresUrl) &&
        Objects.equals(this.depositTermsUrl, settingsOverride.depositTermsUrl) &&
        Objects.equals(this.clientTermsUrl, settingsOverride.clientTermsUrl) &&
        Objects.equals(this.cardholderTermsUrl, settingsOverride.cardholderTermsUrl) &&
        Objects.equals(this.cashAdvancedTermsUrl, settingsOverride.cashAdvancedTermsUrl) &&
        Objects.equals(this.debitCardDisclosureUrl, settingsOverride.debitCardDisclosureUrl) &&
        Objects.equals(this.additionalDisclosures, settingsOverride.additionalDisclosures) &&
        Objects.equals(this.validatePhoneNumber, settingsOverride.validatePhoneNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(redirectUrl, privacyPolicyUrl, electronicDisclosuresUrl, depositTermsUrl, clientTermsUrl, cardholderTermsUrl, cashAdvancedTermsUrl, debitCardDisclosureUrl, additionalDisclosures, validatePhoneNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SettingsOverride {\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    privacyPolicyUrl: ").append(toIndentedString(privacyPolicyUrl)).append("\n");
    sb.append("    electronicDisclosuresUrl: ").append(toIndentedString(electronicDisclosuresUrl)).append("\n");
    sb.append("    depositTermsUrl: ").append(toIndentedString(depositTermsUrl)).append("\n");
    sb.append("    clientTermsUrl: ").append(toIndentedString(clientTermsUrl)).append("\n");
    sb.append("    cardholderTermsUrl: ").append(toIndentedString(cardholderTermsUrl)).append("\n");
    sb.append("    cashAdvancedTermsUrl: ").append(toIndentedString(cashAdvancedTermsUrl)).append("\n");
    sb.append("    debitCardDisclosureUrl: ").append(toIndentedString(debitCardDisclosureUrl)).append("\n");
    sb.append("    additionalDisclosures: ").append(toIndentedString(additionalDisclosures)).append("\n");
    sb.append("    validatePhoneNumber: ").append(toIndentedString(validatePhoneNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("redirectUrl");
    openapiFields.add("privacyPolicyUrl");
    openapiFields.add("electronicDisclosuresUrl");
    openapiFields.add("depositTermsUrl");
    openapiFields.add("clientTermsUrl");
    openapiFields.add("cardholderTermsUrl");
    openapiFields.add("cashAdvancedTermsUrl");
    openapiFields.add("debitCardDisclosureUrl");
    openapiFields.add("additionalDisclosures");
    openapiFields.add("validatePhoneNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SettingsOverride
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SettingsOverride.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SettingsOverride is not found in the empty JSON string", SettingsOverride.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SettingsOverride.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SettingsOverride` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("redirectUrl") != null && !jsonObj.get("redirectUrl").isJsonNull()) && !jsonObj.get("redirectUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirectUrl").toString()));
      }
      if ((jsonObj.get("privacyPolicyUrl") != null && !jsonObj.get("privacyPolicyUrl").isJsonNull()) && !jsonObj.get("privacyPolicyUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privacyPolicyUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privacyPolicyUrl").toString()));
      }
      if ((jsonObj.get("electronicDisclosuresUrl") != null && !jsonObj.get("electronicDisclosuresUrl").isJsonNull()) && !jsonObj.get("electronicDisclosuresUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `electronicDisclosuresUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("electronicDisclosuresUrl").toString()));
      }
      if ((jsonObj.get("depositTermsUrl") != null && !jsonObj.get("depositTermsUrl").isJsonNull()) && !jsonObj.get("depositTermsUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `depositTermsUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("depositTermsUrl").toString()));
      }
      if ((jsonObj.get("clientTermsUrl") != null && !jsonObj.get("clientTermsUrl").isJsonNull()) && !jsonObj.get("clientTermsUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientTermsUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientTermsUrl").toString()));
      }
      if ((jsonObj.get("cardholderTermsUrl") != null && !jsonObj.get("cardholderTermsUrl").isJsonNull()) && !jsonObj.get("cardholderTermsUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardholderTermsUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardholderTermsUrl").toString()));
      }
      if ((jsonObj.get("cashAdvancedTermsUrl") != null && !jsonObj.get("cashAdvancedTermsUrl").isJsonNull()) && !jsonObj.get("cashAdvancedTermsUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cashAdvancedTermsUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cashAdvancedTermsUrl").toString()));
      }
      if ((jsonObj.get("debitCardDisclosureUrl") != null && !jsonObj.get("debitCardDisclosureUrl").isJsonNull()) && !jsonObj.get("debitCardDisclosureUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debitCardDisclosureUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debitCardDisclosureUrl").toString()));
      }
      if (jsonObj.get("additionalDisclosures") != null && !jsonObj.get("additionalDisclosures").isJsonNull()) {
        JsonArray jsonArrayadditionalDisclosures = jsonObj.getAsJsonArray("additionalDisclosures");
        if (jsonArrayadditionalDisclosures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalDisclosures").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalDisclosures` to be an array in the JSON string but got `%s`", jsonObj.get("additionalDisclosures").toString()));
          }

          // validate the optional field `additionalDisclosures` (array)
          for (int i = 0; i < jsonArrayadditionalDisclosures.size(); i++) {
            ApplicationFormAdditionalDisclosuresInner.validateJsonElement(jsonArrayadditionalDisclosures.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SettingsOverride.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SettingsOverride' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SettingsOverride> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SettingsOverride.class));

       return (TypeAdapter<T>) new TypeAdapter<SettingsOverride>() {
           @Override
           public void write(JsonWriter out, SettingsOverride value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SettingsOverride read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SettingsOverride given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SettingsOverride
  * @throws IOException if the JSON string is invalid with respect to SettingsOverride
  */
  public static SettingsOverride fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SettingsOverride.class);
  }

 /**
  * Convert an instance of SettingsOverride to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

