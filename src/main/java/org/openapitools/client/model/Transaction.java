/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Transaction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Transaction {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  protected String type;

  public Transaction() {
    this.type = this.getClass().getSimpleName();
  }

  public Transaction id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Transaction type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transaction transaction = (Transaction) o;
    return Objects.equals(this.id, transaction.id) &&
        Objects.equals(this.type, transaction.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transaction {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Transaction
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Transaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Transaction is not found in the empty JSON string", Transaction.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("type").getAsString();
      switch (discriminatorValue) {
        case "accountLowBalanceClosureTransaction":
          AccountLowBalanceClosureTransaction.validateJsonElement(jsonElement);
          break;
        case "adjustmentTransaction":
          AdjustmentTransaction.validateJsonElement(jsonElement);
          break;
        case "atmTransaction":
          AtmTransaction.validateJsonElement(jsonElement);
          break;
        case "bankRepaymentTransaction":
          BankRepaymentTransaction.validateJsonElement(jsonElement);
          break;
        case "billPayTransaction":
          BillPayTransaction.validateJsonElement(jsonElement);
          break;
        case "bookTransaction":
          BookTransaction.validateJsonElement(jsonElement);
          break;
        case "cardTransaction":
          CardTransaction.validateJsonElement(jsonElement);
          break;
        case "cashDepositTransaction":
          CashDepositTransaction.validateJsonElement(jsonElement);
          break;
        case "chargebackTransaction":
          ChargebackTransaction.validateJsonElement(jsonElement);
          break;
        case "checkDepositTransaction":
          CheckDepositTransaction.validateJsonElement(jsonElement);
          break;
        case "checkPaymentTransaction":
          CheckPaymentTransaction.validateJsonElement(jsonElement);
          break;
        case "customerRepaymentReturnedTransaction":
          CustomerRepaymentReturnedTransaction.validateJsonElement(jsonElement);
          break;
        case "customerRepaymentTransaction":
          CustomerRepaymentTransaction.validateJsonElement(jsonElement);
          break;
        case "dishonoredAchTransaction":
          DishonoredAchTransaction.validateJsonElement(jsonElement);
          break;
        case "disputeSettlementTransaction":
          DisputeSettlementTransaction.validateJsonElement(jsonElement);
          break;
        case "disputeTransaction":
          DisputeTransaction.validateJsonElement(jsonElement);
          break;
        case "feeTransaction":
          FeeTransaction.validateJsonElement(jsonElement);
          break;
        case "interchangeTransaction":
          InterchangeTransaction.validateJsonElement(jsonElement);
          break;
        case "interestShareTransaction":
          InterestShareTransaction.validateJsonElement(jsonElement);
          break;
        case "interestTransaction":
          InterestTransaction.validateJsonElement(jsonElement);
          break;
        case "negativeBalanceCoverageTransaction":
          NegativeBalanceCoverageTransaction.validateJsonElement(jsonElement);
          break;
        case "originatedAchTransaction":
          OriginatedAchTransaction.validateJsonElement(jsonElement);
          break;
        case "paymentAdvanceTransaction":
          PaymentAdvanceTransaction.validateJsonElement(jsonElement);
          break;
        case "purchaseTransaction":
          PurchaseTransaction.validateJsonElement(jsonElement);
          break;
        case "receivedAchTransaction":
          ReceivedAchTransaction.validateJsonElement(jsonElement);
          break;
        case "releaseTransaction":
          ReleaseTransaction.validateJsonElement(jsonElement);
          break;
        case "repaidPaymentAdvanceTransaction":
          RepaidPaymentAdvanceTransaction.validateJsonElement(jsonElement);
          break;
        case "returnedAchTransaction":
          ReturnedAchTransaction.validateJsonElement(jsonElement);
          break;
        case "returnedCheckDepositTransaction":
          ReturnedCheckDepositTransaction.validateJsonElement(jsonElement);
          break;
        case "returnedCheckPaymentTransaction":
          ReturnedCheckPaymentTransaction.validateJsonElement(jsonElement);
          break;
        case "returnedReceivedAchTransaction":
          ReturnedReceivedAchTransaction.validateJsonElement(jsonElement);
          break;
        case "reversalTransaction":
          ReversalTransaction.validateJsonElement(jsonElement);
          break;
        case "rewardTransaction":
          RewardTransaction.validateJsonElement(jsonElement);
          break;
        case "settlementTransaction":
          SettlementTransaction.validateJsonElement(jsonElement);
          break;
        case "sponsoredInterestTransaction":
          SponsoredInterestTransaction.validateJsonElement(jsonElement);
          break;
        case "wireTransaction":
          WireTransaction.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


 /**
  * Create an instance of Transaction given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Transaction
  * @throws IOException if the JSON string is invalid with respect to Transaction
  */
  public static Transaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Transaction.class);
  }

 /**
  * Convert an instance of Transaction to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

