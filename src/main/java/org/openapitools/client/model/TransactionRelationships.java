/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AccountRelationship2;
import org.openapitools.client.model.AuthorizationRelationship;
import org.openapitools.client.model.AuthorizationRequestRelationship;
import org.openapitools.client.model.CardRelationship;
import org.openapitools.client.model.ChargebackRelationship;
import org.openapitools.client.model.CheckDepositRelationship;
import org.openapitools.client.model.CheckPaymentRelationship;
import org.openapitools.client.model.CounterpartyAccountRelationship1;
import org.openapitools.client.model.CounterpartyCustomerRelationship;
import org.openapitools.client.model.CustomerRelationship;
import org.openapitools.client.model.CustomersRelationship;
import org.openapitools.client.model.IncomingAchRelationship;
import org.openapitools.client.model.OrgRelationship;
import org.openapitools.client.model.PaymentRelationship;
import org.openapitools.client.model.ReceivedPaymentRelationship;
import org.openapitools.client.model.ReceivingAccountRelationship;
import org.openapitools.client.model.RecurringPaymentRelationship;
import org.openapitools.client.model.RelatedTransaction;
import org.openapitools.client.model.RelatedTransactionRelationship;
import org.openapitools.client.model.RepaymentRelationship;
import org.openapitools.client.model.ReturnedRelationship;
import org.openapitools.client.model.RewardRelationship;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TransactionRelationships
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TransactionRelationships {
  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private AccountRelationship2 account;

  public static final String SERIALIZED_NAME_RECEIVING_ACCOUNT = "receivingAccount";
  @SerializedName(SERIALIZED_NAME_RECEIVING_ACCOUNT)
  private ReceivingAccountRelationship receivingAccount;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private CustomerRelationship customer;

  public static final String SERIALIZED_NAME_CUSTOMERS = "customers";
  @SerializedName(SERIALIZED_NAME_CUSTOMERS)
  private CustomersRelationship customers;

  public static final String SERIALIZED_NAME_COUNTERPARTY_ACCOUNT = "counterpartyAccount";
  @SerializedName(SERIALIZED_NAME_COUNTERPARTY_ACCOUNT)
  private CounterpartyAccountRelationship1 counterpartyAccount;

  public static final String SERIALIZED_NAME_COUNTERPARTY_CUSTOMER = "counterpartyCustomer";
  @SerializedName(SERIALIZED_NAME_COUNTERPARTY_CUSTOMER)
  private CounterpartyCustomerRelationship counterpartyCustomer;

  public static final String SERIALIZED_NAME_RELATED_TRANSACTION = "relatedTransaction";
  @SerializedName(SERIALIZED_NAME_RELATED_TRANSACTION)
  private RelatedTransactionRelationship relatedTransaction;

  public static final String SERIALIZED_NAME_DISPUTED_TRANSACTION = "disputedTransaction";
  @SerializedName(SERIALIZED_NAME_DISPUTED_TRANSACTION)
  private RelatedTransaction disputedTransaction;

  public static final String SERIALIZED_NAME_AUTHORIZATION = "authorization";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION)
  private AuthorizationRelationship authorization;

  public static final String SERIALIZED_NAME_RETURNED = "returned";
  @SerializedName(SERIALIZED_NAME_RETURNED)
  private ReturnedRelationship returned;

  public static final String SERIALIZED_NAME_PAYMENT = "payment";
  @SerializedName(SERIALIZED_NAME_PAYMENT)
  private PaymentRelationship payment;

  public static final String SERIALIZED_NAME_CHECK_PAYMENT = "checkPayment";
  @SerializedName(SERIALIZED_NAME_CHECK_PAYMENT)
  private CheckPaymentRelationship checkPayment;

  public static final String SERIALIZED_NAME_REPAYMENT = "repayment";
  @SerializedName(SERIALIZED_NAME_REPAYMENT)
  private RepaymentRelationship repayment;

  public static final String SERIALIZED_NAME_RECURRING_PAYMENT = "recurringPayment";
  @SerializedName(SERIALIZED_NAME_RECURRING_PAYMENT)
  private RecurringPaymentRelationship recurringPayment;

  public static final String SERIALIZED_NAME_ORG = "org";
  @SerializedName(SERIALIZED_NAME_ORG)
  private OrgRelationship org;

  public static final String SERIALIZED_NAME_CARD = "card";
  @SerializedName(SERIALIZED_NAME_CARD)
  private CardRelationship card;

  public static final String SERIALIZED_NAME_INCOMING_ACH = "incomingAch";
  @SerializedName(SERIALIZED_NAME_INCOMING_ACH)
  private IncomingAchRelationship incomingAch;

  public static final String SERIALIZED_NAME_CHECK_DEPOSIT = "checkDeposit";
  @SerializedName(SERIALIZED_NAME_CHECK_DEPOSIT)
  private CheckDepositRelationship checkDeposit;

  public static final String SERIALIZED_NAME_AUTHORIZATION_REQUEST = "authorizationRequest";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_REQUEST)
  private AuthorizationRequestRelationship authorizationRequest;

  public static final String SERIALIZED_NAME_PAYMENT_ADVANCE_TRANSACTION = "paymentAdvanceTransaction";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ADVANCE_TRANSACTION)
  private RelatedTransaction paymentAdvanceTransaction;

  public static final String SERIALIZED_NAME_RECEIVED_PAYMENT = "receivedPayment";
  @SerializedName(SERIALIZED_NAME_RECEIVED_PAYMENT)
  private ReceivedPaymentRelationship receivedPayment;

  public static final String SERIALIZED_NAME_CHARGEBACK = "chargeback";
  @SerializedName(SERIALIZED_NAME_CHARGEBACK)
  private ChargebackRelationship chargeback;

  public static final String SERIALIZED_NAME_REWARD = "reward";
  @SerializedName(SERIALIZED_NAME_REWARD)
  private RewardRelationship reward;

  public TransactionRelationships() {
  }

  public TransactionRelationships account(AccountRelationship2 account) {
    
    this.account = account;
    return this;
  }

   /**
   * Get account
   * @return account
  **/
  @javax.annotation.Nonnull
  public AccountRelationship2 getAccount() {
    return account;
  }


  public void setAccount(AccountRelationship2 account) {
    this.account = account;
  }


  public TransactionRelationships receivingAccount(ReceivingAccountRelationship receivingAccount) {
    
    this.receivingAccount = receivingAccount;
    return this;
  }

   /**
   * Get receivingAccount
   * @return receivingAccount
  **/
  @javax.annotation.Nullable
  public ReceivingAccountRelationship getReceivingAccount() {
    return receivingAccount;
  }


  public void setReceivingAccount(ReceivingAccountRelationship receivingAccount) {
    this.receivingAccount = receivingAccount;
  }


  public TransactionRelationships customer(CustomerRelationship customer) {
    
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @javax.annotation.Nullable
  public CustomerRelationship getCustomer() {
    return customer;
  }


  public void setCustomer(CustomerRelationship customer) {
    this.customer = customer;
  }


  public TransactionRelationships customers(CustomersRelationship customers) {
    
    this.customers = customers;
    return this;
  }

   /**
   * Get customers
   * @return customers
  **/
  @javax.annotation.Nullable
  public CustomersRelationship getCustomers() {
    return customers;
  }


  public void setCustomers(CustomersRelationship customers) {
    this.customers = customers;
  }


  public TransactionRelationships counterpartyAccount(CounterpartyAccountRelationship1 counterpartyAccount) {
    
    this.counterpartyAccount = counterpartyAccount;
    return this;
  }

   /**
   * Get counterpartyAccount
   * @return counterpartyAccount
  **/
  @javax.annotation.Nullable
  public CounterpartyAccountRelationship1 getCounterpartyAccount() {
    return counterpartyAccount;
  }


  public void setCounterpartyAccount(CounterpartyAccountRelationship1 counterpartyAccount) {
    this.counterpartyAccount = counterpartyAccount;
  }


  public TransactionRelationships counterpartyCustomer(CounterpartyCustomerRelationship counterpartyCustomer) {
    
    this.counterpartyCustomer = counterpartyCustomer;
    return this;
  }

   /**
   * Get counterpartyCustomer
   * @return counterpartyCustomer
  **/
  @javax.annotation.Nullable
  public CounterpartyCustomerRelationship getCounterpartyCustomer() {
    return counterpartyCustomer;
  }


  public void setCounterpartyCustomer(CounterpartyCustomerRelationship counterpartyCustomer) {
    this.counterpartyCustomer = counterpartyCustomer;
  }


  public TransactionRelationships relatedTransaction(RelatedTransactionRelationship relatedTransaction) {
    
    this.relatedTransaction = relatedTransaction;
    return this;
  }

   /**
   * Get relatedTransaction
   * @return relatedTransaction
  **/
  @javax.annotation.Nullable
  public RelatedTransactionRelationship getRelatedTransaction() {
    return relatedTransaction;
  }


  public void setRelatedTransaction(RelatedTransactionRelationship relatedTransaction) {
    this.relatedTransaction = relatedTransaction;
  }


  public TransactionRelationships disputedTransaction(RelatedTransaction disputedTransaction) {
    
    this.disputedTransaction = disputedTransaction;
    return this;
  }

   /**
   * Get disputedTransaction
   * @return disputedTransaction
  **/
  @javax.annotation.Nullable
  public RelatedTransaction getDisputedTransaction() {
    return disputedTransaction;
  }


  public void setDisputedTransaction(RelatedTransaction disputedTransaction) {
    this.disputedTransaction = disputedTransaction;
  }


  public TransactionRelationships authorization(AuthorizationRelationship authorization) {
    
    this.authorization = authorization;
    return this;
  }

   /**
   * Get authorization
   * @return authorization
  **/
  @javax.annotation.Nullable
  public AuthorizationRelationship getAuthorization() {
    return authorization;
  }


  public void setAuthorization(AuthorizationRelationship authorization) {
    this.authorization = authorization;
  }


  public TransactionRelationships returned(ReturnedRelationship returned) {
    
    this.returned = returned;
    return this;
  }

   /**
   * Get returned
   * @return returned
  **/
  @javax.annotation.Nullable
  public ReturnedRelationship getReturned() {
    return returned;
  }


  public void setReturned(ReturnedRelationship returned) {
    this.returned = returned;
  }


  public TransactionRelationships payment(PaymentRelationship payment) {
    
    this.payment = payment;
    return this;
  }

   /**
   * Get payment
   * @return payment
  **/
  @javax.annotation.Nullable
  public PaymentRelationship getPayment() {
    return payment;
  }


  public void setPayment(PaymentRelationship payment) {
    this.payment = payment;
  }


  public TransactionRelationships checkPayment(CheckPaymentRelationship checkPayment) {
    
    this.checkPayment = checkPayment;
    return this;
  }

   /**
   * Get checkPayment
   * @return checkPayment
  **/
  @javax.annotation.Nullable
  public CheckPaymentRelationship getCheckPayment() {
    return checkPayment;
  }


  public void setCheckPayment(CheckPaymentRelationship checkPayment) {
    this.checkPayment = checkPayment;
  }


  public TransactionRelationships repayment(RepaymentRelationship repayment) {
    
    this.repayment = repayment;
    return this;
  }

   /**
   * Get repayment
   * @return repayment
  **/
  @javax.annotation.Nullable
  public RepaymentRelationship getRepayment() {
    return repayment;
  }


  public void setRepayment(RepaymentRelationship repayment) {
    this.repayment = repayment;
  }


  public TransactionRelationships recurringPayment(RecurringPaymentRelationship recurringPayment) {
    
    this.recurringPayment = recurringPayment;
    return this;
  }

   /**
   * Get recurringPayment
   * @return recurringPayment
  **/
  @javax.annotation.Nullable
  public RecurringPaymentRelationship getRecurringPayment() {
    return recurringPayment;
  }


  public void setRecurringPayment(RecurringPaymentRelationship recurringPayment) {
    this.recurringPayment = recurringPayment;
  }


  public TransactionRelationships org(OrgRelationship org) {
    
    this.org = org;
    return this;
  }

   /**
   * Get org
   * @return org
  **/
  @javax.annotation.Nullable
  public OrgRelationship getOrg() {
    return org;
  }


  public void setOrg(OrgRelationship org) {
    this.org = org;
  }


  public TransactionRelationships card(CardRelationship card) {
    
    this.card = card;
    return this;
  }

   /**
   * Get card
   * @return card
  **/
  @javax.annotation.Nullable
  public CardRelationship getCard() {
    return card;
  }


  public void setCard(CardRelationship card) {
    this.card = card;
  }


  public TransactionRelationships incomingAch(IncomingAchRelationship incomingAch) {
    
    this.incomingAch = incomingAch;
    return this;
  }

   /**
   * Get incomingAch
   * @return incomingAch
  **/
  @javax.annotation.Nullable
  public IncomingAchRelationship getIncomingAch() {
    return incomingAch;
  }


  public void setIncomingAch(IncomingAchRelationship incomingAch) {
    this.incomingAch = incomingAch;
  }


  public TransactionRelationships checkDeposit(CheckDepositRelationship checkDeposit) {
    
    this.checkDeposit = checkDeposit;
    return this;
  }

   /**
   * Get checkDeposit
   * @return checkDeposit
  **/
  @javax.annotation.Nullable
  public CheckDepositRelationship getCheckDeposit() {
    return checkDeposit;
  }


  public void setCheckDeposit(CheckDepositRelationship checkDeposit) {
    this.checkDeposit = checkDeposit;
  }


  public TransactionRelationships authorizationRequest(AuthorizationRequestRelationship authorizationRequest) {
    
    this.authorizationRequest = authorizationRequest;
    return this;
  }

   /**
   * Get authorizationRequest
   * @return authorizationRequest
  **/
  @javax.annotation.Nullable
  public AuthorizationRequestRelationship getAuthorizationRequest() {
    return authorizationRequest;
  }


  public void setAuthorizationRequest(AuthorizationRequestRelationship authorizationRequest) {
    this.authorizationRequest = authorizationRequest;
  }


  public TransactionRelationships paymentAdvanceTransaction(RelatedTransaction paymentAdvanceTransaction) {
    
    this.paymentAdvanceTransaction = paymentAdvanceTransaction;
    return this;
  }

   /**
   * Get paymentAdvanceTransaction
   * @return paymentAdvanceTransaction
  **/
  @javax.annotation.Nullable
  public RelatedTransaction getPaymentAdvanceTransaction() {
    return paymentAdvanceTransaction;
  }


  public void setPaymentAdvanceTransaction(RelatedTransaction paymentAdvanceTransaction) {
    this.paymentAdvanceTransaction = paymentAdvanceTransaction;
  }


  public TransactionRelationships receivedPayment(ReceivedPaymentRelationship receivedPayment) {
    
    this.receivedPayment = receivedPayment;
    return this;
  }

   /**
   * Get receivedPayment
   * @return receivedPayment
  **/
  @javax.annotation.Nullable
  public ReceivedPaymentRelationship getReceivedPayment() {
    return receivedPayment;
  }


  public void setReceivedPayment(ReceivedPaymentRelationship receivedPayment) {
    this.receivedPayment = receivedPayment;
  }


  public TransactionRelationships chargeback(ChargebackRelationship chargeback) {
    
    this.chargeback = chargeback;
    return this;
  }

   /**
   * Get chargeback
   * @return chargeback
  **/
  @javax.annotation.Nullable
  public ChargebackRelationship getChargeback() {
    return chargeback;
  }


  public void setChargeback(ChargebackRelationship chargeback) {
    this.chargeback = chargeback;
  }


  public TransactionRelationships reward(RewardRelationship reward) {
    
    this.reward = reward;
    return this;
  }

   /**
   * Get reward
   * @return reward
  **/
  @javax.annotation.Nullable
  public RewardRelationship getReward() {
    return reward;
  }


  public void setReward(RewardRelationship reward) {
    this.reward = reward;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionRelationships transactionRelationships = (TransactionRelationships) o;
    return Objects.equals(this.account, transactionRelationships.account) &&
        Objects.equals(this.receivingAccount, transactionRelationships.receivingAccount) &&
        Objects.equals(this.customer, transactionRelationships.customer) &&
        Objects.equals(this.customers, transactionRelationships.customers) &&
        Objects.equals(this.counterpartyAccount, transactionRelationships.counterpartyAccount) &&
        Objects.equals(this.counterpartyCustomer, transactionRelationships.counterpartyCustomer) &&
        Objects.equals(this.relatedTransaction, transactionRelationships.relatedTransaction) &&
        Objects.equals(this.disputedTransaction, transactionRelationships.disputedTransaction) &&
        Objects.equals(this.authorization, transactionRelationships.authorization) &&
        Objects.equals(this.returned, transactionRelationships.returned) &&
        Objects.equals(this.payment, transactionRelationships.payment) &&
        Objects.equals(this.checkPayment, transactionRelationships.checkPayment) &&
        Objects.equals(this.repayment, transactionRelationships.repayment) &&
        Objects.equals(this.recurringPayment, transactionRelationships.recurringPayment) &&
        Objects.equals(this.org, transactionRelationships.org) &&
        Objects.equals(this.card, transactionRelationships.card) &&
        Objects.equals(this.incomingAch, transactionRelationships.incomingAch) &&
        Objects.equals(this.checkDeposit, transactionRelationships.checkDeposit) &&
        Objects.equals(this.authorizationRequest, transactionRelationships.authorizationRequest) &&
        Objects.equals(this.paymentAdvanceTransaction, transactionRelationships.paymentAdvanceTransaction) &&
        Objects.equals(this.receivedPayment, transactionRelationships.receivedPayment) &&
        Objects.equals(this.chargeback, transactionRelationships.chargeback) &&
        Objects.equals(this.reward, transactionRelationships.reward);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, receivingAccount, customer, customers, counterpartyAccount, counterpartyCustomer, relatedTransaction, disputedTransaction, authorization, returned, payment, checkPayment, repayment, recurringPayment, org, card, incomingAch, checkDeposit, authorizationRequest, paymentAdvanceTransaction, receivedPayment, chargeback, reward);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionRelationships {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    receivingAccount: ").append(toIndentedString(receivingAccount)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    customers: ").append(toIndentedString(customers)).append("\n");
    sb.append("    counterpartyAccount: ").append(toIndentedString(counterpartyAccount)).append("\n");
    sb.append("    counterpartyCustomer: ").append(toIndentedString(counterpartyCustomer)).append("\n");
    sb.append("    relatedTransaction: ").append(toIndentedString(relatedTransaction)).append("\n");
    sb.append("    disputedTransaction: ").append(toIndentedString(disputedTransaction)).append("\n");
    sb.append("    authorization: ").append(toIndentedString(authorization)).append("\n");
    sb.append("    returned: ").append(toIndentedString(returned)).append("\n");
    sb.append("    payment: ").append(toIndentedString(payment)).append("\n");
    sb.append("    checkPayment: ").append(toIndentedString(checkPayment)).append("\n");
    sb.append("    repayment: ").append(toIndentedString(repayment)).append("\n");
    sb.append("    recurringPayment: ").append(toIndentedString(recurringPayment)).append("\n");
    sb.append("    org: ").append(toIndentedString(org)).append("\n");
    sb.append("    card: ").append(toIndentedString(card)).append("\n");
    sb.append("    incomingAch: ").append(toIndentedString(incomingAch)).append("\n");
    sb.append("    checkDeposit: ").append(toIndentedString(checkDeposit)).append("\n");
    sb.append("    authorizationRequest: ").append(toIndentedString(authorizationRequest)).append("\n");
    sb.append("    paymentAdvanceTransaction: ").append(toIndentedString(paymentAdvanceTransaction)).append("\n");
    sb.append("    receivedPayment: ").append(toIndentedString(receivedPayment)).append("\n");
    sb.append("    chargeback: ").append(toIndentedString(chargeback)).append("\n");
    sb.append("    reward: ").append(toIndentedString(reward)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account");
    openapiFields.add("receivingAccount");
    openapiFields.add("customer");
    openapiFields.add("customers");
    openapiFields.add("counterpartyAccount");
    openapiFields.add("counterpartyCustomer");
    openapiFields.add("relatedTransaction");
    openapiFields.add("disputedTransaction");
    openapiFields.add("authorization");
    openapiFields.add("returned");
    openapiFields.add("payment");
    openapiFields.add("checkPayment");
    openapiFields.add("repayment");
    openapiFields.add("recurringPayment");
    openapiFields.add("org");
    openapiFields.add("card");
    openapiFields.add("incomingAch");
    openapiFields.add("checkDeposit");
    openapiFields.add("authorizationRequest");
    openapiFields.add("paymentAdvanceTransaction");
    openapiFields.add("receivedPayment");
    openapiFields.add("chargeback");
    openapiFields.add("reward");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TransactionRelationships
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionRelationships.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionRelationships is not found in the empty JSON string", TransactionRelationships.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransactionRelationships.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactionRelationships` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransactionRelationships.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `account`
      AccountRelationship2.validateJsonElement(jsonObj.get("account"));
      // validate the optional field `receivingAccount`
      if (jsonObj.get("receivingAccount") != null && !jsonObj.get("receivingAccount").isJsonNull()) {
        ReceivingAccountRelationship.validateJsonElement(jsonObj.get("receivingAccount"));
      }
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        CustomerRelationship.validateJsonElement(jsonObj.get("customer"));
      }
      // validate the optional field `customers`
      if (jsonObj.get("customers") != null && !jsonObj.get("customers").isJsonNull()) {
        CustomersRelationship.validateJsonElement(jsonObj.get("customers"));
      }
      // validate the optional field `counterpartyAccount`
      if (jsonObj.get("counterpartyAccount") != null && !jsonObj.get("counterpartyAccount").isJsonNull()) {
        CounterpartyAccountRelationship1.validateJsonElement(jsonObj.get("counterpartyAccount"));
      }
      // validate the optional field `counterpartyCustomer`
      if (jsonObj.get("counterpartyCustomer") != null && !jsonObj.get("counterpartyCustomer").isJsonNull()) {
        CounterpartyCustomerRelationship.validateJsonElement(jsonObj.get("counterpartyCustomer"));
      }
      // validate the optional field `relatedTransaction`
      if (jsonObj.get("relatedTransaction") != null && !jsonObj.get("relatedTransaction").isJsonNull()) {
        RelatedTransactionRelationship.validateJsonElement(jsonObj.get("relatedTransaction"));
      }
      // validate the optional field `disputedTransaction`
      if (jsonObj.get("disputedTransaction") != null && !jsonObj.get("disputedTransaction").isJsonNull()) {
        RelatedTransaction.validateJsonElement(jsonObj.get("disputedTransaction"));
      }
      // validate the optional field `authorization`
      if (jsonObj.get("authorization") != null && !jsonObj.get("authorization").isJsonNull()) {
        AuthorizationRelationship.validateJsonElement(jsonObj.get("authorization"));
      }
      // validate the optional field `returned`
      if (jsonObj.get("returned") != null && !jsonObj.get("returned").isJsonNull()) {
        ReturnedRelationship.validateJsonElement(jsonObj.get("returned"));
      }
      // validate the optional field `payment`
      if (jsonObj.get("payment") != null && !jsonObj.get("payment").isJsonNull()) {
        PaymentRelationship.validateJsonElement(jsonObj.get("payment"));
      }
      // validate the optional field `checkPayment`
      if (jsonObj.get("checkPayment") != null && !jsonObj.get("checkPayment").isJsonNull()) {
        CheckPaymentRelationship.validateJsonElement(jsonObj.get("checkPayment"));
      }
      // validate the optional field `repayment`
      if (jsonObj.get("repayment") != null && !jsonObj.get("repayment").isJsonNull()) {
        RepaymentRelationship.validateJsonElement(jsonObj.get("repayment"));
      }
      // validate the optional field `recurringPayment`
      if (jsonObj.get("recurringPayment") != null && !jsonObj.get("recurringPayment").isJsonNull()) {
        RecurringPaymentRelationship.validateJsonElement(jsonObj.get("recurringPayment"));
      }
      // validate the optional field `org`
      if (jsonObj.get("org") != null && !jsonObj.get("org").isJsonNull()) {
        OrgRelationship.validateJsonElement(jsonObj.get("org"));
      }
      // validate the optional field `card`
      if (jsonObj.get("card") != null && !jsonObj.get("card").isJsonNull()) {
        CardRelationship.validateJsonElement(jsonObj.get("card"));
      }
      // validate the optional field `incomingAch`
      if (jsonObj.get("incomingAch") != null && !jsonObj.get("incomingAch").isJsonNull()) {
        IncomingAchRelationship.validateJsonElement(jsonObj.get("incomingAch"));
      }
      // validate the optional field `checkDeposit`
      if (jsonObj.get("checkDeposit") != null && !jsonObj.get("checkDeposit").isJsonNull()) {
        CheckDepositRelationship.validateJsonElement(jsonObj.get("checkDeposit"));
      }
      // validate the optional field `authorizationRequest`
      if (jsonObj.get("authorizationRequest") != null && !jsonObj.get("authorizationRequest").isJsonNull()) {
        AuthorizationRequestRelationship.validateJsonElement(jsonObj.get("authorizationRequest"));
      }
      // validate the optional field `paymentAdvanceTransaction`
      if (jsonObj.get("paymentAdvanceTransaction") != null && !jsonObj.get("paymentAdvanceTransaction").isJsonNull()) {
        RelatedTransaction.validateJsonElement(jsonObj.get("paymentAdvanceTransaction"));
      }
      // validate the optional field `receivedPayment`
      if (jsonObj.get("receivedPayment") != null && !jsonObj.get("receivedPayment").isJsonNull()) {
        ReceivedPaymentRelationship.validateJsonElement(jsonObj.get("receivedPayment"));
      }
      // validate the optional field `chargeback`
      if (jsonObj.get("chargeback") != null && !jsonObj.get("chargeback").isJsonNull()) {
        ChargebackRelationship.validateJsonElement(jsonObj.get("chargeback"));
      }
      // validate the optional field `reward`
      if (jsonObj.get("reward") != null && !jsonObj.get("reward").isJsonNull()) {
        RewardRelationship.validateJsonElement(jsonObj.get("reward"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionRelationships.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionRelationships' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionRelationships> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionRelationships.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionRelationships>() {
           @Override
           public void write(JsonWriter out, TransactionRelationships value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionRelationships read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactionRelationships given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionRelationships
  * @throws IOException if the JSON string is invalid with respect to TransactionRelationships
  */
  public static TransactionRelationships fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionRelationships.class);
  }

 /**
  * Convert an instance of TransactionRelationships to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

