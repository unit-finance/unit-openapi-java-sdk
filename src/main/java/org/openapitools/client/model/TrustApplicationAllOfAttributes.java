/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationStatus;
import org.openapitools.client.model.Grantor;
import org.openapitools.client.model.Revocability;
import org.openapitools.client.model.SourceOfFunds;
import org.openapitools.client.model.TrustContact;
import org.openapitools.client.model.Trustee;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TrustApplicationAllOfAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TrustApplicationAllOfAttributes {
  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ApplicationStatus status;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_EVALUATION_OUTCOME = "evaluationOutcome";
  @SerializedName(SERIALIZED_NAME_EVALUATION_OUTCOME)
  private String evaluationOutcome;

  public static final String SERIALIZED_NAME_EVALUATION_ID = "evaluationId";
  @SerializedName(SERIALIZED_NAME_EVALUATION_ID)
  private String evaluationId;

  public static final String SERIALIZED_NAME_EVALUATION_ENTITY_ID = "evaluationEntityId";
  @SerializedName(SERIALIZED_NAME_EVALUATION_ENTITY_ID)
  private String evaluationEntityId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DATE_OF_INCORPORATION = "dateOfIncorporation";
  @SerializedName(SERIALIZED_NAME_DATE_OF_INCORPORATION)
  private LocalDate dateOfIncorporation;

  public static final String SERIALIZED_NAME_STATE_OF_INCORPORATION = "stateOfIncorporation";
  @SerializedName(SERIALIZED_NAME_STATE_OF_INCORPORATION)
  private String stateOfIncorporation;

  public static final String SERIALIZED_NAME_REVOCABILITY = "revocability";
  @SerializedName(SERIALIZED_NAME_REVOCABILITY)
  private Revocability revocability;

  public static final String SERIALIZED_NAME_SOURCE_OF_FUNDS = "sourceOfFunds";
  @SerializedName(SERIALIZED_NAME_SOURCE_OF_FUNDS)
  private SourceOfFunds sourceOfFunds;

  public static final String SERIALIZED_NAME_TAX_ID = "taxId";
  @SerializedName(SERIALIZED_NAME_TAX_ID)
  private String taxId;

  public static final String SERIALIZED_NAME_CONTACT = "contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private TrustContact contact;

  public static final String SERIALIZED_NAME_TRUSTEES = "trustees";
  @SerializedName(SERIALIZED_NAME_TRUSTEES)
  private List<Trustee> trustees;

  public static final String SERIALIZED_NAME_GRANTOR = "grantor";
  @SerializedName(SERIALIZED_NAME_GRANTOR)
  private Grantor grantor;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  /**
   * Gets or Sets decisionMethod
   */
  @JsonAdapter(DecisionMethodEnum.Adapter.class)
  public enum DecisionMethodEnum {
    MANUALLY("Manually"),
    
    AUTOMATICALLY("Automatically");

    private String value;

    DecisionMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DecisionMethodEnum fromValue(String value) {
      for (DecisionMethodEnum b : DecisionMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DecisionMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DecisionMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DecisionMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DecisionMethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DECISION_METHOD = "decisionMethod";
  @SerializedName(SERIALIZED_NAME_DECISION_METHOD)
  private DecisionMethodEnum decisionMethod;

  public static final String SERIALIZED_NAME_DECISION_USER_ID = "decisionUserId";
  @SerializedName(SERIALIZED_NAME_DECISION_USER_ID)
  private String decisionUserId;

  public static final String SERIALIZED_NAME_DECISION_REASON = "decisionReason";
  @SerializedName(SERIALIZED_NAME_DECISION_REASON)
  private String decisionReason;

  public static final String SERIALIZED_NAME_DECISION_DATE_TIME = "decisionDateTime";
  @SerializedName(SERIALIZED_NAME_DECISION_DATE_TIME)
  private OffsetDateTime decisionDateTime;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Object tags;

  /**
   * Gets or Sets riskRate
   */
  @JsonAdapter(RiskRateEnum.Adapter.class)
  public enum RiskRateEnum {
    LOW("low"),
    
    MEDIUM("medium"),
    
    HIGH("high");

    private String value;

    RiskRateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RiskRateEnum fromValue(String value) {
      for (RiskRateEnum b : RiskRateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RiskRateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RiskRateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RiskRateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RiskRateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RISK_RATE = "riskRate";
  @SerializedName(SERIALIZED_NAME_RISK_RATE)
  private RiskRateEnum riskRate;

  public static final String SERIALIZED_NAME_EVALUATION_FLAGS = "evaluationFlags";
  @SerializedName(SERIALIZED_NAME_EVALUATION_FLAGS)
  private List<String> evaluationFlags;

  public static final String SERIALIZED_NAME_IP_LOCATION_DETAILS = "ipLocationDetails";
  @SerializedName(SERIALIZED_NAME_IP_LOCATION_DETAILS)
  private Object ipLocationDetails;

  public static final String SERIALIZED_NAME_PHONE_LOCATION_DETAILS = "phoneLocationDetails";
  @SerializedName(SERIALIZED_NAME_PHONE_LOCATION_DETAILS)
  private Object phoneLocationDetails;

  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived;

  public TrustApplicationAllOfAttributes() {
  }

  public TrustApplicationAllOfAttributes createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public TrustApplicationAllOfAttributes updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public TrustApplicationAllOfAttributes status(ApplicationStatus status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  public ApplicationStatus getStatus() {
    return status;
  }


  public void setStatus(ApplicationStatus status) {
    this.status = status;
  }


  public TrustApplicationAllOfAttributes message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }


  public TrustApplicationAllOfAttributes evaluationOutcome(String evaluationOutcome) {
    
    this.evaluationOutcome = evaluationOutcome;
    return this;
  }

   /**
   * Get evaluationOutcome
   * @return evaluationOutcome
  **/
  @javax.annotation.Nullable
  public String getEvaluationOutcome() {
    return evaluationOutcome;
  }


  public void setEvaluationOutcome(String evaluationOutcome) {
    this.evaluationOutcome = evaluationOutcome;
  }


  public TrustApplicationAllOfAttributes evaluationId(String evaluationId) {
    
    this.evaluationId = evaluationId;
    return this;
  }

   /**
   * Get evaluationId
   * @return evaluationId
  **/
  @javax.annotation.Nullable
  public String getEvaluationId() {
    return evaluationId;
  }


  public void setEvaluationId(String evaluationId) {
    this.evaluationId = evaluationId;
  }


  public TrustApplicationAllOfAttributes evaluationEntityId(String evaluationEntityId) {
    
    this.evaluationEntityId = evaluationEntityId;
    return this;
  }

   /**
   * Get evaluationEntityId
   * @return evaluationEntityId
  **/
  @javax.annotation.Nullable
  public String getEvaluationEntityId() {
    return evaluationEntityId;
  }


  public void setEvaluationEntityId(String evaluationEntityId) {
    this.evaluationEntityId = evaluationEntityId;
  }


  public TrustApplicationAllOfAttributes name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public TrustApplicationAllOfAttributes dateOfIncorporation(LocalDate dateOfIncorporation) {
    
    this.dateOfIncorporation = dateOfIncorporation;
    return this;
  }

   /**
   * Get dateOfIncorporation
   * @return dateOfIncorporation
  **/
  @javax.annotation.Nullable
  public LocalDate getDateOfIncorporation() {
    return dateOfIncorporation;
  }


  public void setDateOfIncorporation(LocalDate dateOfIncorporation) {
    this.dateOfIncorporation = dateOfIncorporation;
  }


  public TrustApplicationAllOfAttributes stateOfIncorporation(String stateOfIncorporation) {
    
    this.stateOfIncorporation = stateOfIncorporation;
    return this;
  }

   /**
   * Get stateOfIncorporation
   * @return stateOfIncorporation
  **/
  @javax.annotation.Nonnull
  public String getStateOfIncorporation() {
    return stateOfIncorporation;
  }


  public void setStateOfIncorporation(String stateOfIncorporation) {
    this.stateOfIncorporation = stateOfIncorporation;
  }


  public TrustApplicationAllOfAttributes revocability(Revocability revocability) {
    
    this.revocability = revocability;
    return this;
  }

   /**
   * Get revocability
   * @return revocability
  **/
  @javax.annotation.Nullable
  public Revocability getRevocability() {
    return revocability;
  }


  public void setRevocability(Revocability revocability) {
    this.revocability = revocability;
  }


  public TrustApplicationAllOfAttributes sourceOfFunds(SourceOfFunds sourceOfFunds) {
    
    this.sourceOfFunds = sourceOfFunds;
    return this;
  }

   /**
   * Get sourceOfFunds
   * @return sourceOfFunds
  **/
  @javax.annotation.Nullable
  public SourceOfFunds getSourceOfFunds() {
    return sourceOfFunds;
  }


  public void setSourceOfFunds(SourceOfFunds sourceOfFunds) {
    this.sourceOfFunds = sourceOfFunds;
  }


  public TrustApplicationAllOfAttributes taxId(String taxId) {
    
    this.taxId = taxId;
    return this;
  }

   /**
   * Get taxId
   * @return taxId
  **/
  @javax.annotation.Nullable
  public String getTaxId() {
    return taxId;
  }


  public void setTaxId(String taxId) {
    this.taxId = taxId;
  }


  public TrustApplicationAllOfAttributes contact(TrustContact contact) {
    
    this.contact = contact;
    return this;
  }

   /**
   * Get contact
   * @return contact
  **/
  @javax.annotation.Nonnull
  public TrustContact getContact() {
    return contact;
  }


  public void setContact(TrustContact contact) {
    this.contact = contact;
  }


  public TrustApplicationAllOfAttributes trustees(List<Trustee> trustees) {
    
    this.trustees = trustees;
    return this;
  }

  public TrustApplicationAllOfAttributes addTrusteesItem(Trustee trusteesItem) {
    if (this.trustees == null) {
      this.trustees = new ArrayList<>();
    }
    this.trustees.add(trusteesItem);
    return this;
  }

   /**
   * Get trustees
   * @return trustees
  **/
  @javax.annotation.Nullable
  public List<Trustee> getTrustees() {
    return trustees;
  }


  public void setTrustees(List<Trustee> trustees) {
    this.trustees = trustees;
  }


  public TrustApplicationAllOfAttributes grantor(Grantor grantor) {
    
    this.grantor = grantor;
    return this;
  }

   /**
   * Get grantor
   * @return grantor
  **/
  @javax.annotation.Nullable
  public Grantor getGrantor() {
    return grantor;
  }


  public void setGrantor(Grantor grantor) {
    this.grantor = grantor;
  }


  public TrustApplicationAllOfAttributes ip(String ip) {
    
    this.ip = ip;
    return this;
  }

   /**
   * Get ip
   * @return ip
  **/
  @javax.annotation.Nullable
  public String getIp() {
    return ip;
  }


  public void setIp(String ip) {
    this.ip = ip;
  }


  public TrustApplicationAllOfAttributes decisionMethod(DecisionMethodEnum decisionMethod) {
    
    this.decisionMethod = decisionMethod;
    return this;
  }

   /**
   * Get decisionMethod
   * @return decisionMethod
  **/
  @javax.annotation.Nullable
  public DecisionMethodEnum getDecisionMethod() {
    return decisionMethod;
  }


  public void setDecisionMethod(DecisionMethodEnum decisionMethod) {
    this.decisionMethod = decisionMethod;
  }


  public TrustApplicationAllOfAttributes decisionUserId(String decisionUserId) {
    
    this.decisionUserId = decisionUserId;
    return this;
  }

   /**
   * Get decisionUserId
   * @return decisionUserId
  **/
  @javax.annotation.Nullable
  public String getDecisionUserId() {
    return decisionUserId;
  }


  public void setDecisionUserId(String decisionUserId) {
    this.decisionUserId = decisionUserId;
  }


  public TrustApplicationAllOfAttributes decisionReason(String decisionReason) {
    
    this.decisionReason = decisionReason;
    return this;
  }

   /**
   * Get decisionReason
   * @return decisionReason
  **/
  @javax.annotation.Nullable
  public String getDecisionReason() {
    return decisionReason;
  }


  public void setDecisionReason(String decisionReason) {
    this.decisionReason = decisionReason;
  }


  public TrustApplicationAllOfAttributes decisionDateTime(OffsetDateTime decisionDateTime) {
    
    this.decisionDateTime = decisionDateTime;
    return this;
  }

   /**
   * Get decisionDateTime
   * @return decisionDateTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDecisionDateTime() {
    return decisionDateTime;
  }


  public void setDecisionDateTime(OffsetDateTime decisionDateTime) {
    this.decisionDateTime = decisionDateTime;
  }


  public TrustApplicationAllOfAttributes tags(Object tags) {
    
    this.tags = tags;
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  public Object getTags() {
    return tags;
  }


  public void setTags(Object tags) {
    this.tags = tags;
  }


  public TrustApplicationAllOfAttributes riskRate(RiskRateEnum riskRate) {
    
    this.riskRate = riskRate;
    return this;
  }

   /**
   * Get riskRate
   * @return riskRate
  **/
  @javax.annotation.Nullable
  public RiskRateEnum getRiskRate() {
    return riskRate;
  }


  public void setRiskRate(RiskRateEnum riskRate) {
    this.riskRate = riskRate;
  }


  public TrustApplicationAllOfAttributes evaluationFlags(List<String> evaluationFlags) {
    
    this.evaluationFlags = evaluationFlags;
    return this;
  }

  public TrustApplicationAllOfAttributes addEvaluationFlagsItem(String evaluationFlagsItem) {
    if (this.evaluationFlags == null) {
      this.evaluationFlags = new ArrayList<>();
    }
    this.evaluationFlags.add(evaluationFlagsItem);
    return this;
  }

   /**
   * Get evaluationFlags
   * @return evaluationFlags
  **/
  @javax.annotation.Nullable
  public List<String> getEvaluationFlags() {
    return evaluationFlags;
  }


  public void setEvaluationFlags(List<String> evaluationFlags) {
    this.evaluationFlags = evaluationFlags;
  }


  public TrustApplicationAllOfAttributes ipLocationDetails(Object ipLocationDetails) {
    
    this.ipLocationDetails = ipLocationDetails;
    return this;
  }

   /**
   * Get ipLocationDetails
   * @return ipLocationDetails
  **/
  @javax.annotation.Nullable
  public Object getIpLocationDetails() {
    return ipLocationDetails;
  }


  public void setIpLocationDetails(Object ipLocationDetails) {
    this.ipLocationDetails = ipLocationDetails;
  }


  public TrustApplicationAllOfAttributes phoneLocationDetails(Object phoneLocationDetails) {
    
    this.phoneLocationDetails = phoneLocationDetails;
    return this;
  }

   /**
   * Get phoneLocationDetails
   * @return phoneLocationDetails
  **/
  @javax.annotation.Nullable
  public Object getPhoneLocationDetails() {
    return phoneLocationDetails;
  }


  public void setPhoneLocationDetails(Object phoneLocationDetails) {
    this.phoneLocationDetails = phoneLocationDetails;
  }


  public TrustApplicationAllOfAttributes archived(Boolean archived) {
    
    this.archived = archived;
    return this;
  }

   /**
   * Get archived
   * @return archived
  **/
  @javax.annotation.Nullable
  public Boolean getArchived() {
    return archived;
  }


  public void setArchived(Boolean archived) {
    this.archived = archived;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrustApplicationAllOfAttributes trustApplicationAllOfAttributes = (TrustApplicationAllOfAttributes) o;
    return Objects.equals(this.createdAt, trustApplicationAllOfAttributes.createdAt) &&
        Objects.equals(this.updatedAt, trustApplicationAllOfAttributes.updatedAt) &&
        Objects.equals(this.status, trustApplicationAllOfAttributes.status) &&
        Objects.equals(this.message, trustApplicationAllOfAttributes.message) &&
        Objects.equals(this.evaluationOutcome, trustApplicationAllOfAttributes.evaluationOutcome) &&
        Objects.equals(this.evaluationId, trustApplicationAllOfAttributes.evaluationId) &&
        Objects.equals(this.evaluationEntityId, trustApplicationAllOfAttributes.evaluationEntityId) &&
        Objects.equals(this.name, trustApplicationAllOfAttributes.name) &&
        Objects.equals(this.dateOfIncorporation, trustApplicationAllOfAttributes.dateOfIncorporation) &&
        Objects.equals(this.stateOfIncorporation, trustApplicationAllOfAttributes.stateOfIncorporation) &&
        Objects.equals(this.revocability, trustApplicationAllOfAttributes.revocability) &&
        Objects.equals(this.sourceOfFunds, trustApplicationAllOfAttributes.sourceOfFunds) &&
        Objects.equals(this.taxId, trustApplicationAllOfAttributes.taxId) &&
        Objects.equals(this.contact, trustApplicationAllOfAttributes.contact) &&
        Objects.equals(this.trustees, trustApplicationAllOfAttributes.trustees) &&
        Objects.equals(this.grantor, trustApplicationAllOfAttributes.grantor) &&
        Objects.equals(this.ip, trustApplicationAllOfAttributes.ip) &&
        Objects.equals(this.decisionMethod, trustApplicationAllOfAttributes.decisionMethod) &&
        Objects.equals(this.decisionUserId, trustApplicationAllOfAttributes.decisionUserId) &&
        Objects.equals(this.decisionReason, trustApplicationAllOfAttributes.decisionReason) &&
        Objects.equals(this.decisionDateTime, trustApplicationAllOfAttributes.decisionDateTime) &&
        Objects.equals(this.tags, trustApplicationAllOfAttributes.tags) &&
        Objects.equals(this.riskRate, trustApplicationAllOfAttributes.riskRate) &&
        Objects.equals(this.evaluationFlags, trustApplicationAllOfAttributes.evaluationFlags) &&
        Objects.equals(this.ipLocationDetails, trustApplicationAllOfAttributes.ipLocationDetails) &&
        Objects.equals(this.phoneLocationDetails, trustApplicationAllOfAttributes.phoneLocationDetails) &&
        Objects.equals(this.archived, trustApplicationAllOfAttributes.archived);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, updatedAt, status, message, evaluationOutcome, evaluationId, evaluationEntityId, name, dateOfIncorporation, stateOfIncorporation, revocability, sourceOfFunds, taxId, contact, trustees, grantor, ip, decisionMethod, decisionUserId, decisionReason, decisionDateTime, tags, riskRate, evaluationFlags, ipLocationDetails, phoneLocationDetails, archived);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrustApplicationAllOfAttributes {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    evaluationOutcome: ").append(toIndentedString(evaluationOutcome)).append("\n");
    sb.append("    evaluationId: ").append(toIndentedString(evaluationId)).append("\n");
    sb.append("    evaluationEntityId: ").append(toIndentedString(evaluationEntityId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    dateOfIncorporation: ").append(toIndentedString(dateOfIncorporation)).append("\n");
    sb.append("    stateOfIncorporation: ").append(toIndentedString(stateOfIncorporation)).append("\n");
    sb.append("    revocability: ").append(toIndentedString(revocability)).append("\n");
    sb.append("    sourceOfFunds: ").append(toIndentedString(sourceOfFunds)).append("\n");
    sb.append("    taxId: ").append(toIndentedString(taxId)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    trustees: ").append(toIndentedString(trustees)).append("\n");
    sb.append("    grantor: ").append(toIndentedString(grantor)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    decisionMethod: ").append(toIndentedString(decisionMethod)).append("\n");
    sb.append("    decisionUserId: ").append(toIndentedString(decisionUserId)).append("\n");
    sb.append("    decisionReason: ").append(toIndentedString(decisionReason)).append("\n");
    sb.append("    decisionDateTime: ").append(toIndentedString(decisionDateTime)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    riskRate: ").append(toIndentedString(riskRate)).append("\n");
    sb.append("    evaluationFlags: ").append(toIndentedString(evaluationFlags)).append("\n");
    sb.append("    ipLocationDetails: ").append(toIndentedString(ipLocationDetails)).append("\n");
    sb.append("    phoneLocationDetails: ").append(toIndentedString(phoneLocationDetails)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");
    openapiFields.add("status");
    openapiFields.add("message");
    openapiFields.add("evaluationOutcome");
    openapiFields.add("evaluationId");
    openapiFields.add("evaluationEntityId");
    openapiFields.add("name");
    openapiFields.add("dateOfIncorporation");
    openapiFields.add("stateOfIncorporation");
    openapiFields.add("revocability");
    openapiFields.add("sourceOfFunds");
    openapiFields.add("taxId");
    openapiFields.add("contact");
    openapiFields.add("trustees");
    openapiFields.add("grantor");
    openapiFields.add("ip");
    openapiFields.add("decisionMethod");
    openapiFields.add("decisionUserId");
    openapiFields.add("decisionReason");
    openapiFields.add("decisionDateTime");
    openapiFields.add("tags");
    openapiFields.add("riskRate");
    openapiFields.add("evaluationFlags");
    openapiFields.add("ipLocationDetails");
    openapiFields.add("phoneLocationDetails");
    openapiFields.add("archived");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("stateOfIncorporation");
    openapiRequiredFields.add("contact");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TrustApplicationAllOfAttributes
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrustApplicationAllOfAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrustApplicationAllOfAttributes is not found in the empty JSON string", TrustApplicationAllOfAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrustApplicationAllOfAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrustApplicationAllOfAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TrustApplicationAllOfAttributes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("evaluationOutcome") != null && !jsonObj.get("evaluationOutcome").isJsonNull()) && !jsonObj.get("evaluationOutcome").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationOutcome` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluationOutcome").toString()));
      }
      if ((jsonObj.get("evaluationId") != null && !jsonObj.get("evaluationId").isJsonNull()) && !jsonObj.get("evaluationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluationId").toString()));
      }
      if ((jsonObj.get("evaluationEntityId") != null && !jsonObj.get("evaluationEntityId").isJsonNull()) && !jsonObj.get("evaluationEntityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationEntityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluationEntityId").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("stateOfIncorporation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateOfIncorporation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateOfIncorporation").toString()));
      }
      if ((jsonObj.get("taxId") != null && !jsonObj.get("taxId").isJsonNull()) && !jsonObj.get("taxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxId").toString()));
      }
      // validate the required field `contact`
      TrustContact.validateJsonElement(jsonObj.get("contact"));
      if (jsonObj.get("trustees") != null && !jsonObj.get("trustees").isJsonNull()) {
        JsonArray jsonArraytrustees = jsonObj.getAsJsonArray("trustees");
        if (jsonArraytrustees != null) {
          // ensure the json data is an array
          if (!jsonObj.get("trustees").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `trustees` to be an array in the JSON string but got `%s`", jsonObj.get("trustees").toString()));
          }

          // validate the optional field `trustees` (array)
          for (int i = 0; i < jsonArraytrustees.size(); i++) {
            Trustee.validateJsonElement(jsonArraytrustees.get(i));
          };
        }
      }
      // validate the optional field `grantor`
      if (jsonObj.get("grantor") != null && !jsonObj.get("grantor").isJsonNull()) {
        Grantor.validateJsonElement(jsonObj.get("grantor"));
      }
      if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if ((jsonObj.get("decisionMethod") != null && !jsonObj.get("decisionMethod").isJsonNull()) && !jsonObj.get("decisionMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `decisionMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("decisionMethod").toString()));
      }
      if ((jsonObj.get("decisionUserId") != null && !jsonObj.get("decisionUserId").isJsonNull()) && !jsonObj.get("decisionUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `decisionUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("decisionUserId").toString()));
      }
      if ((jsonObj.get("decisionReason") != null && !jsonObj.get("decisionReason").isJsonNull()) && !jsonObj.get("decisionReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `decisionReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("decisionReason").toString()));
      }
      if ((jsonObj.get("riskRate") != null && !jsonObj.get("riskRate").isJsonNull()) && !jsonObj.get("riskRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `riskRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("riskRate").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("evaluationFlags") != null && !jsonObj.get("evaluationFlags").isJsonNull() && !jsonObj.get("evaluationFlags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationFlags` to be an array in the JSON string but got `%s`", jsonObj.get("evaluationFlags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrustApplicationAllOfAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrustApplicationAllOfAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrustApplicationAllOfAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrustApplicationAllOfAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<TrustApplicationAllOfAttributes>() {
           @Override
           public void write(JsonWriter out, TrustApplicationAllOfAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrustApplicationAllOfAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TrustApplicationAllOfAttributes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TrustApplicationAllOfAttributes
  * @throws IOException if the JSON string is invalid with respect to TrustApplicationAllOfAttributes
  */
  public static TrustApplicationAllOfAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrustApplicationAllOfAttributes.class);
  }

 /**
  * Convert an instance of TrustApplicationAllOfAttributes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

