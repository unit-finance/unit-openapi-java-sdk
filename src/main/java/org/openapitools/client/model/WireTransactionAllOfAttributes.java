/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Counterparty;
import org.openapitools.client.model.WirePaymentAllOfAttributesImadOmad;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WireTransactionAllOfAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class WireTransactionAllOfAttributes {
  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  /**
   * Gets or Sets direction
   */
  @JsonAdapter(DirectionEnum.Adapter.class)
  public enum DirectionEnum {
    CREDIT("Credit"),
    
    DEBIT("Debit");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DirectionEnum fromValue(String value) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DirectionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private DirectionEnum direction;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private Integer balance;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public static final String SERIALIZED_NAME_COUNTERPARTY = "counterparty";
  @SerializedName(SERIALIZED_NAME_COUNTERPARTY)
  private Counterparty counterparty;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SENDER_REFERENCE = "senderReference";
  @SerializedName(SERIALIZED_NAME_SENDER_REFERENCE)
  private String senderReference;

  public static final String SERIALIZED_NAME_REFERENCE_FOR_BENEFICIARY = "referenceForBeneficiary";
  @SerializedName(SERIALIZED_NAME_REFERENCE_FOR_BENEFICIARY)
  private String referenceForBeneficiary;

  public static final String SERIALIZED_NAME_ORIGINATOR_TO_BENEFICIARY_INFORMATION = "originatorToBeneficiaryInformation";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_TO_BENEFICIARY_INFORMATION)
  private String originatorToBeneficiaryInformation;

  public static final String SERIALIZED_NAME_BENEFICIARY_INFORMATION = "beneficiaryInformation";
  @SerializedName(SERIALIZED_NAME_BENEFICIARY_INFORMATION)
  private String beneficiaryInformation;

  public static final String SERIALIZED_NAME_BENEFICIARY_ADVICE_INFORMATION = "beneficiaryAdviceInformation";
  @SerializedName(SERIALIZED_NAME_BENEFICIARY_ADVICE_INFORMATION)
  private String beneficiaryAdviceInformation;

  public static final String SERIALIZED_NAME_IMAD_OMAD = "imadOmad";
  @SerializedName(SERIALIZED_NAME_IMAD_OMAD)
  private WirePaymentAllOfAttributesImadOmad imadOmad;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Object tags;

  public WireTransactionAllOfAttributes() {
  }

  public WireTransactionAllOfAttributes createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public WireTransactionAllOfAttributes direction(DirectionEnum direction) {
    
    this.direction = direction;
    return this;
  }

   /**
   * Get direction
   * @return direction
  **/
  @javax.annotation.Nonnull
  public DirectionEnum getDirection() {
    return direction;
  }


  public void setDirection(DirectionEnum direction) {
    this.direction = direction;
  }


  public WireTransactionAllOfAttributes amount(Integer amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nonnull
  public Integer getAmount() {
    return amount;
  }


  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public WireTransactionAllOfAttributes balance(Integer balance) {
    
    this.balance = balance;
    return this;
  }

   /**
   * Get balance
   * @return balance
  **/
  @javax.annotation.Nonnull
  public Integer getBalance() {
    return balance;
  }


  public void setBalance(Integer balance) {
    this.balance = balance;
  }


  public WireTransactionAllOfAttributes summary(String summary) {
    
    this.summary = summary;
    return this;
  }

   /**
   * Get summary
   * @return summary
  **/
  @javax.annotation.Nonnull
  public String getSummary() {
    return summary;
  }


  public void setSummary(String summary) {
    this.summary = summary;
  }


  public WireTransactionAllOfAttributes counterparty(Counterparty counterparty) {
    
    this.counterparty = counterparty;
    return this;
  }

   /**
   * Get counterparty
   * @return counterparty
  **/
  @javax.annotation.Nonnull
  public Counterparty getCounterparty() {
    return counterparty;
  }


  public void setCounterparty(Counterparty counterparty) {
    this.counterparty = counterparty;
  }


  public WireTransactionAllOfAttributes description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public WireTransactionAllOfAttributes senderReference(String senderReference) {
    
    this.senderReference = senderReference;
    return this;
  }

   /**
   * Get senderReference
   * @return senderReference
  **/
  @javax.annotation.Nullable
  public String getSenderReference() {
    return senderReference;
  }


  public void setSenderReference(String senderReference) {
    this.senderReference = senderReference;
  }


  public WireTransactionAllOfAttributes referenceForBeneficiary(String referenceForBeneficiary) {
    
    this.referenceForBeneficiary = referenceForBeneficiary;
    return this;
  }

   /**
   * Get referenceForBeneficiary
   * @return referenceForBeneficiary
  **/
  @javax.annotation.Nullable
  public String getReferenceForBeneficiary() {
    return referenceForBeneficiary;
  }


  public void setReferenceForBeneficiary(String referenceForBeneficiary) {
    this.referenceForBeneficiary = referenceForBeneficiary;
  }


  public WireTransactionAllOfAttributes originatorToBeneficiaryInformation(String originatorToBeneficiaryInformation) {
    
    this.originatorToBeneficiaryInformation = originatorToBeneficiaryInformation;
    return this;
  }

   /**
   * Get originatorToBeneficiaryInformation
   * @return originatorToBeneficiaryInformation
  **/
  @javax.annotation.Nullable
  public String getOriginatorToBeneficiaryInformation() {
    return originatorToBeneficiaryInformation;
  }


  public void setOriginatorToBeneficiaryInformation(String originatorToBeneficiaryInformation) {
    this.originatorToBeneficiaryInformation = originatorToBeneficiaryInformation;
  }


  public WireTransactionAllOfAttributes beneficiaryInformation(String beneficiaryInformation) {
    
    this.beneficiaryInformation = beneficiaryInformation;
    return this;
  }

   /**
   * Get beneficiaryInformation
   * @return beneficiaryInformation
  **/
  @javax.annotation.Nullable
  public String getBeneficiaryInformation() {
    return beneficiaryInformation;
  }


  public void setBeneficiaryInformation(String beneficiaryInformation) {
    this.beneficiaryInformation = beneficiaryInformation;
  }


  public WireTransactionAllOfAttributes beneficiaryAdviceInformation(String beneficiaryAdviceInformation) {
    
    this.beneficiaryAdviceInformation = beneficiaryAdviceInformation;
    return this;
  }

   /**
   * Get beneficiaryAdviceInformation
   * @return beneficiaryAdviceInformation
  **/
  @javax.annotation.Nullable
  public String getBeneficiaryAdviceInformation() {
    return beneficiaryAdviceInformation;
  }


  public void setBeneficiaryAdviceInformation(String beneficiaryAdviceInformation) {
    this.beneficiaryAdviceInformation = beneficiaryAdviceInformation;
  }


  public WireTransactionAllOfAttributes imadOmad(WirePaymentAllOfAttributesImadOmad imadOmad) {
    
    this.imadOmad = imadOmad;
    return this;
  }

   /**
   * Get imadOmad
   * @return imadOmad
  **/
  @javax.annotation.Nullable
  public WirePaymentAllOfAttributesImadOmad getImadOmad() {
    return imadOmad;
  }


  public void setImadOmad(WirePaymentAllOfAttributesImadOmad imadOmad) {
    this.imadOmad = imadOmad;
  }


  public WireTransactionAllOfAttributes tags(Object tags) {
    
    this.tags = tags;
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  public Object getTags() {
    return tags;
  }


  public void setTags(Object tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WireTransactionAllOfAttributes wireTransactionAllOfAttributes = (WireTransactionAllOfAttributes) o;
    return Objects.equals(this.createdAt, wireTransactionAllOfAttributes.createdAt) &&
        Objects.equals(this.direction, wireTransactionAllOfAttributes.direction) &&
        Objects.equals(this.amount, wireTransactionAllOfAttributes.amount) &&
        Objects.equals(this.balance, wireTransactionAllOfAttributes.balance) &&
        Objects.equals(this.summary, wireTransactionAllOfAttributes.summary) &&
        Objects.equals(this.counterparty, wireTransactionAllOfAttributes.counterparty) &&
        Objects.equals(this.description, wireTransactionAllOfAttributes.description) &&
        Objects.equals(this.senderReference, wireTransactionAllOfAttributes.senderReference) &&
        Objects.equals(this.referenceForBeneficiary, wireTransactionAllOfAttributes.referenceForBeneficiary) &&
        Objects.equals(this.originatorToBeneficiaryInformation, wireTransactionAllOfAttributes.originatorToBeneficiaryInformation) &&
        Objects.equals(this.beneficiaryInformation, wireTransactionAllOfAttributes.beneficiaryInformation) &&
        Objects.equals(this.beneficiaryAdviceInformation, wireTransactionAllOfAttributes.beneficiaryAdviceInformation) &&
        Objects.equals(this.imadOmad, wireTransactionAllOfAttributes.imadOmad) &&
        Objects.equals(this.tags, wireTransactionAllOfAttributes.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, direction, amount, balance, summary, counterparty, description, senderReference, referenceForBeneficiary, originatorToBeneficiaryInformation, beneficiaryInformation, beneficiaryAdviceInformation, imadOmad, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WireTransactionAllOfAttributes {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    counterparty: ").append(toIndentedString(counterparty)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    senderReference: ").append(toIndentedString(senderReference)).append("\n");
    sb.append("    referenceForBeneficiary: ").append(toIndentedString(referenceForBeneficiary)).append("\n");
    sb.append("    originatorToBeneficiaryInformation: ").append(toIndentedString(originatorToBeneficiaryInformation)).append("\n");
    sb.append("    beneficiaryInformation: ").append(toIndentedString(beneficiaryInformation)).append("\n");
    sb.append("    beneficiaryAdviceInformation: ").append(toIndentedString(beneficiaryAdviceInformation)).append("\n");
    sb.append("    imadOmad: ").append(toIndentedString(imadOmad)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdAt");
    openapiFields.add("direction");
    openapiFields.add("amount");
    openapiFields.add("balance");
    openapiFields.add("summary");
    openapiFields.add("counterparty");
    openapiFields.add("description");
    openapiFields.add("senderReference");
    openapiFields.add("referenceForBeneficiary");
    openapiFields.add("originatorToBeneficiaryInformation");
    openapiFields.add("beneficiaryInformation");
    openapiFields.add("beneficiaryAdviceInformation");
    openapiFields.add("imadOmad");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("direction");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("balance");
    openapiRequiredFields.add("summary");
    openapiRequiredFields.add("counterparty");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to WireTransactionAllOfAttributes
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WireTransactionAllOfAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WireTransactionAllOfAttributes is not found in the empty JSON string", WireTransactionAllOfAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WireTransactionAllOfAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WireTransactionAllOfAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WireTransactionAllOfAttributes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direction").toString()));
      }
      if (!jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
      // validate the required field `counterparty`
      Counterparty.validateJsonElement(jsonObj.get("counterparty"));
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("senderReference") != null && !jsonObj.get("senderReference").isJsonNull()) && !jsonObj.get("senderReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `senderReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("senderReference").toString()));
      }
      if ((jsonObj.get("referenceForBeneficiary") != null && !jsonObj.get("referenceForBeneficiary").isJsonNull()) && !jsonObj.get("referenceForBeneficiary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceForBeneficiary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceForBeneficiary").toString()));
      }
      if ((jsonObj.get("originatorToBeneficiaryInformation") != null && !jsonObj.get("originatorToBeneficiaryInformation").isJsonNull()) && !jsonObj.get("originatorToBeneficiaryInformation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originatorToBeneficiaryInformation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originatorToBeneficiaryInformation").toString()));
      }
      if ((jsonObj.get("beneficiaryInformation") != null && !jsonObj.get("beneficiaryInformation").isJsonNull()) && !jsonObj.get("beneficiaryInformation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beneficiaryInformation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beneficiaryInformation").toString()));
      }
      if ((jsonObj.get("beneficiaryAdviceInformation") != null && !jsonObj.get("beneficiaryAdviceInformation").isJsonNull()) && !jsonObj.get("beneficiaryAdviceInformation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beneficiaryAdviceInformation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beneficiaryAdviceInformation").toString()));
      }
      // validate the optional field `imadOmad`
      if (jsonObj.get("imadOmad") != null && !jsonObj.get("imadOmad").isJsonNull()) {
        WirePaymentAllOfAttributesImadOmad.validateJsonElement(jsonObj.get("imadOmad"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WireTransactionAllOfAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WireTransactionAllOfAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WireTransactionAllOfAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WireTransactionAllOfAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<WireTransactionAllOfAttributes>() {
           @Override
           public void write(JsonWriter out, WireTransactionAllOfAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WireTransactionAllOfAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WireTransactionAllOfAttributes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WireTransactionAllOfAttributes
  * @throws IOException if the JSON string is invalid with respect to WireTransactionAllOfAttributes
  */
  public static WireTransactionAllOfAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WireTransactionAllOfAttributes.class);
  }

 /**
  * Convert an instance of WireTransactionAllOfAttributes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

