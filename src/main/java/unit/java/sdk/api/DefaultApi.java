/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package unit.java.sdk.api;

import unit.java.sdk.ApiClient;
import unit.java.sdk.ApiException;
import unit.java.sdk.ApiResponse;
import unit.java.sdk.Pair;

import unit.java.sdk.model.CreateStopPayment;
import unit.java.sdk.model.ExecuteFilterParameter20;
import unit.java.sdk.model.ListPageParametersObject;
import unit.java.sdk.model.StopPaymentListResponse;
import unit.java.sdk.model.StopPaymentResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DefaultApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public DefaultApi() {
    this(new ApiClient());
  }

  public DefaultApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Get a list of stop payments
   * 
   * @param page  (optional)
   * @param filter  (optional)
   * @param sort  (optional)
   * @return StopPaymentListResponse
   * @throws ApiException if fails to make API call
   */
  public StopPaymentListResponse execute(ListPageParametersObject page, ExecuteFilterParameter20 filter, String sort) throws ApiException {
    ApiResponse<StopPaymentListResponse> localVarResponse = executeWithHttpInfo(page, filter, sort);
    return localVarResponse.getData();
  }

  /**
   * Get a list of stop payments
   * 
   * @param page  (optional)
   * @param filter  (optional)
   * @param sort  (optional)
   * @return ApiResponse&lt;StopPaymentListResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<StopPaymentListResponse> executeWithHttpInfo(ListPageParametersObject page, ExecuteFilterParameter20 filter, String sort) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = executeRequestBuilder(page, filter, sort);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("execute", localVarResponse);
        }
        return new ApiResponse<StopPaymentListResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<StopPaymentListResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder executeRequestBuilder(ListPageParametersObject page, ExecuteFilterParameter20 filter, String sort) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/stop-payments";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "page";
    if (page != null) {
      localVarQueryStringJoiner.add(page.toUrlQueryString("page"));
    }
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "sort";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sort", sort));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create Stop Payment
   * 
   * @param createStopPayment  (required)
   * @return StopPaymentResponse
   * @throws ApiException if fails to make API call
   */
  public StopPaymentResponse execute_0(CreateStopPayment createStopPayment) throws ApiException {
    ApiResponse<StopPaymentResponse> localVarResponse = execute_0WithHttpInfo(createStopPayment);
    return localVarResponse.getData();
  }

  /**
   * Create Stop Payment
   * 
   * @param createStopPayment  (required)
   * @return ApiResponse&lt;StopPaymentResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<StopPaymentResponse> execute_0WithHttpInfo(CreateStopPayment createStopPayment) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = execute_0RequestBuilder(createStopPayment);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("execute_0", localVarResponse);
        }
        return new ApiResponse<StopPaymentResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<StopPaymentResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder execute_0RequestBuilder(CreateStopPayment createStopPayment) throws ApiException {
    // verify the required parameter 'createStopPayment' is set
    if (createStopPayment == null) {
      throw new ApiException(400, "Missing the required parameter 'createStopPayment' when calling execute_0");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/stop-payments";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createStopPayment);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get details of a specific stop payment
   * 
   * @param stopPaymentId ID of the stop payment (required)
   * @return StopPaymentResponse
   * @throws ApiException if fails to make API call
   */
  public StopPaymentResponse execute_1(String stopPaymentId) throws ApiException {
    ApiResponse<StopPaymentResponse> localVarResponse = execute_1WithHttpInfo(stopPaymentId);
    return localVarResponse.getData();
  }

  /**
   * Get details of a specific stop payment
   * 
   * @param stopPaymentId ID of the stop payment (required)
   * @return ApiResponse&lt;StopPaymentResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<StopPaymentResponse> execute_1WithHttpInfo(String stopPaymentId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = execute_1RequestBuilder(stopPaymentId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("execute_1", localVarResponse);
        }
        return new ApiResponse<StopPaymentResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<StopPaymentResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder execute_1RequestBuilder(String stopPaymentId) throws ApiException {
    // verify the required parameter 'stopPaymentId' is set
    if (stopPaymentId == null) {
      throw new ApiException(400, "Missing the required parameter 'stopPaymentId' when calling execute_1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/stop-payments/{stop_payment_id}"
        .replace("{stop_payment_id}", ApiClient.urlEncode(stopPaymentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Cancel a stop payment
   * 
   * @param stopPaymentId ID of the stop payment (required)
   * @throws ApiException if fails to make API call
   */
  public void execute_2(String stopPaymentId) throws ApiException {
    execute_2WithHttpInfo(stopPaymentId);
  }

  /**
   * Cancel a stop payment
   * 
   * @param stopPaymentId ID of the stop payment (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> execute_2WithHttpInfo(String stopPaymentId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = execute_2RequestBuilder(stopPaymentId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("execute_2", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder execute_2RequestBuilder(String stopPaymentId) throws ApiException {
    // verify the required parameter 'stopPaymentId' is set
    if (stopPaymentId == null) {
      throw new ApiException(400, "Missing the required parameter 'stopPaymentId' when calling execute_2");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/stop-payments/{stop_payment_id}"
        .replace("{stop_payment_id}", ApiClient.urlEncode(stopPaymentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Disable a stop payment
   * 
   * @param stopPaymentId ID of the stop payment (required)
   * @return StopPaymentResponse
   * @throws ApiException if fails to make API call
   */
  public StopPaymentResponse execute_3(String stopPaymentId) throws ApiException {
    ApiResponse<StopPaymentResponse> localVarResponse = execute_3WithHttpInfo(stopPaymentId);
    return localVarResponse.getData();
  }

  /**
   * Disable a stop payment
   * 
   * @param stopPaymentId ID of the stop payment (required)
   * @return ApiResponse&lt;StopPaymentResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<StopPaymentResponse> execute_3WithHttpInfo(String stopPaymentId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = execute_3RequestBuilder(stopPaymentId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("execute_3", localVarResponse);
        }
        return new ApiResponse<StopPaymentResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<StopPaymentResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder execute_3RequestBuilder(String stopPaymentId) throws ApiException {
    // verify the required parameter 'stopPaymentId' is set
    if (stopPaymentId == null) {
      throw new ApiException(400, "Missing the required parameter 'stopPaymentId' when calling execute_3");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/stop-payments/{stop_payment_id}/disable"
        .replace("{stop_payment_id}", ApiClient.urlEncode(stopPaymentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
