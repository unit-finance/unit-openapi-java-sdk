/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package unit.java.sdk.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import unit.java.sdk.model.ApplicationRelationshipsBeneficialOwners;
import unit.java.sdk.model.ApplicationRelationshipsBeneficiaries;
import unit.java.sdk.model.ApplicationRelationshipsTrustees;
import unit.java.sdk.model.DocumentsRelationship;
import unit.java.sdk.model.OrgRelationship;
import unit.java.sdk.model.Relationship;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * ApplicationRelationships
 */
@JsonPropertyOrder({
  ApplicationRelationships.JSON_PROPERTY_ORG,
  ApplicationRelationships.JSON_PROPERTY_CUSTOMER,
  ApplicationRelationships.JSON_PROPERTY_DOCUMENTS,
  ApplicationRelationships.JSON_PROPERTY_APPLICATION_FORM,
  ApplicationRelationships.JSON_PROPERTY_TRUSTEES,
  ApplicationRelationships.JSON_PROPERTY_BENEFICIARIES,
  ApplicationRelationships.JSON_PROPERTY_BENEFICIAL_OWNERS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ApplicationRelationships {
  public static final String JSON_PROPERTY_ORG = "org";
  private OrgRelationship org;

  public static final String JSON_PROPERTY_CUSTOMER = "customer";
  private Relationship customer;

  public static final String JSON_PROPERTY_DOCUMENTS = "documents";
  private DocumentsRelationship documents;

  public static final String JSON_PROPERTY_APPLICATION_FORM = "applicationForm";
  private Relationship applicationForm;

  public static final String JSON_PROPERTY_TRUSTEES = "trustees";
  private ApplicationRelationshipsTrustees trustees;

  public static final String JSON_PROPERTY_BENEFICIARIES = "beneficiaries";
  private ApplicationRelationshipsBeneficiaries beneficiaries;

  public static final String JSON_PROPERTY_BENEFICIAL_OWNERS = "beneficialOwners";
  private ApplicationRelationshipsBeneficialOwners beneficialOwners;

  public ApplicationRelationships() { 
  }

  public ApplicationRelationships org(OrgRelationship org) {
    this.org = org;
    return this;
  }

   /**
   * Get org
   * @return org
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OrgRelationship getOrg() {
    return org;
  }


  @JsonProperty(JSON_PROPERTY_ORG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrg(OrgRelationship org) {
    this.org = org;
  }


  public ApplicationRelationships customer(Relationship customer) {
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CUSTOMER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Relationship getCustomer() {
    return customer;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOMER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomer(Relationship customer) {
    this.customer = customer;
  }


  public ApplicationRelationships documents(DocumentsRelationship documents) {
    this.documents = documents;
    return this;
  }

   /**
   * Get documents
   * @return documents
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOCUMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DocumentsRelationship getDocuments() {
    return documents;
  }


  @JsonProperty(JSON_PROPERTY_DOCUMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDocuments(DocumentsRelationship documents) {
    this.documents = documents;
  }


  public ApplicationRelationships applicationForm(Relationship applicationForm) {
    this.applicationForm = applicationForm;
    return this;
  }

   /**
   * Get applicationForm
   * @return applicationForm
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_APPLICATION_FORM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Relationship getApplicationForm() {
    return applicationForm;
  }


  @JsonProperty(JSON_PROPERTY_APPLICATION_FORM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setApplicationForm(Relationship applicationForm) {
    this.applicationForm = applicationForm;
  }


  public ApplicationRelationships trustees(ApplicationRelationshipsTrustees trustees) {
    this.trustees = trustees;
    return this;
  }

   /**
   * Get trustees
   * @return trustees
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRUSTEES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ApplicationRelationshipsTrustees getTrustees() {
    return trustees;
  }


  @JsonProperty(JSON_PROPERTY_TRUSTEES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTrustees(ApplicationRelationshipsTrustees trustees) {
    this.trustees = trustees;
  }


  public ApplicationRelationships beneficiaries(ApplicationRelationshipsBeneficiaries beneficiaries) {
    this.beneficiaries = beneficiaries;
    return this;
  }

   /**
   * Get beneficiaries
   * @return beneficiaries
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BENEFICIARIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ApplicationRelationshipsBeneficiaries getBeneficiaries() {
    return beneficiaries;
  }


  @JsonProperty(JSON_PROPERTY_BENEFICIARIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBeneficiaries(ApplicationRelationshipsBeneficiaries beneficiaries) {
    this.beneficiaries = beneficiaries;
  }


  public ApplicationRelationships beneficialOwners(ApplicationRelationshipsBeneficialOwners beneficialOwners) {
    this.beneficialOwners = beneficialOwners;
    return this;
  }

   /**
   * Get beneficialOwners
   * @return beneficialOwners
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BENEFICIAL_OWNERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ApplicationRelationshipsBeneficialOwners getBeneficialOwners() {
    return beneficialOwners;
  }


  @JsonProperty(JSON_PROPERTY_BENEFICIAL_OWNERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBeneficialOwners(ApplicationRelationshipsBeneficialOwners beneficialOwners) {
    this.beneficialOwners = beneficialOwners;
  }


  /**
   * Return true if this applicationRelationships object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationRelationships applicationRelationships = (ApplicationRelationships) o;
    return Objects.equals(this.org, applicationRelationships.org) &&
        Objects.equals(this.customer, applicationRelationships.customer) &&
        Objects.equals(this.documents, applicationRelationships.documents) &&
        Objects.equals(this.applicationForm, applicationRelationships.applicationForm) &&
        Objects.equals(this.trustees, applicationRelationships.trustees) &&
        Objects.equals(this.beneficiaries, applicationRelationships.beneficiaries) &&
        Objects.equals(this.beneficialOwners, applicationRelationships.beneficialOwners);
  }

  @Override
  public int hashCode() {
    return Objects.hash(org, customer, documents, applicationForm, trustees, beneficiaries, beneficialOwners);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationRelationships {\n");
    sb.append("    org: ").append(toIndentedString(org)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    applicationForm: ").append(toIndentedString(applicationForm)).append("\n");
    sb.append("    trustees: ").append(toIndentedString(trustees)).append("\n");
    sb.append("    beneficiaries: ").append(toIndentedString(beneficiaries)).append("\n");
    sb.append("    beneficialOwners: ").append(toIndentedString(beneficialOwners)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `org` to the URL query string
    if (getOrg() != null) {
      joiner.add(getOrg().toUrlQueryString(prefix + "org" + suffix));
    }

    // add `customer` to the URL query string
    if (getCustomer() != null) {
      joiner.add(getCustomer().toUrlQueryString(prefix + "customer" + suffix));
    }

    // add `documents` to the URL query string
    if (getDocuments() != null) {
      joiner.add(String.format("%sdocuments%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDocuments()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `applicationForm` to the URL query string
    if (getApplicationForm() != null) {
      joiner.add(getApplicationForm().toUrlQueryString(prefix + "applicationForm" + suffix));
    }

    // add `trustees` to the URL query string
    if (getTrustees() != null) {
      joiner.add(getTrustees().toUrlQueryString(prefix + "trustees" + suffix));
    }

    // add `beneficiaries` to the URL query string
    if (getBeneficiaries() != null) {
      joiner.add(getBeneficiaries().toUrlQueryString(prefix + "beneficiaries" + suffix));
    }

    // add `beneficialOwners` to the URL query string
    if (getBeneficialOwners() != null) {
      joiner.add(getBeneficialOwners().toUrlQueryString(prefix + "beneficialOwners" + suffix));
    }

    return joiner.toString();
  }
}

