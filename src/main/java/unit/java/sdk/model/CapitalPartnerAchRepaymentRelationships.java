/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package unit.java.sdk.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import unit.java.sdk.model.AchRepaymentRelationshipsAllOfCounterparty;
import unit.java.sdk.model.ReceivedPaymentRelationshipsCustomer;
import unit.java.sdk.model.RepaymentRelationshipsBaseCreditAccount;
import unit.java.sdk.model.RepaymentRelationshipsBaseOrg;
import unit.java.sdk.model.RepaymentRelationshipsBasePayment;
import unit.java.sdk.model.RepaymentRelationshipsBaseRecurringPayment;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * CapitalPartnerAchRepaymentRelationships
 */
@JsonPropertyOrder({
  CapitalPartnerAchRepaymentRelationships.JSON_PROPERTY_CREDIT_ACCOUNT,
  CapitalPartnerAchRepaymentRelationships.JSON_PROPERTY_ORG,
  CapitalPartnerAchRepaymentRelationships.JSON_PROPERTY_CUSTOMER,
  CapitalPartnerAchRepaymentRelationships.JSON_PROPERTY_PAYMENT,
  CapitalPartnerAchRepaymentRelationships.JSON_PROPERTY_RECURRING_PAYMENT,
  CapitalPartnerAchRepaymentRelationships.JSON_PROPERTY_COUNTERPARTY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CapitalPartnerAchRepaymentRelationships {
  public static final String JSON_PROPERTY_CREDIT_ACCOUNT = "creditAccount";
  private RepaymentRelationshipsBaseCreditAccount creditAccount;

  public static final String JSON_PROPERTY_ORG = "org";
  private RepaymentRelationshipsBaseOrg org;

  public static final String JSON_PROPERTY_CUSTOMER = "customer";
  private ReceivedPaymentRelationshipsCustomer customer;

  public static final String JSON_PROPERTY_PAYMENT = "payment";
  private RepaymentRelationshipsBasePayment payment;

  public static final String JSON_PROPERTY_RECURRING_PAYMENT = "recurringPayment";
  private RepaymentRelationshipsBaseRecurringPayment recurringPayment;

  public static final String JSON_PROPERTY_COUNTERPARTY = "counterparty";
  private AchRepaymentRelationshipsAllOfCounterparty counterparty;

  public CapitalPartnerAchRepaymentRelationships() { 
  }

  public CapitalPartnerAchRepaymentRelationships creditAccount(RepaymentRelationshipsBaseCreditAccount creditAccount) {
    this.creditAccount = creditAccount;
    return this;
  }

   /**
   * Get creditAccount
   * @return creditAccount
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREDIT_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public RepaymentRelationshipsBaseCreditAccount getCreditAccount() {
    return creditAccount;
  }


  @JsonProperty(JSON_PROPERTY_CREDIT_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreditAccount(RepaymentRelationshipsBaseCreditAccount creditAccount) {
    this.creditAccount = creditAccount;
  }


  public CapitalPartnerAchRepaymentRelationships org(RepaymentRelationshipsBaseOrg org) {
    this.org = org;
    return this;
  }

   /**
   * Get org
   * @return org
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ORG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public RepaymentRelationshipsBaseOrg getOrg() {
    return org;
  }


  @JsonProperty(JSON_PROPERTY_ORG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOrg(RepaymentRelationshipsBaseOrg org) {
    this.org = org;
  }


  public CapitalPartnerAchRepaymentRelationships customer(ReceivedPaymentRelationshipsCustomer customer) {
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CUSTOMER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ReceivedPaymentRelationshipsCustomer getCustomer() {
    return customer;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOMER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomer(ReceivedPaymentRelationshipsCustomer customer) {
    this.customer = customer;
  }


  public CapitalPartnerAchRepaymentRelationships payment(RepaymentRelationshipsBasePayment payment) {
    this.payment = payment;
    return this;
  }

   /**
   * Get payment
   * @return payment
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PAYMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public RepaymentRelationshipsBasePayment getPayment() {
    return payment;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPayment(RepaymentRelationshipsBasePayment payment) {
    this.payment = payment;
  }


  public CapitalPartnerAchRepaymentRelationships recurringPayment(RepaymentRelationshipsBaseRecurringPayment recurringPayment) {
    this.recurringPayment = recurringPayment;
    return this;
  }

   /**
   * Get recurringPayment
   * @return recurringPayment
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RECURRING_PAYMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RepaymentRelationshipsBaseRecurringPayment getRecurringPayment() {
    return recurringPayment;
  }


  @JsonProperty(JSON_PROPERTY_RECURRING_PAYMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRecurringPayment(RepaymentRelationshipsBaseRecurringPayment recurringPayment) {
    this.recurringPayment = recurringPayment;
  }


  public CapitalPartnerAchRepaymentRelationships counterparty(AchRepaymentRelationshipsAllOfCounterparty counterparty) {
    this.counterparty = counterparty;
    return this;
  }

   /**
   * Get counterparty
   * @return counterparty
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNTERPARTY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public AchRepaymentRelationshipsAllOfCounterparty getCounterparty() {
    return counterparty;
  }


  @JsonProperty(JSON_PROPERTY_COUNTERPARTY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCounterparty(AchRepaymentRelationshipsAllOfCounterparty counterparty) {
    this.counterparty = counterparty;
  }


  /**
   * Return true if this CapitalPartnerAchRepaymentRelationships object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CapitalPartnerAchRepaymentRelationships capitalPartnerAchRepaymentRelationships = (CapitalPartnerAchRepaymentRelationships) o;
    return Objects.equals(this.creditAccount, capitalPartnerAchRepaymentRelationships.creditAccount) &&
        Objects.equals(this.org, capitalPartnerAchRepaymentRelationships.org) &&
        Objects.equals(this.customer, capitalPartnerAchRepaymentRelationships.customer) &&
        Objects.equals(this.payment, capitalPartnerAchRepaymentRelationships.payment) &&
        Objects.equals(this.recurringPayment, capitalPartnerAchRepaymentRelationships.recurringPayment) &&
        Objects.equals(this.counterparty, capitalPartnerAchRepaymentRelationships.counterparty);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creditAccount, org, customer, payment, recurringPayment, counterparty);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CapitalPartnerAchRepaymentRelationships {\n");
    sb.append("    creditAccount: ").append(toIndentedString(creditAccount)).append("\n");
    sb.append("    org: ").append(toIndentedString(org)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    payment: ").append(toIndentedString(payment)).append("\n");
    sb.append("    recurringPayment: ").append(toIndentedString(recurringPayment)).append("\n");
    sb.append("    counterparty: ").append(toIndentedString(counterparty)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `creditAccount` to the URL query string
    if (getCreditAccount() != null) {
      joiner.add(getCreditAccount().toUrlQueryString(prefix + "creditAccount" + suffix));
    }

    // add `org` to the URL query string
    if (getOrg() != null) {
      joiner.add(getOrg().toUrlQueryString(prefix + "org" + suffix));
    }

    // add `customer` to the URL query string
    if (getCustomer() != null) {
      joiner.add(getCustomer().toUrlQueryString(prefix + "customer" + suffix));
    }

    // add `payment` to the URL query string
    if (getPayment() != null) {
      joiner.add(getPayment().toUrlQueryString(prefix + "payment" + suffix));
    }

    // add `recurringPayment` to the URL query string
    if (getRecurringPayment() != null) {
      joiner.add(getRecurringPayment().toUrlQueryString(prefix + "recurringPayment" + suffix));
    }

    // add `counterparty` to the URL query string
    if (getCounterparty() != null) {
      joiner.add(getCounterparty().toUrlQueryString(prefix + "counterparty" + suffix));
    }

    return joiner.toString();
  }
}

