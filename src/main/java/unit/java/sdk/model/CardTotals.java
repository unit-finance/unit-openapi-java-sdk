/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package unit.java.sdk.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import unit.java.sdk.ApiClient;
/**
 * CardTotals
 */
@JsonPropertyOrder({
  CardTotals.JSON_PROPERTY_WITHDRAWALS,
  CardTotals.JSON_PROPERTY_DEPOSITS,
  CardTotals.JSON_PROPERTY_PURCHASES,
  CardTotals.JSON_PROPERTY_CARD_TRANSACTIONS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class CardTotals {
  public static final String JSON_PROPERTY_WITHDRAWALS = "withdrawals";
  private Long withdrawals;

  public static final String JSON_PROPERTY_DEPOSITS = "deposits";
  private Long deposits;

  public static final String JSON_PROPERTY_PURCHASES = "purchases";
  private Long purchases;

  public static final String JSON_PROPERTY_CARD_TRANSACTIONS = "cardTransactions";
  private Long cardTransactions;

  public CardTotals() { 
  }

  public CardTotals withdrawals(Long withdrawals) {
    this.withdrawals = withdrawals;
    return this;
  }

  /**
   * Get withdrawals
   * @return withdrawals
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_WITHDRAWALS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Long getWithdrawals() {
    return withdrawals;
  }


  @JsonProperty(JSON_PROPERTY_WITHDRAWALS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setWithdrawals(Long withdrawals) {
    this.withdrawals = withdrawals;
  }


  public CardTotals deposits(Long deposits) {
    this.deposits = deposits;
    return this;
  }

  /**
   * Get deposits
   * @return deposits
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DEPOSITS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Long getDeposits() {
    return deposits;
  }


  @JsonProperty(JSON_PROPERTY_DEPOSITS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDeposits(Long deposits) {
    this.deposits = deposits;
  }


  public CardTotals purchases(Long purchases) {
    this.purchases = purchases;
    return this;
  }

  /**
   * Get purchases
   * @return purchases
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PURCHASES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Long getPurchases() {
    return purchases;
  }


  @JsonProperty(JSON_PROPERTY_PURCHASES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPurchases(Long purchases) {
    this.purchases = purchases;
  }


  public CardTotals cardTransactions(Long cardTransactions) {
    this.cardTransactions = cardTransactions;
    return this;
  }

  /**
   * Get cardTransactions
   * @return cardTransactions
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CARD_TRANSACTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Long getCardTransactions() {
    return cardTransactions;
  }


  @JsonProperty(JSON_PROPERTY_CARD_TRANSACTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCardTransactions(Long cardTransactions) {
    this.cardTransactions = cardTransactions;
  }


  /**
   * Return true if this CardTotals object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardTotals cardTotals = (CardTotals) o;
    return Objects.equals(this.withdrawals, cardTotals.withdrawals) &&
        Objects.equals(this.deposits, cardTotals.deposits) &&
        Objects.equals(this.purchases, cardTotals.purchases) &&
        Objects.equals(this.cardTransactions, cardTotals.cardTransactions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(withdrawals, deposits, purchases, cardTransactions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardTotals {\n");
    sb.append("    withdrawals: ").append(toIndentedString(withdrawals)).append("\n");
    sb.append("    deposits: ").append(toIndentedString(deposits)).append("\n");
    sb.append("    purchases: ").append(toIndentedString(purchases)).append("\n");
    sb.append("    cardTransactions: ").append(toIndentedString(cardTransactions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `withdrawals` to the URL query string
    if (getWithdrawals() != null) {
      joiner.add(String.format("%swithdrawals%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getWithdrawals()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `deposits` to the URL query string
    if (getDeposits() != null) {
      joiner.add(String.format("%sdeposits%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDeposits()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `purchases` to the URL query string
    if (getPurchases() != null) {
      joiner.add(String.format("%spurchases%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPurchases()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `cardTransactions` to the URL query string
    if (getCardTransactions() != null) {
      joiner.add(String.format("%scardTransactions%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCardTransactions()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

