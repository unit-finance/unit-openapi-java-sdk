/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package unit.java.sdk.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import unit.java.sdk.model.Address;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * CheckPaymentAttributesCounterparty
 */
@JsonPropertyOrder({
  CheckPaymentAttributesCounterparty.JSON_PROPERTY_NAME,
  CheckPaymentAttributesCounterparty.JSON_PROPERTY_ADDRESS,
  CheckPaymentAttributesCounterparty.JSON_PROPERTY_COUNTERPARTY_MOVED
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CheckPaymentAttributesCounterparty {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_ADDRESS = "address";
  private Address address;

  public static final String JSON_PROPERTY_COUNTERPARTY_MOVED = "counterpartyMoved";
  private Boolean counterpartyMoved;

  public CheckPaymentAttributesCounterparty() { 
  }

  public CheckPaymentAttributesCounterparty name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public CheckPaymentAttributesCounterparty address(Address address) {
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Address getAddress() {
    return address;
  }


  @JsonProperty(JSON_PROPERTY_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAddress(Address address) {
    this.address = address;
  }


  public CheckPaymentAttributesCounterparty counterpartyMoved(Boolean counterpartyMoved) {
    this.counterpartyMoved = counterpartyMoved;
    return this;
  }

   /**
   * Get counterpartyMoved
   * @return counterpartyMoved
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COUNTERPARTY_MOVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCounterpartyMoved() {
    return counterpartyMoved;
  }


  @JsonProperty(JSON_PROPERTY_COUNTERPARTY_MOVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCounterpartyMoved(Boolean counterpartyMoved) {
    this.counterpartyMoved = counterpartyMoved;
  }


  /**
   * Return true if this CheckPayment_attributes_counterparty object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckPaymentAttributesCounterparty checkPaymentAttributesCounterparty = (CheckPaymentAttributesCounterparty) o;
    return Objects.equals(this.name, checkPaymentAttributesCounterparty.name) &&
        Objects.equals(this.address, checkPaymentAttributesCounterparty.address) &&
        Objects.equals(this.counterpartyMoved, checkPaymentAttributesCounterparty.counterpartyMoved);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, address, counterpartyMoved);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckPaymentAttributesCounterparty {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    counterpartyMoved: ").append(toIndentedString(counterpartyMoved)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `address` to the URL query string
    if (getAddress() != null) {
      joiner.add(getAddress().toUrlQueryString(prefix + "address" + suffix));
    }

    // add `counterpartyMoved` to the URL query string
    if (getCounterpartyMoved() != null) {
      joiner.add(String.format("%scounterpartyMoved%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCounterpartyMoved()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

