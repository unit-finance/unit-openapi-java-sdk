/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package unit.java.sdk.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * HealthcareAmounts
 */
@JsonPropertyOrder({
  HealthcareAmounts.JSON_PROPERTY_TRANSIT_AMOUNT,
  HealthcareAmounts.JSON_PROPERTY_PRESCRIPTION_R_X_AMOUNT,
  HealthcareAmounts.JSON_PROPERTY_VISION_OPTICAL_AMOUNT,
  HealthcareAmounts.JSON_PROPERTY_CLINIC_OTHER_QUALIFIED_MEDICAL_AMOUNT,
  HealthcareAmounts.JSON_PROPERTY_DENTAL_AMOUNT,
  HealthcareAmounts.JSON_PROPERTY_TOTAL_HEALTHCARE_AMOUNT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class HealthcareAmounts {
  public static final String JSON_PROPERTY_TRANSIT_AMOUNT = "transitAmount";
  private Integer transitAmount;

  public static final String JSON_PROPERTY_PRESCRIPTION_R_X_AMOUNT = "prescriptionRXAmount";
  private Integer prescriptionRXAmount;

  public static final String JSON_PROPERTY_VISION_OPTICAL_AMOUNT = "visionOpticalAmount";
  private Integer visionOpticalAmount;

  public static final String JSON_PROPERTY_CLINIC_OTHER_QUALIFIED_MEDICAL_AMOUNT = "clinicOtherQualifiedMedicalAmount";
  private Integer clinicOtherQualifiedMedicalAmount;

  public static final String JSON_PROPERTY_DENTAL_AMOUNT = "dentalAmount";
  private Integer dentalAmount;

  public static final String JSON_PROPERTY_TOTAL_HEALTHCARE_AMOUNT = "totalHealthcareAmount";
  private Integer totalHealthcareAmount;

  public HealthcareAmounts() { 
  }

  public HealthcareAmounts transitAmount(Integer transitAmount) {
    this.transitAmount = transitAmount;
    return this;
  }

   /**
   * Get transitAmount
   * @return transitAmount
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TRANSIT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getTransitAmount() {
    return transitAmount;
  }


  @JsonProperty(JSON_PROPERTY_TRANSIT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTransitAmount(Integer transitAmount) {
    this.transitAmount = transitAmount;
  }


  public HealthcareAmounts prescriptionRXAmount(Integer prescriptionRXAmount) {
    this.prescriptionRXAmount = prescriptionRXAmount;
    return this;
  }

   /**
   * Get prescriptionRXAmount
   * @return prescriptionRXAmount
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PRESCRIPTION_R_X_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getPrescriptionRXAmount() {
    return prescriptionRXAmount;
  }


  @JsonProperty(JSON_PROPERTY_PRESCRIPTION_R_X_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPrescriptionRXAmount(Integer prescriptionRXAmount) {
    this.prescriptionRXAmount = prescriptionRXAmount;
  }


  public HealthcareAmounts visionOpticalAmount(Integer visionOpticalAmount) {
    this.visionOpticalAmount = visionOpticalAmount;
    return this;
  }

   /**
   * Get visionOpticalAmount
   * @return visionOpticalAmount
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VISION_OPTICAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getVisionOpticalAmount() {
    return visionOpticalAmount;
  }


  @JsonProperty(JSON_PROPERTY_VISION_OPTICAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVisionOpticalAmount(Integer visionOpticalAmount) {
    this.visionOpticalAmount = visionOpticalAmount;
  }


  public HealthcareAmounts clinicOtherQualifiedMedicalAmount(Integer clinicOtherQualifiedMedicalAmount) {
    this.clinicOtherQualifiedMedicalAmount = clinicOtherQualifiedMedicalAmount;
    return this;
  }

   /**
   * Get clinicOtherQualifiedMedicalAmount
   * @return clinicOtherQualifiedMedicalAmount
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CLINIC_OTHER_QUALIFIED_MEDICAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getClinicOtherQualifiedMedicalAmount() {
    return clinicOtherQualifiedMedicalAmount;
  }


  @JsonProperty(JSON_PROPERTY_CLINIC_OTHER_QUALIFIED_MEDICAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setClinicOtherQualifiedMedicalAmount(Integer clinicOtherQualifiedMedicalAmount) {
    this.clinicOtherQualifiedMedicalAmount = clinicOtherQualifiedMedicalAmount;
  }


  public HealthcareAmounts dentalAmount(Integer dentalAmount) {
    this.dentalAmount = dentalAmount;
    return this;
  }

   /**
   * Get dentalAmount
   * @return dentalAmount
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DENTAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getDentalAmount() {
    return dentalAmount;
  }


  @JsonProperty(JSON_PROPERTY_DENTAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDentalAmount(Integer dentalAmount) {
    this.dentalAmount = dentalAmount;
  }


  public HealthcareAmounts totalHealthcareAmount(Integer totalHealthcareAmount) {
    this.totalHealthcareAmount = totalHealthcareAmount;
    return this;
  }

   /**
   * Get totalHealthcareAmount
   * @return totalHealthcareAmount
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL_HEALTHCARE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getTotalHealthcareAmount() {
    return totalHealthcareAmount;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_HEALTHCARE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotalHealthcareAmount(Integer totalHealthcareAmount) {
    this.totalHealthcareAmount = totalHealthcareAmount;
  }


  /**
   * Return true if this healthcareAmounts object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HealthcareAmounts healthcareAmounts = (HealthcareAmounts) o;
    return Objects.equals(this.transitAmount, healthcareAmounts.transitAmount) &&
        Objects.equals(this.prescriptionRXAmount, healthcareAmounts.prescriptionRXAmount) &&
        Objects.equals(this.visionOpticalAmount, healthcareAmounts.visionOpticalAmount) &&
        Objects.equals(this.clinicOtherQualifiedMedicalAmount, healthcareAmounts.clinicOtherQualifiedMedicalAmount) &&
        Objects.equals(this.dentalAmount, healthcareAmounts.dentalAmount) &&
        Objects.equals(this.totalHealthcareAmount, healthcareAmounts.totalHealthcareAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transitAmount, prescriptionRXAmount, visionOpticalAmount, clinicOtherQualifiedMedicalAmount, dentalAmount, totalHealthcareAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HealthcareAmounts {\n");
    sb.append("    transitAmount: ").append(toIndentedString(transitAmount)).append("\n");
    sb.append("    prescriptionRXAmount: ").append(toIndentedString(prescriptionRXAmount)).append("\n");
    sb.append("    visionOpticalAmount: ").append(toIndentedString(visionOpticalAmount)).append("\n");
    sb.append("    clinicOtherQualifiedMedicalAmount: ").append(toIndentedString(clinicOtherQualifiedMedicalAmount)).append("\n");
    sb.append("    dentalAmount: ").append(toIndentedString(dentalAmount)).append("\n");
    sb.append("    totalHealthcareAmount: ").append(toIndentedString(totalHealthcareAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `transitAmount` to the URL query string
    if (getTransitAmount() != null) {
      joiner.add(String.format("%stransitAmount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTransitAmount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `prescriptionRXAmount` to the URL query string
    if (getPrescriptionRXAmount() != null) {
      joiner.add(String.format("%sprescriptionRXAmount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPrescriptionRXAmount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `visionOpticalAmount` to the URL query string
    if (getVisionOpticalAmount() != null) {
      joiner.add(String.format("%svisionOpticalAmount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVisionOpticalAmount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `clinicOtherQualifiedMedicalAmount` to the URL query string
    if (getClinicOtherQualifiedMedicalAmount() != null) {
      joiner.add(String.format("%sclinicOtherQualifiedMedicalAmount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getClinicOtherQualifiedMedicalAmount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `dentalAmount` to the URL query string
    if (getDentalAmount() != null) {
      joiner.add(String.format("%sdentalAmount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDentalAmount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `totalHealthcareAmount` to the URL query string
    if (getTotalHealthcareAmount() != null) {
      joiner.add(String.format("%stotalHealthcareAmount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTotalHealthcareAmount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

