/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package unit.java.sdk.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * RequireIdVerification
 */
@JsonPropertyOrder({
  RequireIdVerification.JSON_PROPERTY_INDIVIDUAL,
  RequireIdVerification.JSON_PROPERTY_OFFICER,
  RequireIdVerification.JSON_PROPERTY_BENEFICIAL_OWNERS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RequireIdVerification {
  public static final String JSON_PROPERTY_INDIVIDUAL = "individual";
  private Boolean individual = false;

  public static final String JSON_PROPERTY_OFFICER = "officer";
  private Boolean officer = false;

  public static final String JSON_PROPERTY_BENEFICIAL_OWNERS = "beneficialOwners";
  private Boolean beneficialOwners = false;

  public RequireIdVerification() { 
  }

  public RequireIdVerification individual(Boolean individual) {
    this.individual = individual;
    return this;
  }

   /**
   * Get individual
   * @return individual
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INDIVIDUAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIndividual() {
    return individual;
  }


  @JsonProperty(JSON_PROPERTY_INDIVIDUAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIndividual(Boolean individual) {
    this.individual = individual;
  }


  public RequireIdVerification officer(Boolean officer) {
    this.officer = officer;
    return this;
  }

   /**
   * Get officer
   * @return officer
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OFFICER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getOfficer() {
    return officer;
  }


  @JsonProperty(JSON_PROPERTY_OFFICER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOfficer(Boolean officer) {
    this.officer = officer;
  }


  public RequireIdVerification beneficialOwners(Boolean beneficialOwners) {
    this.beneficialOwners = beneficialOwners;
    return this;
  }

   /**
   * Get beneficialOwners
   * @return beneficialOwners
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BENEFICIAL_OWNERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getBeneficialOwners() {
    return beneficialOwners;
  }


  @JsonProperty(JSON_PROPERTY_BENEFICIAL_OWNERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBeneficialOwners(Boolean beneficialOwners) {
    this.beneficialOwners = beneficialOwners;
  }


  /**
   * Return true if this requireIdVerification object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequireIdVerification requireIdVerification = (RequireIdVerification) o;
    return Objects.equals(this.individual, requireIdVerification.individual) &&
        Objects.equals(this.officer, requireIdVerification.officer) &&
        Objects.equals(this.beneficialOwners, requireIdVerification.beneficialOwners);
  }

  @Override
  public int hashCode() {
    return Objects.hash(individual, officer, beneficialOwners);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequireIdVerification {\n");
    sb.append("    individual: ").append(toIndentedString(individual)).append("\n");
    sb.append("    officer: ").append(toIndentedString(officer)).append("\n");
    sb.append("    beneficialOwners: ").append(toIndentedString(beneficialOwners)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `individual` to the URL query string
    if (getIndividual() != null) {
      joiner.add(String.format("%sindividual%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIndividual()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `officer` to the URL query string
    if (getOfficer() != null) {
      joiner.add(String.format("%sofficer%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOfficer()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `beneficialOwners` to the URL query string
    if (getBeneficialOwners() != null) {
      joiner.add(String.format("%sbeneficialOwners%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBeneficialOwners()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

