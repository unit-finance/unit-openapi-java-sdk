/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package unit.java.sdk.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.Arrays;
import unit.java.sdk.model.Address;
import unit.java.sdk.model.Coordinates;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import unit.java.sdk.ApiClient;
/**
 * StoreLocationAttributes
 */
@JsonPropertyOrder({
  StoreLocationAttributes.JSON_PROPERTY_STORE_ID,
  StoreLocationAttributes.JSON_PROPERTY_RETAILER_NAME,
  StoreLocationAttributes.JSON_PROPERTY_PHONE,
  StoreLocationAttributes.JSON_PROPERTY_ADDRESS,
  StoreLocationAttributes.JSON_PROPERTY_COORDINATES,
  StoreLocationAttributes.JSON_PROPERTY_DISTANCE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class StoreLocationAttributes {
  public static final String JSON_PROPERTY_STORE_ID = "storeId";
  private String storeId;

  public static final String JSON_PROPERTY_RETAILER_NAME = "retailerName";
  private String retailerName;

  public static final String JSON_PROPERTY_PHONE = "phone";
  private String phone;

  public static final String JSON_PROPERTY_ADDRESS = "address";
  private Address address;

  public static final String JSON_PROPERTY_COORDINATES = "coordinates";
  private Coordinates coordinates;

  public static final String JSON_PROPERTY_DISTANCE = "distance";
  private BigDecimal distance;

  public StoreLocationAttributes() { 
  }

  public StoreLocationAttributes storeId(String storeId) {
    this.storeId = storeId;
    return this;
  }

  /**
   * Get storeId
   * @return storeId
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STORE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getStoreId() {
    return storeId;
  }


  @JsonProperty(JSON_PROPERTY_STORE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStoreId(String storeId) {
    this.storeId = storeId;
  }


  public StoreLocationAttributes retailerName(String retailerName) {
    this.retailerName = retailerName;
    return this;
  }

  /**
   * Get retailerName
   * @return retailerName
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RETAILER_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getRetailerName() {
    return retailerName;
  }


  @JsonProperty(JSON_PROPERTY_RETAILER_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRetailerName(String retailerName) {
    this.retailerName = retailerName;
  }


  public StoreLocationAttributes phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Get phone
   * @return phone
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PHONE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getPhone() {
    return phone;
  }


  @JsonProperty(JSON_PROPERTY_PHONE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPhone(String phone) {
    this.phone = phone;
  }


  public StoreLocationAttributes address(Address address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Address getAddress() {
    return address;
  }


  @JsonProperty(JSON_PROPERTY_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAddress(Address address) {
    this.address = address;
  }


  public StoreLocationAttributes coordinates(Coordinates coordinates) {
    this.coordinates = coordinates;
    return this;
  }

  /**
   * Get coordinates
   * @return coordinates
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COORDINATES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Coordinates getCoordinates() {
    return coordinates;
  }


  @JsonProperty(JSON_PROPERTY_COORDINATES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCoordinates(Coordinates coordinates) {
    this.coordinates = coordinates;
  }


  public StoreLocationAttributes distance(BigDecimal distance) {
    this.distance = distance;
    return this;
  }

  /**
   * Get distance
   * @return distance
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DISTANCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public BigDecimal getDistance() {
    return distance;
  }


  @JsonProperty(JSON_PROPERTY_DISTANCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDistance(BigDecimal distance) {
    this.distance = distance;
  }


  /**
   * Return true if this StoreLocation_attributes object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StoreLocationAttributes storeLocationAttributes = (StoreLocationAttributes) o;
    return Objects.equals(this.storeId, storeLocationAttributes.storeId) &&
        Objects.equals(this.retailerName, storeLocationAttributes.retailerName) &&
        Objects.equals(this.phone, storeLocationAttributes.phone) &&
        Objects.equals(this.address, storeLocationAttributes.address) &&
        Objects.equals(this.coordinates, storeLocationAttributes.coordinates) &&
        Objects.equals(this.distance, storeLocationAttributes.distance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(storeId, retailerName, phone, address, coordinates, distance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StoreLocationAttributes {\n");
    sb.append("    storeId: ").append(toIndentedString(storeId)).append("\n");
    sb.append("    retailerName: ").append(toIndentedString(retailerName)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    coordinates: ").append(toIndentedString(coordinates)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `storeId` to the URL query string
    if (getStoreId() != null) {
      joiner.add(String.format("%sstoreId%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getStoreId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `retailerName` to the URL query string
    if (getRetailerName() != null) {
      joiner.add(String.format("%sretailerName%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getRetailerName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `phone` to the URL query string
    if (getPhone() != null) {
      joiner.add(String.format("%sphone%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPhone()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `address` to the URL query string
    if (getAddress() != null) {
      joiner.add(getAddress().toUrlQueryString(prefix + "address" + suffix));
    }

    // add `coordinates` to the URL query string
    if (getCoordinates() != null) {
      joiner.add(getCoordinates().toUrlQueryString(prefix + "coordinates" + suffix));
    }

    // add `distance` to the URL query string
    if (getDistance() != null) {
      joiner.add(String.format("%sdistance%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDistance()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

