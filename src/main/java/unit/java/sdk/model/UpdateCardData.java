/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package unit.java.sdk.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import unit.java.sdk.model.PatchBusinessCreditCard;
import unit.java.sdk.model.PatchBusinessDebitCard;
import unit.java.sdk.model.PatchBusinessVirtualCreditCard;
import unit.java.sdk.model.PatchBusinessVirtualDebitCard;
import unit.java.sdk.model.PatchBusinessVirtualDebitCardAttributes;
import unit.java.sdk.model.PatchIndividualDebitCard;
import unit.java.sdk.model.PatchIndividualVirtualDebitCard;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import com.fasterxml.jackson.core.type.TypeReference;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import unit.java.sdk.JSON;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
@JsonDeserialize(using = UpdateCardData.UpdateCardDataDeserializer.class)
@JsonSerialize(using = UpdateCardData.UpdateCardDataSerializer.class)
public class UpdateCardData extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(UpdateCardData.class.getName());

    public static class UpdateCardDataSerializer extends StdSerializer<UpdateCardData> {
        public UpdateCardDataSerializer(Class<UpdateCardData> t) {
            super(t);
        }

        public UpdateCardDataSerializer() {
            this(null);
        }

        @Override
        public void serialize(UpdateCardData value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class UpdateCardDataDeserializer extends StdDeserializer<UpdateCardData> {
        public UpdateCardDataDeserializer() {
            this(UpdateCardData.class);
        }

        public UpdateCardDataDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public UpdateCardData deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize PatchBusinessCreditCard
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (PatchBusinessCreditCard.class.equals(Integer.class) || PatchBusinessCreditCard.class.equals(Long.class) || PatchBusinessCreditCard.class.equals(Float.class) || PatchBusinessCreditCard.class.equals(Double.class) || PatchBusinessCreditCard.class.equals(Boolean.class) || PatchBusinessCreditCard.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((PatchBusinessCreditCard.class.equals(Integer.class) || PatchBusinessCreditCard.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((PatchBusinessCreditCard.class.equals(Float.class) || PatchBusinessCreditCard.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (PatchBusinessCreditCard.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (PatchBusinessCreditCard.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PatchBusinessCreditCard.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PatchBusinessCreditCard'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PatchBusinessCreditCard'", e);
            }

            // deserialize PatchBusinessDebitCard
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (PatchBusinessDebitCard.class.equals(Integer.class) || PatchBusinessDebitCard.class.equals(Long.class) || PatchBusinessDebitCard.class.equals(Float.class) || PatchBusinessDebitCard.class.equals(Double.class) || PatchBusinessDebitCard.class.equals(Boolean.class) || PatchBusinessDebitCard.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((PatchBusinessDebitCard.class.equals(Integer.class) || PatchBusinessDebitCard.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((PatchBusinessDebitCard.class.equals(Float.class) || PatchBusinessDebitCard.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (PatchBusinessDebitCard.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (PatchBusinessDebitCard.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PatchBusinessDebitCard.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PatchBusinessDebitCard'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PatchBusinessDebitCard'", e);
            }

            // deserialize PatchBusinessVirtualCreditCard
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (PatchBusinessVirtualCreditCard.class.equals(Integer.class) || PatchBusinessVirtualCreditCard.class.equals(Long.class) || PatchBusinessVirtualCreditCard.class.equals(Float.class) || PatchBusinessVirtualCreditCard.class.equals(Double.class) || PatchBusinessVirtualCreditCard.class.equals(Boolean.class) || PatchBusinessVirtualCreditCard.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((PatchBusinessVirtualCreditCard.class.equals(Integer.class) || PatchBusinessVirtualCreditCard.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((PatchBusinessVirtualCreditCard.class.equals(Float.class) || PatchBusinessVirtualCreditCard.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (PatchBusinessVirtualCreditCard.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (PatchBusinessVirtualCreditCard.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PatchBusinessVirtualCreditCard.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PatchBusinessVirtualCreditCard'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PatchBusinessVirtualCreditCard'", e);
            }

            // deserialize PatchBusinessVirtualDebitCard
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (PatchBusinessVirtualDebitCard.class.equals(Integer.class) || PatchBusinessVirtualDebitCard.class.equals(Long.class) || PatchBusinessVirtualDebitCard.class.equals(Float.class) || PatchBusinessVirtualDebitCard.class.equals(Double.class) || PatchBusinessVirtualDebitCard.class.equals(Boolean.class) || PatchBusinessVirtualDebitCard.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((PatchBusinessVirtualDebitCard.class.equals(Integer.class) || PatchBusinessVirtualDebitCard.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((PatchBusinessVirtualDebitCard.class.equals(Float.class) || PatchBusinessVirtualDebitCard.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (PatchBusinessVirtualDebitCard.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (PatchBusinessVirtualDebitCard.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PatchBusinessVirtualDebitCard.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PatchBusinessVirtualDebitCard'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PatchBusinessVirtualDebitCard'", e);
            }

            // deserialize PatchIndividualDebitCard
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (PatchIndividualDebitCard.class.equals(Integer.class) || PatchIndividualDebitCard.class.equals(Long.class) || PatchIndividualDebitCard.class.equals(Float.class) || PatchIndividualDebitCard.class.equals(Double.class) || PatchIndividualDebitCard.class.equals(Boolean.class) || PatchIndividualDebitCard.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((PatchIndividualDebitCard.class.equals(Integer.class) || PatchIndividualDebitCard.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((PatchIndividualDebitCard.class.equals(Float.class) || PatchIndividualDebitCard.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (PatchIndividualDebitCard.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (PatchIndividualDebitCard.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PatchIndividualDebitCard.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PatchIndividualDebitCard'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PatchIndividualDebitCard'", e);
            }

            // deserialize PatchIndividualVirtualDebitCard
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (PatchIndividualVirtualDebitCard.class.equals(Integer.class) || PatchIndividualVirtualDebitCard.class.equals(Long.class) || PatchIndividualVirtualDebitCard.class.equals(Float.class) || PatchIndividualVirtualDebitCard.class.equals(Double.class) || PatchIndividualVirtualDebitCard.class.equals(Boolean.class) || PatchIndividualVirtualDebitCard.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((PatchIndividualVirtualDebitCard.class.equals(Integer.class) || PatchIndividualVirtualDebitCard.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((PatchIndividualVirtualDebitCard.class.equals(Float.class) || PatchIndividualVirtualDebitCard.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (PatchIndividualVirtualDebitCard.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (PatchIndividualVirtualDebitCard.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PatchIndividualVirtualDebitCard.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PatchIndividualVirtualDebitCard'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PatchIndividualVirtualDebitCard'", e);
            }

            if (match == 1) {
                UpdateCardData ret = new UpdateCardData();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(String.format("Failed deserialization for UpdateCardData: %d classes match result, expected 1", match));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public UpdateCardData getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "UpdateCardData cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<>();

    public UpdateCardData() {
        super("oneOf", Boolean.FALSE);
    }

    public UpdateCardData(PatchBusinessCreditCard o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public UpdateCardData(PatchBusinessDebitCard o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public UpdateCardData(PatchBusinessVirtualCreditCard o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public UpdateCardData(PatchBusinessVirtualDebitCard o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public UpdateCardData(PatchIndividualDebitCard o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public UpdateCardData(PatchIndividualVirtualDebitCard o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("PatchBusinessCreditCard", PatchBusinessCreditCard.class);
        schemas.put("PatchBusinessDebitCard", PatchBusinessDebitCard.class);
        schemas.put("PatchBusinessVirtualCreditCard", PatchBusinessVirtualCreditCard.class);
        schemas.put("PatchBusinessVirtualDebitCard", PatchBusinessVirtualDebitCard.class);
        schemas.put("PatchIndividualDebitCard", PatchIndividualDebitCard.class);
        schemas.put("PatchIndividualVirtualDebitCard", PatchIndividualVirtualDebitCard.class);
        JSON.registerDescendants(UpdateCardData.class, Collections.unmodifiableMap(schemas));
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return UpdateCardData.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * PatchBusinessCreditCard, PatchBusinessDebitCard, PatchBusinessVirtualCreditCard, PatchBusinessVirtualDebitCard, PatchIndividualDebitCard, PatchIndividualVirtualDebitCard
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(PatchBusinessCreditCard.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PatchBusinessDebitCard.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PatchBusinessVirtualCreditCard.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PatchBusinessVirtualDebitCard.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PatchIndividualDebitCard.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PatchIndividualVirtualDebitCard.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be PatchBusinessCreditCard, PatchBusinessDebitCard, PatchBusinessVirtualCreditCard, PatchBusinessVirtualDebitCard, PatchIndividualDebitCard, PatchIndividualVirtualDebitCard");
    }

    /**
     * Get the actual instance, which can be the following:
     * PatchBusinessCreditCard, PatchBusinessDebitCard, PatchBusinessVirtualCreditCard, PatchBusinessVirtualDebitCard, PatchIndividualDebitCard, PatchIndividualVirtualDebitCard
     *
     * @return The actual instance (PatchBusinessCreditCard, PatchBusinessDebitCard, PatchBusinessVirtualCreditCard, PatchBusinessVirtualDebitCard, PatchIndividualDebitCard, PatchIndividualVirtualDebitCard)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `PatchBusinessCreditCard`. If the actual instance is not `PatchBusinessCreditCard`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PatchBusinessCreditCard`
     * @throws ClassCastException if the instance is not `PatchBusinessCreditCard`
     */
    public PatchBusinessCreditCard getPatchBusinessCreditCard() throws ClassCastException {
        return (PatchBusinessCreditCard)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PatchBusinessDebitCard`. If the actual instance is not `PatchBusinessDebitCard`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PatchBusinessDebitCard`
     * @throws ClassCastException if the instance is not `PatchBusinessDebitCard`
     */
    public PatchBusinessDebitCard getPatchBusinessDebitCard() throws ClassCastException {
        return (PatchBusinessDebitCard)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PatchBusinessVirtualCreditCard`. If the actual instance is not `PatchBusinessVirtualCreditCard`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PatchBusinessVirtualCreditCard`
     * @throws ClassCastException if the instance is not `PatchBusinessVirtualCreditCard`
     */
    public PatchBusinessVirtualCreditCard getPatchBusinessVirtualCreditCard() throws ClassCastException {
        return (PatchBusinessVirtualCreditCard)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PatchBusinessVirtualDebitCard`. If the actual instance is not `PatchBusinessVirtualDebitCard`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PatchBusinessVirtualDebitCard`
     * @throws ClassCastException if the instance is not `PatchBusinessVirtualDebitCard`
     */
    public PatchBusinessVirtualDebitCard getPatchBusinessVirtualDebitCard() throws ClassCastException {
        return (PatchBusinessVirtualDebitCard)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PatchIndividualDebitCard`. If the actual instance is not `PatchIndividualDebitCard`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PatchIndividualDebitCard`
     * @throws ClassCastException if the instance is not `PatchIndividualDebitCard`
     */
    public PatchIndividualDebitCard getPatchIndividualDebitCard() throws ClassCastException {
        return (PatchIndividualDebitCard)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PatchIndividualVirtualDebitCard`. If the actual instance is not `PatchIndividualVirtualDebitCard`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PatchIndividualVirtualDebitCard`
     * @throws ClassCastException if the instance is not `PatchIndividualVirtualDebitCard`
     */
    public PatchIndividualVirtualDebitCard getPatchIndividualVirtualDebitCard() throws ClassCastException {
        return (PatchIndividualVirtualDebitCard)super.getActualInstance();
    }



  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    if (getActualInstance() instanceof PatchIndividualDebitCard) {
        if (getActualInstance() != null) {
          joiner.add(((PatchIndividualDebitCard)getActualInstance()).toUrlQueryString(prefix + "one_of_0" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof PatchIndividualVirtualDebitCard) {
        if (getActualInstance() != null) {
          joiner.add(((PatchIndividualVirtualDebitCard)getActualInstance()).toUrlQueryString(prefix + "one_of_1" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof PatchBusinessDebitCard) {
        if (getActualInstance() != null) {
          joiner.add(((PatchBusinessDebitCard)getActualInstance()).toUrlQueryString(prefix + "one_of_2" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof PatchBusinessVirtualDebitCard) {
        if (getActualInstance() != null) {
          joiner.add(((PatchBusinessVirtualDebitCard)getActualInstance()).toUrlQueryString(prefix + "one_of_3" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof PatchBusinessCreditCard) {
        if (getActualInstance() != null) {
          joiner.add(((PatchBusinessCreditCard)getActualInstance()).toUrlQueryString(prefix + "one_of_4" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof PatchBusinessVirtualCreditCard) {
        if (getActualInstance() != null) {
          joiner.add(((PatchBusinessVirtualCreditCard)getActualInstance()).toUrlQueryString(prefix + "one_of_5" + suffix));
        }
        return joiner.toString();
    }
    return null;
  }

}

